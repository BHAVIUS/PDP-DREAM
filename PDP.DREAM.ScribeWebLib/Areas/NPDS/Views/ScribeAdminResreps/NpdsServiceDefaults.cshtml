@{
  var prc = (PdpRestContext) ViewData["PRC"];
  Layout = prc.RazorMvcLayoutView;
  var TkgrArea = "NPDS";
  var TkgrController = "ScribeAdminResreps";
  var TkgrViewRole = "Admin";
  var TkgrPath = $"/{TkgrArea}/{TkgrController}/";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
  var Numf3Format = "{0:n3}";
}

@Html.Raw(prc.FormatPageTitle())

<div id="NpdsGrid" data-tkgrpath="@TkgrPath">
  @(Html.Kendo().Grid<NexusResrepEditModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  m.Field(p => p.RecordHandle).Editable(false);
  m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.EntityTypeCode).Editable(true).DefaultValue(NpdsConst.DefaultEntityTypeCode);
  m.Field(p => p.EntityTypeName).Editable(false);
  m.Field(p => p.EntityName).Editable(true);
  m.Field(p => p.EntityNature).Editable(true);
  m.Field(p => p.InfosetIsAuthorPrivate).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsAgentShared).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsUpdaterLimited).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsManagerReleased).Editable(true).DefaultValue(false);
  m.Field(p => p.UpdatedOn).Editable(false);
  m.Field(p => p.UpdatedByAgentName).Editable(false);
  m.Field(p => p.DeletedOn).Editable(false);
  m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectResrepRoots", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Create(post => post.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Update(put => put.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Destroy(delete => delete.Action("ScribeDeleteResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
  ;
  col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
  ;
  col.Command(com =>
  {
  com.Edit();
  com.Custom("ValidateRecord").Click("OnValidateRecord").Text("Validate")
  .HtmlAttributes(new { @class = "scribeValidateRecord", title = "Validate Resource Metadata Record" });
  }).Title(""); // end Command
  col.Bound(row => row.EntityTypeCode).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  .HtmlAttributes(new { title = "#=EntityTypeCode#" })
  .ClientTemplate("#=EntityTypeName#")
  .EditorTemplateName("_EntityTypeCode");
;  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" })
  .ClientTemplate("#=EntityName64#");
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" })
  .ClientTemplate("#=EntityNature128#");
  col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
  .HeaderHtmlAttributes(new { title = "Resource Record Diristry" })
  .HtmlAttributes(new { title = "#=RecordDiristryGuid#" })
  .ClientTemplate("#=RecordDiristryName#")
  .EditorTemplateName("_RecordDiristryGuid");
  col.Bound(row => row.RecordRegistryGuid).Title("Registry")
  .HeaderHtmlAttributes(new { title = "Resource Record Registry" })
  .HtmlAttributes(new { title = "#=RecordRegistryGuid#" })
  .ClientTemplate("#=RecordRegistryName#")
  .EditorTemplateName("_RecordRegistryGuid");
  col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
  .HeaderHtmlAttributes(new { title = "Resource Record Directory" })
  .HtmlAttributes(new { title = "#=RecordDirectoryGuid#" })
  .ClientTemplate("#=RecordDirectoryName#")
  .EditorTemplateName("_RecordDirectoryGuid");
  col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
  .HeaderHtmlAttributes(new { title = "Resource Record Registrar" })
  .HtmlAttributes(new { title = "#=RecordRegistrarGuid#" })
  .ClientTemplate("#=RecordRegistrarName#")
  .EditorTemplateName("_RecordRegistrarGuid");
  col.Command(com => {
    com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
    .HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
    com.Destroy();
  }).Title(""); // end Command
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .ClientDetailTemplateId("ResrepRecordTabStrip")
  .Editable(ed => ed.Mode(GridEditMode.InLine))
  .Events(ce => ce.Edit("HideStatus").Page("HideStatus")
  .DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(false).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable(st => st.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
  .Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<partial name="_TkgrScribeNexusToolbars" />

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
  @(Html.Kendo().TabStrip().Name("TabStrip#=RRRecordGuid#").Items(itm => {

  itm.Add().Text("Services").Content(@<text>
  @(Html.Kendo().Grid<ServiceDefaultEditModel>()
  .Name("ServiceDefaults#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.DiristryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DiristryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.DirectoryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DirectoryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistrarGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistrarName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
    m.Field(p => p.DeletedOn).Editable(false);
    m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectServiceDefaults", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Index in integer range [0,1,...,255]" })
    ;
    col.Command(com =>
    {
      com.Edit();
    }).Title(""); // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Principal?" });
    col.Bound(row => row.DiristryGuid).Title("Diristry")
    .HeaderHtmlAttributes(new { title = "Nexus Diristry" })
    .HtmlAttributes(new { title = "\\#=DiristryGuid\\#" })
    .ClientTemplate("\\#=DiristryName\\#")
    .EditorTemplateName("_RecordDiristryGuid");
    col.Bound(row => row.RegistryGuid).Title("Registry")
    .HeaderHtmlAttributes(new { title = "PORTAL Registry" })
    .HtmlAttributes(new { title = "\\#=RegistryGuid\\#" })
    .ClientTemplate("\\#=RegistryName\\#")
    .EditorTemplateName("_RecordRegistryGuid");
    col.Bound(row => row.DirectoryGuid).Title("Directory")
    .HeaderHtmlAttributes(new { title = "DOORS Directory" })
    .HtmlAttributes(new { title = "\\#=DirectoryGuid\\#" })
    .ClientTemplate("\\#=DirectoryName\\#")
    .EditorTemplateName("_RecordDirectoryGuid");
    col.Bound(row => row.RegistrarGuid).Title("Registrar")
    .HeaderHtmlAttributes(new { title = "Scribe Registrar" })
    .HtmlAttributes(new { title = "\\#=RegistrarGuid\\#" })
    .ClientTemplate("\\#=RegistrarName\\#")
    .EditorTemplateName("_RecordRegistrarGuid");
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Deleted on date" });
    col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
    .HeaderHtmlAttributes(new { title = "Deleted by agent" });
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("ServiceDefaultToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("EntityLabels").Content(@<text>
  @(Html.Kendo().Grid<EntityLabelEditModel>()
  .Name("EntityLabels#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsGenerating).Editable(true).DefaultValue(false);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsResolvable).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrivate).Editable(true).DefaultValue(false);
    m.Field(p => p.ServiceTypeCode).Editable(true).DefaultValue(2);
    m.Field(p => p.TagToken).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.LabelUri).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.EntityLabel).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.EntityLabelHtml).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectEntityLabels", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "EntityLabel has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckEntityLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "EntityLabel" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "EntityLabel has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Principal (Canonical)?" });
    col.Bound(row => row.EntityLabelHtml).Title("EntityLabel").Encoded(false)
    .HeaderHtmlAttributes(new { title = "Entity Label derived from LabelUri or from TagToken concatenated with Registry Label" });
    col.Bound(row => row.IsResolvable).Title("Resolvable")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Resolvable? (URI is also URL?)" });
    col.Bound(row => row.IsPrivate).Title("Private")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Private?" });
    col.Bound(row => row.IsGenerating).Title("GL?")
    .HeaderHtmlAttributes(new { title = "EntityLabel is a Generating URI?" });
    col.Bound(row => row.ServiceTypeCode).Title("STC?")
    .HeaderHtmlAttributes(new { title = "EntityLabel has ServiceTypeCode?" });
    col.Bound(row => row.TagToken).Title("TagToken")
    .HeaderHtmlAttributes(new { title = "EntityLabel TagToken" });
    col.Bound(row => row.LabelUri).Title("LabelUri")
    .HeaderHtmlAttributes(new { title = "EntityLabel has a non-default Generating URI" });
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Deleted on date"});
    col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
    .HeaderHtmlAttributes(new { title = "Deleted by agent" });
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("EntityLabelToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Status").LoadContentFrom("ScribeCheckResrepLeaf", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" });

  }).SelectedIndex(0).ToClientTemplate()
  )
</script>

<partial name="_TkgrScribeNexusJS" />
