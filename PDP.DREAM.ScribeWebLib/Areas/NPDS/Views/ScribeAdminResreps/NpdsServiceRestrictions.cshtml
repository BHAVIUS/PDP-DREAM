@{
  var prc = (PdpRestContext) ViewData["PRC"];
  Layout = prc.RazorMvcLayoutView;
  var TkgrArea = "NPDS";
  var TkgrController = "ScribeAdminResreps";
  var TkgrViewRole = "Admin";
  var TkgrPath = $"/{TkgrArea}/{TkgrController}/";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
  var Numf3Format = "{0:n3}";
}

@Html.Raw(prc.FormatPageTitle())

<div id="NpdsGrid" data-tkgrpath="@TkgrPath">
  @(Html.Kendo().Grid<NexusResrepEditModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  m.Field(p => p.RecordHandle).Editable(false);
  m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.EntityTypeCode).Editable(true).DefaultValue(NpdsConst.DefaultEntityTypeCode);
  m.Field(p => p.EntityTypeName).Editable(false);
  m.Field(p => p.EntityName).Editable(true);
  m.Field(p => p.EntityNature).Editable(true);
  m.Field(p => p.InfosetIsAuthorPrivate).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsAgentShared).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsUpdaterLimited).Editable(true).DefaultValue(false);
  m.Field(p => p.InfosetIsManagerReleased).Editable(true).DefaultValue(false);
  m.Field(p => p.UpdatedOn).Editable(false);
  m.Field(p => p.UpdatedByAgentName).Editable(false);
  m.Field(p => p.DeletedOn).Editable(false);
  m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectResrepRoots", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Create(post => post.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Update(put => put.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Destroy(delete => delete.Action("ScribeDeleteResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
  ;
  col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
  ;
  col.Command(com =>
  {
  com.Edit();
  com.Custom("ValidateRecord").Click("OnValidateRecord").Text("Validate")
  .HtmlAttributes(new { @class = "scribeValidateRecord", title = "Validate Resource Metadata Record" });
  }).Title(""); // end Command
  col.Bound(row => row.EntityTypeCode).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  .HtmlAttributes(new { title = "#=EntityTypeCode#" })
  .ClientTemplate("#=EntityTypeName#")
  .EditorTemplateName("_EntityTypeCode");
;  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" })
  .ClientTemplate("#=EntityName64#");
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" })
  .ClientTemplate("#=EntityNature128#");
  col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
  .HeaderHtmlAttributes(new { title = "Resource Record Diristry" })
  .HtmlAttributes(new { title = "#=RecordDiristryGuid#" })
  .ClientTemplate("#=RecordDiristryName#")
  .EditorTemplateName("_RecordDiristryGuid");
  col.Bound(row => row.RecordRegistryGuid).Title("Registry")
  .HeaderHtmlAttributes(new { title = "Resource Record Registry" })
  .HtmlAttributes(new { title = "#=RecordRegistryGuid#" })
  .ClientTemplate("#=RecordRegistryName#")
  .EditorTemplateName("_RecordRegistryGuid");
  col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
  .HeaderHtmlAttributes(new { title = "Resource Record Directory" })
  .HtmlAttributes(new { title = "#=RecordDirectoryGuid#" })
  .ClientTemplate("#=RecordDirectoryName#")
  .EditorTemplateName("_RecordDirectoryGuid");
  col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
  .HeaderHtmlAttributes(new { title = "Resource Record Registrar" })
  .HtmlAttributes(new { title = "#=RecordRegistrarGuid#" })
  .ClientTemplate("#=RecordRegistrarName#")
  .EditorTemplateName("_RecordRegistrarGuid");
  col.Command(com => {
    com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
    .HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
    com.Destroy();
  }).Title(""); // end Command
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .ClientDetailTemplateId("RestrictionAndsTemplate")
  .Editable(ed => ed.Mode(GridEditMode.InLine))
  .Events(ce => ce.Edit("HideStatus").Page("HideStatus")
  .DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(false).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable(st => st.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
  .Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<partial name="_TkgrScribeNexusToolbars" />

<script id="RestrictionAndsTemplate" type="text/x-kendo-template">
  @(Html.Kendo().Grid<RestrictionAndEditModel>()
    .Name("RestrictionAnds#=RRRecordGuid#")
    .DataSource(ds => ds.Ajax()
    .Model(m => {
      m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Id(p => p.RestrictionAndGuid);
      m.Field(p => p.RestrictionAndGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionAndIndex).Editable(false).DefaultValue(0);
      m.Field(p => p.RestrictionAndPriority).Editable(true).DefaultValue(0);
      m.Field(p => p.RestrictionName).Editable(true).DefaultValue(string.Empty);
      m.Field(p => p.RestrictionIsSufficient).Editable(true).DefaultValue(false);
      m.Field(p => p.UpdatedOn).Editable(false);
    }) // end Model
    .Read(get => get.Action("ScribeSelectRestrictionAnds", TkgrController, new { recordGuid = "#=RRRecordGuid#" }))
    .Create(post => post.Action("ScribeUpsertRestrictionAnd", TkgrController, new { recordGuid = "#=RRRecordGuid#" }))
    .Update(put => put.Action("ScribeUpsertRestrictionAnd", TkgrController))
    .Destroy(delete => delete.Action("ScribeDeleteRestrictionAnd", TkgrController))
    .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
    ) // end DataSource
    .Columns(col => {
      col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid");
      col.Bound(row => row.RestrictionAndGuid).Hidden(true).Title("RestrictionAndGuid");
      col.Bound(row => row.RestrictionAndIndex).Title("Index")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Index in integer range [0,1,...,255]" });
      col.Command(com => com.Edit()).Title("");
      col.Bound(row => row.RestrictionName).Title("Name")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Name for the concept group" });
      col.Bound(row => row.RestrictionAndPriority).Title("Priority")
      .EditorTemplateName("_IndexInteger")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Priority in integer range [0,1,...,255]" });
      col.Bound(row => row.RestrictionIsSufficient).Title("IsSufficient")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd IsSufficient for the concept group" });
      col.Bound(row => row.UpdatedOn).Title("Updated").Format(UtcdtFormat);
      col.Command(com2 => com2.Destroy()).Title("");
    }) // end Columns
    .Editable(edit => edit.Mode(GridEditMode.InLine))
    .ToolBar(tb => tb.ClientTemplateId("RestrictionAndToolBar"))
    .ClientDetailTemplateId("RestrictionOrsTemplate")
    .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
    .Pageable(pg => pg.Refresh(true))
    .Sortable()
    .ToClientTemplate()
  )
</script>

<script id="RestrictionOrsTemplate" type="text/x-kendo-template">
  @(Html.Kendo().Grid<RestrictionOrEditModel>()
    .Name("RestrictionOrs#=RestrictionAndGuid#")
    .DataSource(ds => ds.Ajax()
    .Model(m =>
    {
      m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionAndGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Id(p => p.RestrictionOrGuid);
      m.Field(p => p.RestrictionOrGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionOrIndex).Editable(false).DefaultValue(0);
      m.Field(p => p.RestrictionOrPriority).Editable(true).DefaultValue(0);
      m.Field(p => p.Restriction).Editable(true).DefaultValue(string.Empty);
      m.Field(p => p.IsWordPhrase).Editable(true).DefaultValue(false);
      m.Field(p => p.IsConceptLabel).Editable(true).DefaultValue(false);
      m.Field(p => p.UpdatedOn).Editable(false);
    }) // end Model
    .Read(get => get.Action("ScribeSelectRestrictionOrs", TkgrController,
      new { area = TkgrArea, restAndGuid = "#=RestrictionAndGuid#", recordGuid = "#=RRRecordGuid#" }))
    .Create(post => post.Action("ScribeUpsertRestrictionOr", TkgrController,
      new { area = TkgrArea, restAndGuid = "#=RestrictionAndGuid#", recordGuid = "#=RRRecordGuid#" }))
    .Update(put => put.Action("ScribeUpsertRestrictionOr", TkgrController,
      new { area = TkgrArea }))
    .Destroy(delete => delete.Action("ScribeDeleteRestrictionOr", TkgrController,
      new { area = TkgrArea }))
    .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
    ) // end DataSource
    .Columns(col => {
      col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid");
      col.Bound(row => row.RestrictionAndGuid).Hidden(true).Title("RestrictionAndGuid")
      .HeaderHtmlAttributes(new { title = "RestrictionAndGuid for the concept group" });
      col.Bound(row => row.RestrictionOrGuid).Hidden(true);
      col.Bound(row => row.RestrictionOrIndex).Title("Index")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Index in integer range [0,1,...,255]" });
      col.Command(com1 => com1.Edit()).Title("");
      col.Bound(row => row.RestrictionOrPriority).Title("Priority")
      .EditorTemplateName("_IndexInteger")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Priority in integer range [0,1,...,255]" });
      col.Bound(row => row.Restriction).Title("Value")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Value for the concept item" });
      col.Bound(row => row.IsWordPhrase).Title("IsWordPhrase")
      .HeaderHtmlAttributes(new { title = "RestrictionOr is word phrase (true) or word stem (false)" });
      col.Bound(row => row.IsConceptLabel).Title("IsConceptLabel")
      .HeaderHtmlAttributes(new { title = "RestrictionOr is concept label (a valid EntityLabel, URI, URL)" });
      col.Bound(row => row.UpdatedOn).Title("Updated").Format(UtcdtFormat);
      col.Command(com2 => com2.Destroy()).Title("");
    }) // end Columns
    .Editable(edit => edit.Mode(GridEditMode.InLine))
    .ToolBar(tb => tb.ClientTemplateId("RestrictionOrToolBar"))
    .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
    .Pageable(pg => pg.Refresh(true))
    .Sortable()
    .ToClientTemplate()
  )
</script>

<partial name="_TkgrScribeNexusJS" />
