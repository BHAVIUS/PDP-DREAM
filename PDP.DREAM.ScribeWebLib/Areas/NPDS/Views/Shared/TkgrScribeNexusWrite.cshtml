@{
  var prc = (PdpRestContext) ViewData["PRC"];
  Layout = prc.RazorMvcLayoutView;
  var TkgrArea = prc.TkgrArea;
  var TkgrController = prc.TkgrController;
  var TkgrViewRole = prc.TkgrViewRole;
  var TkgrPath = $"/{TkgrArea}/{TkgrController}/";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
  var Numf3Format = "{0:n3}";
  var inAgentRole = false;
  if (TkgrViewRole == "Agent") { inAgentRole = true; }
  var inAdminRole = false;
  if (TkgrViewRole == "Admin") { inAdminRole = true; }
}

@Html.Raw(prc.FormatPageTitle())

<div id="NpdsGrid" data-tkgrpath="@TkgrPath">
  @(Html.Kendo().Grid<NexusResrepEditModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  m.Field(p => p.RecordHandle).Editable(false);
  m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.EntityTypeCode).Editable(!inAgentRole).DefaultValue(NpdsConst.DefaultEntityTypeCode);
  m.Field(p => p.EntityTypeName).Editable(false);
  m.Field(p => p.EntityName).Editable(!inAgentRole);
  m.Field(p => p.EntityNature).Editable(!inAgentRole);
  m.Field(p => p.InfosetIsAuthorPrivate).Editable(!inAgentRole).DefaultValue(false);
  m.Field(p => p.InfosetIsAgentShared).Editable(!inAgentRole).DefaultValue(false);
  m.Field(p => p.InfosetIsUpdaterLimited).Editable(!inAgentRole).DefaultValue(false);
  m.Field(p => p.InfosetIsManagerReleased).Editable(!inAgentRole).DefaultValue(false);
  m.Field(p => p.UpdatedOn).Editable(false);
  m.Field(p => p.UpdatedByAgentName).Editable(false);
  m.Field(p => p.DeletedOn).Editable(false);
  m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectResrepRoots", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Create(post => post.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Update(put => put.Action("ScribeUpsertResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Destroy(delete => delete.Action("ScribeDeleteResrepRoot", TkgrController,
  new { area = TkgrArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
  ;
  col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
  ;
  if (!inAgentRole) {
    col.Command(com => {
    com.Edit();
    com.Custom("ValidateRecord").Click("OnValidateRecord").Text("Validate")
    .HtmlAttributes(new { @class = "scribeValidateRecord", title = "Validate Resource Metadata Record" });
    }).Title(""); // end Command
  } // end if
  if (inAgentRole) {
    col.Bound(row => row.RRRecordGuid).Title("Authorship")
    .HeaderHtmlAttributes(new { title = "Request Authorship for resource metadata record from current Author; requests may be mediated by the Editor or Admin." })
    .ClientTemplate("<span id='ReqRel#=RecordHandle#'> #=AgentRequestHtml# </span>")
    .Filterable(false).Sortable(false);
  } // end if
  col.Bound(row => row.EntityTypeCode).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  .HtmlAttributes(new { title = "#=EntityTypeCode#" })
  .ClientTemplate("#=EntityTypeName#")
  .EditorTemplateName("_EntityTypeCode")
  .Filterable(false);
  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" })
  .ClientTemplate("#=EntityName64#");
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" })
  .ClientTemplate("#=EntityNature128#");
  col.Bound(row => row.InfosetIsAuthorPrivate).Title("Private?").Hidden(false).Sortable(false)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is private to author?" })
  .Filterable(false);
  col.Bound(row => row.InfosetIsAgentShared).Title("Shared?").Hidden(false).Sortable(false)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is shared with agents?" })
  .Filterable(false);
  col.Bound(row => row.InfosetIsUpdaterLimited).Title("Limited?").Hidden(false).Sortable(false)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is limited to most recent updater?" })
  .Filterable(false);
  col.Bound(row => row.InfosetIsManagerReleased).Title("Released?").Hidden(false).Sortable(false)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is released by most recent manager?" })
  .Filterable(false);
  if (!inAgentRole) {
    col.Command(com => {
    com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
    .HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
    com.Destroy();
    }).Title(""); // end Command
  } // end if
  col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
  .HeaderHtmlAttributes(new { title = "Updated on date" });
  if (inAdminRole) {
    col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Deleted on date" });
  } // end if
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .ClientDetailTemplateId("ResrepRecordTabStrip")
  .Editable(ed => ed.Mode(GridEditMode.InLine))
  .Events(ce => ce.Edit("HideStatus").Page("HideStatus")
  .DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(true).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable(st => st.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
  .Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<partial name="_TkgrScribeNexusToolbarsWrite" />

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
  @(Html.Kendo().TabStrip().Name("TabStrip#=RRRecordGuid#").Items(itm => {

  itm.Add().Text("Services").Content(@<text>
  @(Html.Kendo().Grid<ServiceDefaultEditModel>()
  .Name("ServiceDefaults#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.DiristryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DiristryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.DirectoryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DirectoryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistrarGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistrarName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
    m.Field(p => p.DeletedOn).Editable(false);
    m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectServiceDefaults", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteServiceDefault", TkgrController,
    new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Index in integer range [0,1,...,255]" })
    ;
    if (inAdminRole) {
      col.Command(com => {
      com.Edit();
      }).Title(""); // end Command
    } // end if
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Principal?" });
    col.Bound(row => row.DiristryGuid).Title("Diristry")
    .HeaderHtmlAttributes(new { title = "Nexus Diristry" })
    .HtmlAttributes(new { title = "\\#=DiristryGuid\\#" })
    .ClientTemplate("\\#=DiristryName\\#")
    .EditorTemplateName("_RecordDiristryGuid");
    col.Bound(row => row.RegistryGuid).Title("Registry")
    .HeaderHtmlAttributes(new { title = "PORTAL Registry" })
    .HtmlAttributes(new { title = "\\#=RegistryGuid\\#" })
    .ClientTemplate("\\#=RegistryName\\#")
    .EditorTemplateName("_RecordRegistryGuid");
    col.Bound(row => row.DirectoryGuid).Title("Directory")
    .HeaderHtmlAttributes(new { title = "DOORS Directory" })
    .HtmlAttributes(new { title = "\\#=DirectoryGuid\\#" })
    .ClientTemplate("\\#=DirectoryName\\#")
    .EditorTemplateName("_RecordDirectoryGuid");
    col.Bound(row => row.RegistrarGuid).Title("Registrar")
    .HeaderHtmlAttributes(new { title = "Scribe Registrar" })
    .HtmlAttributes(new { title = "\\#=RegistrarGuid\\#" })
    .ClientTemplate("\\#=RegistrarName\\#")
    .EditorTemplateName("_RecordRegistrarGuid");
    if (inAdminRole) {
      col.Command(com => {
      com.Destroy();
      }).Title(""); // end Command
    } // end if
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date" });
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine).Enabled(!inAgentRole))
  .ToolBar(tb => tb.ClientTemplateId("ServiceDefaultToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("EntityLabels").Content(@<text>
  @(Html.Kendo().Grid<EntityLabelEditModel>()
  .Name("EntityLabels#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(!inAgentRole).DefaultValue(0);
    m.Field(p => p.IsGenerating).Editable(!inAgentRole).DefaultValue(false);
    m.Field(p => p.IsMarked).Editable(!inAgentRole).DefaultValue(false);
    m.Field(p => p.IsResolvable).Editable(!inAgentRole).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(!inAgentRole).DefaultValue(false);
    m.Field(p => p.IsPrivate).Editable(!inAgentRole).DefaultValue(false);
    m.Field(p => p.ServiceTypeCode).Editable(!inAgentRole).DefaultValue(2);
    m.Field(p => p.TagToken).Editable(!inAgentRole).DefaultValue(string.Empty);
    m.Field(p => p.LabelUri).Editable(inAdminRole).DefaultValue(string.Empty);
    m.Field(p => p.EntityLabel).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.EntityLabelHtml).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectEntityLabels", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteEntityLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "EntityLabel has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      if (!inAgentRole) { com.Edit(); } // end if
      com.Custom("CheckEntityLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "EntityLabel" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "EntityLabel has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Principal (Canonical)?" });
    col.Bound(row => row.EntityLabelHtml).Title("EntityLabel").Encoded(false)
    .HeaderHtmlAttributes(new { title = "Entity Label derived from LabelUri or from TagToken concatenated with Registry Label" });
    col.Bound(row => row.IsResolvable).Title("Resolvable")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Resolvable? (URI is also URL?)" });
    col.Bound(row => row.IsPrivate).Title("Private")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Private?" });
    if (inAdminRole) {
      col.Bound(row => row.IsGenerating).Title("GL?")
      .HeaderHtmlAttributes(new { title = "EntityLabel is a Generating URI?" });
      col.Bound(row => row.ServiceTypeCode).Title("STC?")
      .HeaderHtmlAttributes(new { title = "EntityLabel has ServiceTypeCode?" });
    } // end if
    col.Bound(row => row.TagToken).Title("TagToken")
    .HeaderHtmlAttributes(new { title = "EntityLabel TagToken" });
    if (inAdminRole) {
      col.Bound(row => row.LabelUri).Title("LabelUri")
      .HeaderHtmlAttributes(new { title = "EntityLabel has a non-default Generating URI" });
    } // end if
    if (!inAgentRole) {
      col.Command(com => {
      com.Destroy();
      }).Title(""); // end Command
    } // end if
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine).Enabled(!inAgentRole))
  .ToolBar(tb => tb.ClientTemplateId("EntityLabelToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("SupportingTags").Content(@<text>
  @(Html.Kendo().Grid<SupportingTagEditModel>()
  .Name("SupportingTags#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.SupportingTag).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectSupportingTags", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertSupportingTag", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertSupportingTag", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteSupportingTag", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "SupportingTag has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckSupportingTag").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "SupportingTag" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "SupportingTag has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "SupportingTag is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "SupportingTag is Principal?" });
    col.Bound(row => row.SupportingTag).Title("SupportingTag");
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("SupportingTagToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("SupportingLabels").Content(@<text>
  @(Html.Kendo().Grid<SupportingLabelEditModel>()
  .Name("SupportingLabels#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.SupportingLabel).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectSupportingLabels", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertSupportingLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertSupportingLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteSupportingLabel", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "SupportingLabel has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckSupportingLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "SupportingLabel" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "SupportingLabel has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "SupportingLabel is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "SupportingLabel is Principal?" });
    col.Bound(row => row.SupportingLabel).Title("SupportingLabel").Encoded(false);
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("SupportingLabelToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("CrossReferences").Content(@<text>
  @(Html.Kendo().Grid<CrossReferenceEditModel>()
  .Name("CrossReferences#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.CrossReference).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectCrossReferences", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertCrossReference", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertCrossReference", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteCrossReference", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // Datasource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "CrossReference has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckCrossReference").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "CrossReference" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "CrossReference has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "CrossReference is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "CrossReference is Principal?" });
    col.Bound(row => row.CrossReference).Title("CrossReference").Encoded(false);
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("CrossReferenceToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("OtherTexts").Content(@<text>
  @(Html.Kendo().Grid<OtherTextEditModel>()
  .Name("OtherTexts#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.OtherText).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectOtherTexts", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertOtherText", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertOtherText", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteOtherText", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "OtherText has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckOtherText").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "OtherText" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "OtherText has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "OtherText is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "OtherText is Principal?" });
    col.Bound(row => row.OtherText).Title("OtherText")
    .HeaderHtmlAttributes(new { title = "OtherText in valid XML format" });
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("OtherTextToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Locations").Content(@<text>
  @(Html.Kendo().Grid<LocationEditModel>()
  .Name("Locations#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.Telephone).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.EmailAddress).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.UrlWebAddress).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.StreetAddress).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.CityLocality).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.StateRegion).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.Country).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.PostalCode).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.Location).Editable(false).DefaultValue(String.Empty);
    m.Field(p => p.GeocodeType).Editable(false).DefaultValue(String.Empty);
    m.Field(p => p.GeocodeConfidence).Editable(false).DefaultValue(String.Empty);
    m.Field(p => p.FormattedAddress).Editable(false).DefaultValue(String.Empty);
    m.Field(p => p.Latitude).Editable(false).DefaultValue(0);
    m.Field(p => p.Longitude).Editable(false).DefaultValue(0);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectLocations", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertLocation", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertLocation", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteLocation", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "Location has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckLocation").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Location" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Location has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Location is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Location is Principal?" });
    col.Bound(row => row.Telephone).Title("Phone Number");
    col.Bound(row => row.EmailAddress).Title("Email Address");
    col.Bound(row => row.UrlWebAddress).Title("Web Address")
    .ClientTemplate("\\#=UrlWebAddressHtml\\#");
    col.Bound(row => row.StreetAddress).Title("Street Address");
    col.Bound(row => row.CityLocality).Title("City / Locality");
    col.Bound(row => row.StateRegion).Title("State / Region");
    col.Bound(row => row.Country).Title("Country");
    col.Bound(row => row.PostalCode).Title("Postal Code");
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("LocationToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Descriptions").Content(@<text>
  @(Html.Kendo().Grid<DescriptionEditModel>()
  .Name("Descriptions#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.Description).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.Description128).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectDescriptions", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertDescription", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertDescription", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteDescription", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "Description has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckDescription").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Description" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Description has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Description is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Description is Principal?" });
    col.Bound(row => row.Description128).Title("Description128")
    .HeaderHtmlAttributes(new { title = "Description128 in truncated display" })
    .HtmlAttributes(new { title = "\\#=Description\\#" });
    col.Bound(row => row.Description).Title("Description")
    .HeaderHtmlAttributes(new { title = "Description in non-truncated display" })
    .EditorTemplateName("_TextAreaBox")
    .ClientTemplate("");
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("DescriptionToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Provenances").Content(@<text>
  @(Html.Kendo().Grid<ProvenanceEditModel>()
  .Name("Provenances#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.Provenance).Editable(true).DefaultValue(String.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectProvenances", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertProvenance", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertProvenance", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteProvenance", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "Provenance has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckProvenance").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Provenance" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Provenance has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Provenance is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Provenance is Principal?" });
    col.Bound(row => row.Provenance).Title("Provenance")
    .HeaderHtmlAttributes(new { title = "Provenance in valid XML format" });
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("ProvenanceToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Distributions").Content(@<text>
  @(Html.Kendo().Grid<DistributionEditModel>()
  .Name("Distributions#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.Distribution).Editable(true).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectDistributions", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertDistribution", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertDistribution", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteDistribution", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "Distribution has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckDistribution").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Distribution" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Distribution has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Distribution is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Distribution is Principal?" });
    col.Bound(row => row.Distribution).Title("Distribution")
    .HeaderHtmlAttributes(new { title = "Distribution in valid XML format" });
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("DistributionToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("FairMetrics").Content(@<text>
  @(Html.Kendo().Grid<FairMetricEditModel>()
  .Name("FairMetrics#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.MInvalidOldClaim).Editable(true).DefaultValue(0);
    m.Field(p => p.QValidOldClaim).Editable(true).DefaultValue(0);
    m.Field(p => p.PInvalidNewClaim).Editable(true).DefaultValue(0);
    m.Field(p => p.NValidNewClaim).Editable(true).DefaultValue(0);
    m.Field(p => p.FAIR1).Editable(false).DefaultValue(0);
    m.Field(p => p.FAIR2).Editable(false).DefaultValue(0);
    m.Field(p => p.FAIR3).Editable(false).DefaultValue(0);
    m.Field(p => p.FAIR4).Editable(false).DefaultValue(0);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectFairMetrics", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertFairMetric", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Update(put => put.Action("ScribeUpsertFairMetric", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Destroy(delete => delete.Action("ScribeDeleteFairMetric", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "FairMetric has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
      com.Custom("CheckFairMetric").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "FairMetric" });
    }).Title("");  // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "FairMetric has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.MInvalidOldClaim).Title("M = Misquoted")
    .HeaderHtmlAttributes(new { title = "Invalid Old Claims" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.QValidOldClaim).Title("Q = Quoted")
    .HeaderHtmlAttributes(new { title = "Valid Old Claims" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.PInvalidNewClaim).Title("P = Plagiarized")
    .HeaderHtmlAttributes(new { title = "Invalid New Claims" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.NValidNewClaim).Title("N = Novel")
    .HeaderHtmlAttributes(new { title = "Valid New Claims" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.FAIR1).Title("F1").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 1 Metric" });
    col.Bound(row => row.FAIR2).Title("F2").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 2 Metric" });
    col.Bound(row => row.FAIR3).Title("F3").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 3 Metric" });
    col.Bound(row => row.FAIR4).Title("F4").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 4 Metric" });
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    if (inAdminRole) {
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("FairMetricToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Snapshots").Content(@<text>
  @(Html.Kendo().Grid<NexusSnapshotEditModel>()
  .Name("Snapshots#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.NexusSnapshot).Editable(false);
    m.Field(p => p.CreatedOn).Editable(false);
    m.Field(p => p.CreatedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("ScribeSelectSnapshots", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Create(post => post.Action("ScribeUpsertSnapshot", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.NexusSnapshot).Title("Snapshot");
    col.Bound(row => row.CreatedOn).Title("ArchivedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Archived on date" });
    col.Bound(row => row.CreatedByAgentName).Title("ArchivedBy")
    .HeaderHtmlAttributes(new { title = "Archived by agent" });
    if (inAdminRole) {
      col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Updated on date" });
      col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
      .HeaderHtmlAttributes(new { title = "Updated by agent" });
      col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
      .HeaderHtmlAttributes(new { title = "Deleted on date"});
      col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
      .HeaderHtmlAttributes(new { title = "Deleted by agent" });
    } // end if
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepSnapshotToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Status").LoadContentFrom("ScribeCheckResrepLeaf", TkgrController,
  new { area = TkgrArea, recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" });

  }).SelectedIndex(0).ToClientTemplate()
  )
</script>

<partial name="_TkgrScribeNexusWriteJS" />
