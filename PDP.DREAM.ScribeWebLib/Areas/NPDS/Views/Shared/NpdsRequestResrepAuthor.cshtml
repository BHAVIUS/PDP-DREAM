@{
  var prc = (PdpRestContext) ViewData["PRC"];
  Layout = prc.RazorMvcLayoutView;
  var TkgrArea = prc.TkgrArea;
  var TkgrController = prc.TkgrController;
  var TkgrViewRole = prc.TkgrViewRole;
  var TkgrPath = $"/{TkgrArea}/{TkgrController}/";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
  var Numf3Format = "{0:n3}";
  var inAgentRole = false;
  if (TkgrViewRole == "Agent") { inAgentRole = true; }
  var inAdminRole = false;
  if (TkgrViewRole == "Admin") { inAdminRole = true; }
}

@Html.Raw(prc.FormatPageTitle(TkgrViewRole + " Manage Requests for NPDS Resrep Author"))

<div id="NpdsGrid" data-tkgrpath="@TkgrPath">
  @(Html.Kendo().Grid<ResrepAuthorRequestEditModel>()
  .Name("ResrepAuthorRequestGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(15)
  .Model(m => {
  m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
  m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.RRInfosetGuid).Editable(true).DefaultValue(Guid.Empty);
  m.Id(p => p.RRFgroupGuid);
  m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.ResrepRecordHandle).Editable(false);
  m.Field(p => p.ResrepEntityName).Editable(false);
  m.Field(p => p.ManagedByAgentName).Editable(false);
  m.Field(p => p.AccessRequestedForAgentName).Editable(false);
  m.Field(p => p.RequestIsApproved).Editable(inAdminRole);
  m.Field(p => p.RequestIsDenied).Editable(inAdminRole);
  m.Field(p => p.AuthorHasResrepAccess).Editable(inAdminRole);
  m.Field(p => p.CreatedOn).Editable(false);
  m.Field(p => p.CreatedByAgentName).Editable(false);
  m.Field(p => p.UpdatedOn).Editable(false);
  m.Field(p => p.UpdatedByAgentName).Editable(false);
  }) // end Model
  .Read(select => select.Action("ScribeSelectResrepAuthorRequests", TkgrController, new { area = TkgrArea }))
  .Create(insert => insert.Action("ScribeUpsertResrepAuthorRequest", TkgrController, new { area = TkgrArea }))
  .Update(update => update.Action("ScribeUpsertResrepAuthorRequest", TkgrController, new { area = TkgrArea }))
  .Destroy(delete => delete.Action("ScribeDeleteResrepAuthorRequest", TkgrController, new { area = TkgrArea }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.HasIndex).Title("Index")
  .HeaderHtmlAttributes(new { title = "Request has Index in integer range [0,1,...,255]" });
  col.Bound(row => row.RRFgroupGuid).Title("RRFgroupGuid").Hidden(true);
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true);
  if (!inAgentRole) { col.Command(com => { com.Edit();}).Title(""); }
  col.Bound(row => row.ResrepRecordHandle).Title("RecordHandle")
  .HeaderHtmlAttributes(new { title = "Resource RecordHandle" });
  col.Bound(row => row.ResrepEntityName).Title("EntityName")
  .HeaderHtmlAttributes(new { title = "Resource EntityName" });
  col.Bound(row => row.ManagedByAgentName).Title("Managing Agent")
  .HeaderHtmlAttributes(new { title = "Username of Managing Agent" });
  col.Bound(row => row.AccessRequestedForAgentName).Title("Requesting Agent")
  .HeaderHtmlAttributes(new { title = "Username of Requesting Agent" });
  col.Bound(row => row.RequestIsApproved).Title("Approved?")
  .HeaderHtmlAttributes(new { title = "Request is Approved?" });
  col.Bound(row => row.RequestIsDenied).Title("Denied?")
  .HeaderHtmlAttributes(new { title = "Request is Denied?" });
  col.Bound(row => row.AuthorHasResrepAccess).Title("Author?")
  .HeaderHtmlAttributes(new { title = "Author has resrep access" });
  if (inAdminRole) {
    col.Command(com => { com.Destroy(); }).Title("");
    col.Bound(row => row.CreatedOn).Title("CreatedOn").Format(UtcdtFormat)
    .HeaderHtmlAttributes(new { title = "Date that Agent requested or released resource" });
    col.Bound(row => row.CreatedByAgentName).Title("CreatedBy")
    .HeaderHtmlAttributes(new { title = "Username of Creating Agent" });
  } // end if
  col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
  .HeaderHtmlAttributes(new { title = "Date that Editor or Admin approved or denied transfer" });
  col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
  .HeaderHtmlAttributes(new { title = "Username of Updating Agent" });
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .Editable(ed => ed.Mode(GridEditMode.InLine).Enabled(inAdminRole))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Info(true).ButtonCount(3).PageSizes(new[] { 15, 25, 50, 100 }).Refresh(true).Responsive(false))
  .Sortable().Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<partial name="_TkgrScribeNexusToolbarsWrite" />

<partial name="_TkgrScribeNexusWriteJS" />

