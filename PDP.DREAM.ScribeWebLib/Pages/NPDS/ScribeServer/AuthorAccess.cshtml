@*
// PORTAL-DOORS Project Copyright (c) 2007 - 2022 Brain Health Alliance. All Rights Reserved.
// Software license: the OSI approved Apache 2.0 License (https://opensource.org/licenses/Apache-2.0).
//
// Telerik Kendo Grid Page (TKGP acronym or Tkgp prefix/suffix)
*@

@page "/NPDS/ScribeServer/AuthorAccess/{recordAccess?}"
@model ScribeServerAuthorAccess
@{
var psr = (PdpSiteRazorModel)Model.PSR;
var qurc = (QebUserRestContext)Model.QURC;
var hasAnonAccess = qurc.ClientIsAnonymous;
var hasAgentAccess = qurc.ClientHasAgentAccess;
var hasAuthorAccess = qurc.ClientHasAuthorAccess;
var hasEditorAccess = qurc.ClientHasEditorAccess;
var hasAdminAccess = qurc.ClientHasAdminAccess;
var hasScribeEditAccess = qurc.ClientHasScribeEditAccess;
var TkgPath = psr.RazorPagePath;
var TkgToken = PdpAppConst.TkgrdToken;
// column formatting
var UtcdtFormat = PdpAppConst.UtcdtFormat;
var Numf3Format = PdpAppConst.Numf3Format;
var FipmpWidth = "6em"; // width for index priority marked principal (and other int/bool) columns
var FonbyWidth = "11em"; // width for date-on person-by columns
var FcmdbWidth = "21em"; // width for command button columns
}

@Html.Raw(psr.FormatBodyTitle(qurc.RecordAccess.ToString() + " Manage Requests for NPDS Resrep Author"))

<div id="NpdsGrid" data-tkgpath="@TkgPath">
@(Html.Kendo()
.Grid<ResrepAuthorRequestEditModel>()
.Name("ResrepAuthorRequestGrid")
.HtmlAttributes(new { style = "float:left;" })
.DataSource(ds => ds.Ajax().PageSize(15)
.Model(m => {
m.Field(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.ResrepRecordHandle).Editable(false);
m.Field(p => p.ResrepEntityName).Editable(false);
m.Field(p => p.ManagedByAgentName).Editable(false);
m.Field(p => p.AccessRequestedForAgentName).Editable(false);
m.Field(p => p.RequestIsApproved).Editable(hasAdminAccess);
m.Field(p => p.RequestIsDenied).Editable(hasAdminAccess);
m.Field(p => p.AuthorHasResrepAccess).Editable(hasAdminAccess);
m.Field(p => p.CreatedOn).Editable(false);
m.Field(p => p.CreatedByAgentName).Editable(false);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(rr => rr.Url(TkgPath + "?handler=ReadResrepAuthorRequests").Data(TkgToken))
.Create(rr => rr.Url(TkgPath + "?handler=WriteResrepAuthorRequest").Data(TkgToken))
.Update(rr => rr.Url(TkgPath + "?handler=WriteResrepAuthorRequest").Data(TkgToken))
.Destroy(rr => rr.Url(TkgPath + "?handler=DeleteResrepAuthorRequest").Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.HasIndex).Title("Index")
.HeaderHtmlAttributes(new { title = "Request has Index in integer range [0,1,...,255]" });
col.Bound(row => row.RRFgroupGuid).Title("RRFgroupGuid").Hidden(true);
col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true);
if (hasAdminAccess) { col.Command(com => { com.Edit();}).Title(""); }
col.Bound(row => row.ResrepRecordHandle).Title("RecordHandle")
.HeaderHtmlAttributes(new { title = "Resource RecordHandle" });
col.Bound(row => row.ResrepEntityName).Title("EntityName")
.HeaderHtmlAttributes(new { title = "Resource EntityName" });
col.Bound(row => row.ManagedByAgentName).Title("Managing Agent")
.HeaderHtmlAttributes(new { title = "Username of Managing Agent" });
col.Bound(row => row.AccessRequestedForAgentName).Title("Requesting Agent")
.HeaderHtmlAttributes(new { title = "Username of Requesting Agent" });
col.Bound(row => row.RequestIsApproved).Title("Approved?")
.HeaderHtmlAttributes(new { title = "Request is Approved?" });
col.Bound(row => row.RequestIsDenied).Title("Denied?")
.HeaderHtmlAttributes(new { title = "Request is Denied?" });
col.Bound(row => row.AuthorHasResrepAccess).Title("Author?")
.HeaderHtmlAttributes(new { title = "Author has resrep access" });
if (hasAdminAccess) {
col.Command(com => { com.Destroy(); }).Title("");
col.Bound(row => row.CreatedOn).Title("CreatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Date that Agent requested or released resource" });
col.Bound(row => row.CreatedByAgentName).Title("CreatedBy")
.HeaderHtmlAttributes(new { title = "Username of Creating Agent" });
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Date that Editor or Admin approved or denied transfer" });
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
.HeaderHtmlAttributes(new { title = "Username of Updating Agent" });
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasAdminAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.AlwaysVisible(true).Responsive(false).Info(true).Refresh(true)
.Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }))
.Sortable(srt => srt.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
.Filterable().Navigatable().Resizable(rs => rs.Columns(true))
.ToolBar(tlb => tlb.ClientTemplateId("ResrepRecordToolbar"))
// end ResrepRecord
)
</div>

<partial name="_ScribeToolbarsTkgp" />

<partial name="_ScribeJavascriptTkgp" />

