@*
// PORTAL-DOORS Project Copyright (c) 2007 - 2023 Brain Health Alliance. All Rights Reserved.
// Software license: the OSI approved Apache 2.0 License (https://opensource.org/licenses/Apache-2.0).
//
// Telerik Kendo Grid Page (TKGP acronym or Tkgp prefix/suffix)
*@

@page "{recordAccess?}"
@attribute [PdpRazorPageRoute(DepScribeWebLib, DepScribeServerServiceStatus)]
@model ScribeServerServiceStatus
@{
PdpSiteRazorModel psrm = Model.PSRM;
QebiUserRestContext qurc = Model.QURC;
// TODO: refactor access as more convenient method in QebUserRestContext
//   with input parameter for the requested RecordAccess
var hasAnonAccess = qurc.ClientIsAnonymous;
var hasAgentAccess = qurc.ClientHasAgentAccess;
var hasAuthorAccess = qurc.ClientHasAuthorAccess;
var hasEditorAccess = qurc.ClientHasEditorAccess;
var hasAdminAccess = qurc.ClientHasAdminAccess;
var hasScribeEditAccess = qurc.ClientHasScribeEditAccess;
// correct path remains critical for Razor routing
var TkgResrepQrystr = $"&searchFilter={qurc.SearchFilter}&serviceTag={qurc.ServiceTag}&entityType={qurc.EntityType}";
var TkgFgroupQrystr = $"&recordGuid=#=RRRecordGuid#&infosetGuid=#=RRInfosetGuid#&isLimited=#=InfosetIsUpdaterLimited#";
var TkgPath = psrm.RazorPagePath;
var TkgToken = PdpAppConst.TkgrdToken;
// column formatting
var UtcdtFormat = PdpAppConst.UtcdtFormat;
var Numf3Format = PdpAppConst.Numf3Format;
var FipmpWidth = "6em"; // width for index priority marked principal (and other int/bool) columns
var FonbyWidth = "11em"; // width for date-on person-by columns
var FcmdbWidth = "21em"; // width for command button columns
}

@Html.Raw(psrm.FormatBodyTitle())

<div id="NpdsGrid" data-tkgpath="@TkgPath">
@(Html.Kendo()
.Grid<NexusResrepEditModel>()
.Name("ResrepRecordGrid")
.HtmlAttributes(new { style = "float:left;" })
.DataSource(ds => ds.Ajax().PageSize(5)
.Model(m => {
m.Field<Guid?>(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id<Guid?>(p => p.RRRecordGuid);
m.Field(p => p.RecordHandle).Editable(false);
m.Field(p => p.EntityTypeCode).Editable(hasScribeEditAccess).DefaultValue(PdpAppConst.DefaultEntityTypeCode);
m.Field(p => p.EntityTypeName).Editable(false);
m.Field(p => p.EntityName).Editable(hasScribeEditAccess);
m.Field(p => p.EntityNature).Editable(hasScribeEditAccess);
m.Field(p => p.InfosetIsAuthorPrivate).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsAgentShared).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsUpdaterLimited).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsManagerReleased).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(rr => rr.Url(TkgPath + "?handler=ReadResrepRoots" + TkgResrepQrystr).Data(TkgToken))
.Create(rr => rr.Url(TkgPath + "?handler=WriteResrepRoot").Data(TkgToken))
.Update(rr => rr.Url(TkgPath + "?handler=WriteResrepRoot").Data(TkgToken))
.Destroy(rr => rr.Url(TkgPath + "?handler=DeleteResrepRoot").Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
.HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
;
col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
.HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
;
col.Bound(row => row.RecordHandle).Title("Handle")
.HeaderHtmlAttributes(new { title = "Resource Record Handle" });
col.Bound(row => row.EntityTypeCode).Title("Type")
.HeaderHtmlAttributes(new { title = "Resource Entity Type" })
.HtmlAttributes(new { title = "#=EntityTypeCode#" })
.ClientTemplate("#=EntityTypeName#")
.EditorTemplateName("_EntityTypeCode")
.Filterable(false);
col.Bound(row => row.EntityName).Title("Name")
.HeaderHtmlAttributes(new { title = "Resource Entity Name" })
.HtmlAttributes(new { title = "#=EntityName#" })
.ClientTemplate("#=EntityName64#");
col.Bound(row => row.EntityNature).Title("Nature")
.HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
.HtmlAttributes(new { title = "#=EntityNature#" })
.ClientTemplate("#=EntityNature128#");
if (!hasAnonAccess) {
col.Bound(row => row.InfosetIsAuthorPrivate).Title("Private?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is private to author?" })
.Hidden(false).Sortable(false).Filterable(false);
col.Bound(row => row.InfosetIsAgentShared).Title("Shared?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is shared with agents?" })
.Hidden(false).Sortable(false).Filterable(false);
col.Bound(row => row.InfosetIsUpdaterLimited).Title("Limited?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is limited to most recent updater?" })
.Filterable(false);
col.Bound(row => row.InfosetIsManagerReleased).Title("Released?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is released by most recent manager?" })
.Hidden(false).Sortable(false).Filterable(false);
}
if (hasScribeEditAccess) {
col.Command(com => {
com.Edit();
com.Custom("ValidateRecord").Click("OnValidateRecord").Text("Validate")
.HtmlAttributes(new { @class = "scribeValidateRecord", title = "Validate Resource Metadata Record" });
com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
.HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
com.Destroy();
}).Title(""); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
} // end if
}) // end Columns
.ClientDetailTemplateId("ResrepRecordTabStrip")
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Edit("HideStatus").Page("HideStatus")
.DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
.Pageable(pgb => pgb.AlwaysVisible(true).Responsive(false).Info(true).Refresh(true)
.Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }))
.Sortable(srt => srt.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
.Filterable().Navigatable().Resizable(rs => rs.Columns(true))
.ToolBar(tlb => tlb.ClientTemplateId("ResrepRecordToolbar"))
// end ResrepRecord
)
</div>

<partial name="_ScribeToolbarsTkgp" />

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
@(Html.Kendo()
.TabStrip()
.Name("TabStrip#=RRRecordGuid#")
.Items(itm => {

itm.Add().Text("EntityLabels").Content(@<text>
@(Html.Kendo().Grid<EntityLabelEditModel>()
.Name("EntityLabels#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id<Guid?>(p => p.RRFgroupGuid);
m.Field<Guid?>(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(!hasAgentAccess).DefaultValue(0);
m.Field(p => p.IsGenerating).Editable(!hasAgentAccess).DefaultValue(false);
m.Field(p => p.IsMarked).Editable(!hasAgentAccess).DefaultValue(false);
m.Field(p => p.IsResolvable).Editable(!hasAgentAccess).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(!hasAgentAccess).DefaultValue(false);
m.Field(p => p.IsPrivate).Editable(!hasAgentAccess).DefaultValue(false);
m.Field(p => p.ServiceTypeCode).Editable(!hasAgentAccess).DefaultValue(2);
m.Field(p => p.TagToken).Editable(!hasAgentAccess).DefaultValue(string.Empty);
m.Field(p => p.LabelUri).Editable(hasAdminAccess).DefaultValue(string.Empty);
m.Field(p => p.EntityLabel).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.EntityLabelHtml).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadEntityLabels" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteEntityLabel").Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteEntityLabel").Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteEntityLabel").Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Principal (Canonical)?" });
col.Bound(row => row.EntityLabelHtml).Title("EntityLabel").Encoded(false)
.HeaderHtmlAttributes(new { title = "Entity Label derived from LabelUri or from TagToken concatenated with Registry Label" });
col.Bound(row => row.IsResolvable).Title("Resolvable").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Resolvable? (URI is also URL?)" });
col.Bound(row => row.IsPrivate).Title("Private").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Private?" });
if (hasAdminAccess) {
col.Bound(row => row.IsGenerating).Title("GL?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is a Generating URI?" });
col.Bound(row => row.ServiceTypeCode).Title("STC?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has ServiceTypeCode?" });
} // end if
col.Bound(row => row.TagToken).Title("TagToken")
.HeaderHtmlAttributes(new { title = "EntityLabel TagToken" });
if (hasAdminAccess) {
col.Bound(row => row.LabelUri).Title("LabelUri")
.HeaderHtmlAttributes(new { title = "EntityLabel has a non-default Generating URI" });
} // end if
if (!hasAgentAccess) {
col.Command(com => {
com.Edit();
com.Custom("CheckEntityLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "EntityLabel" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(!hasAgentAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.ToolBar(tlb => tlb.ClientTemplateId("EntityLabelToolbar"))
.ToClientTemplate()) </text>);  // end EntityLabel

itm.Add().Text("Services").Content(@<text>
@(Html.Kendo()
.Grid<ServiceDefaultEditModel>()
.Name("ServiceDefaults#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Field<Guid?>(p => p.RRInfosetGuid).Editable(false).DefaultValue("#=RRInfosetGuid#");
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue("#=RRRecordGuid#");
m.Field<Guid?>(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id<Guid?>(p => p.RRFgroupGuid);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.RecordDiristryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordDiristryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordRegistryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordRegistryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordDirectoryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordDirectoryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordRegistrarGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordRegistrarName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadServiceDefaults" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRInfosetGuid).Hidden(true).Title("RRInfosetGuid")
.HtmlAttributes(new { title = "&infosetGuid=\\#=RRInfosetGuid\\#" })
.HeaderHtmlAttributes(new { title = "ResRepInfosetGuid for the resource representation" });
col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid")
.HtmlAttributes(new { title = "&recordGuid=\\#=RRRecordGuid\\#" })
.HeaderHtmlAttributes(new { title = "ResRepRecordGuid for the resource representation" });
col.Bound(row => row.RRFgroupGuid).Hidden(true).Title("RRFgroupGuid")
.HtmlAttributes(new { title = "&fgroupGuid=\\#=RRFgroupGuid\\#" })
.HeaderHtmlAttributes(new { title = "RRFgroupGuid for the infosubset fgroup" });
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault has Index in integer range [0,1,...,255]" })
;
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault is Principal?" });
col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
.HeaderHtmlAttributes(new { title = "Nexus Diristry" })
.HtmlAttributes(new { title = "\\#=RecordDiristryGuid\\#" })
.EditorTemplateName("_RecordDiristryGuid")
.ClientTemplate("\\#=RecordDiristryName\\#");
col.Bound(row => row.RecordRegistryGuid).Title("Registry")
.HeaderHtmlAttributes(new { title = "PORTAL Registry" })
.HtmlAttributes(new { title = "\\#=RecordRegistryGuid\\#" })
.EditorTemplateName("_RecordRegistryGuid")
.ClientTemplate("\\#=RecordRegistryName\\#");
col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
.HeaderHtmlAttributes(new { title = "DOORS Directory" })
.HtmlAttributes(new { title = "\\#=RecordDirectoryGuid\\#" })
.EditorTemplateName("_RecordDirectoryGuid")
.ClientTemplate("\\#=RecordDirectoryName\\#");
col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
.HeaderHtmlAttributes(new { title = "Scribe Registrar" })
.HtmlAttributes(new { title = "\\#=RecordRegistrarGuid\\#" })
.EditorTemplateName("_RecordRegistrarGuid")
.ClientTemplate("\\#=RecordRegistrarName\\#");
if (hasAdminAccess) {
col.Command(com => {
com.Edit();
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasScribeEditAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.ToolBar(tlb => tlb.ClientTemplateId("ServiceDefaultToolbar"))
.ToClientTemplate()) </text>); // end ServiceDefault

itm.Add().Text("Status").LoadContentFrom(Url.Content(TkgPath + "?handler=CheckResrepLeaf" + TkgFgroupQrystr));

}).SelectedIndex(0).ToClientTemplate()
)
</script>

<partial name="_ScribeJavascriptTkgp" />
