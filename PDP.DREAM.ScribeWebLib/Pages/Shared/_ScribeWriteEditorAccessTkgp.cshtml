@*
// PORTAL-DOORS Project Copyright (c) 2007 - 2023 Brain Health Alliance. All Rights Reserved.
// Software license: the OSI approved Apache 2.0 License (https://opensource.org/licenses/Apache-2.0).
//
// Telerik Kendo Grid Page (TKGP acronym or Tkgp prefix/suffix)
// var TkgPath in HTML tag <div id="NpdsGrid" data-tkgpath="@TkgPath">
*@

@{
PdpSiteRazorModel psrm = Model.PSRM;
QebiUserRestContext qurc = Model.QURC;
var hasEditorOrAdminAccess = qurc.ClientHasEditorOrAdminAccess;
var TkgPath = psrm.RazorPagePath;
var TkgToken = PdpAppConst.TkgrdToken;
// column formatting
var UtcdtFormat = PdpAppConst.UtcdtFormat;
var Numf3Format = PdpAppConst.Numf3Format;
var FipmpWidth = "6em"; // width for index priority marked principal (and other int/bool) columns
var FonbyWidth = "11em"; // width for date-on person-by columns
var FcmdbWidth = "21em"; // width for command button columns
}
@if (!string.IsNullOrEmpty(psrm.RazorBodyMenu))
{
  <p><partial name="@psrm.RazorBodyMenu" /></p>
}
@Html.Raw(psrm.FormatBodyTitle(qurc.RecordAccess.ToString() + " Manage Requests for NPDS Service Editor"))


<div id="NpdsGrid" data-tkgpath="@TkgPath">
@(
Html.Kendo()
.Grid<ServiceEditorRequestEditModel>()
.Name("ResrepRecordGrid")
.HtmlAttributes(new { style = "float:left;" })
.DataSource(ds => ds.Ajax().PageSize(15)
.Model(m => {
m.Id<Guid?>(p => p.RRFgroupGuid);
m.Field<Guid?>(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field<Guid?>(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.ResrepRecordHandle).Editable(false);
m.Field(p => p.ResrepEntityName).Editable(false);
m.Field(p => p.ManagedByAgentName).Editable(false);
m.Field(p => p.AccessRequestedForAgentName).Editable(false);
m.Field(p => p.RequestIsApproved).Editable(hasEditorOrAdminAccess);
m.Field(p => p.RequestIsDenied).Editable(hasEditorOrAdminAccess);
m.Field(p => p.EditorHasServiceAccess).Editable(hasEditorOrAdminAccess);
m.Field(p => p.CreatedOn).Editable(false);
m.Field(p => p.CreatedByAgentName).Editable(false);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(rr => rr.Url(TkgPath + "?handler=ReadServiceEditorRequests").Data(TkgToken))
.Create(rr => rr.Url(TkgPath + "?handler=WriteServiceEditorRequest").Data(TkgToken))
.Update(rr => rr.Url(TkgPath + "?handler=WriteServiceEditorRequest").Data(TkgToken))
.Destroy(rr => rr.Url(TkgPath + "?handler=DeleteServiceEditorRequest").Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.HasIndex).Title("Index")
.HeaderHtmlAttributes(new { title = "Request has Index in integer range [0,1,...,255]" });
col.Bound(row => row.RRFgroupGuid).Title("RRFgroupGuid").Hidden(true);
col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true);
if (hasEditorOrAdminAccess) { col.Command(com => { com.Edit(); }).Title(""); }
col.Bound(row => row.RRInfosetGuid).Title("Diristry")
.HeaderHtmlAttributes(new { title = "Nexus Diristry" })
.HtmlAttributes(new { title = "#=RRInfosetGuid#" })
.ClientTemplate("#=ResrepEntityName#")
.EditorTemplateName("_RecordDiristryGuid");
col.Bound(row => row.ManagedByAgentName).Title("Managing Agent")
.HeaderHtmlAttributes(new { title = "Username of Managing Agent" });
col.Bound(row => row.AccessRequestedForAgentName).Title("Requesting Agent")
.HeaderHtmlAttributes(new { title = "Username of Requesting Agent" });
col.Bound(row => row.RequestIsApproved).Title("Approved?")
.HeaderHtmlAttributes(new { title = "Request is Approved?" });
col.Bound(row => row.RequestIsDenied).Title("Denied?")
.HeaderHtmlAttributes(new { title = "Request is Denied?" });
col.Bound(row => row.EditorHasServiceAccess).Title("Editor?")
.HeaderHtmlAttributes(new { title = "Editor has service access" });
if (hasEditorOrAdminAccess) {
col.Command(com => { com.Destroy(); }).Title("");
col.Bound(row => row.CreatedOn).Title("CreatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Date that Agent requested or released resource" });
col.Bound(row => row.CreatedByAgentName).Title("CreatedBy")
.HeaderHtmlAttributes(new { title = "Username of Creating Agent" });
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Date that Editor or Admin approved or denied transfer" });
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
.HeaderHtmlAttributes(new { title = "Username of Updating Agent" });
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasEditorOrAdminAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.AlwaysVisible(true).Responsive(false).Info(true).Refresh(true)
.Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }))
.Sortable(srt => srt.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
.Filterable().Navigatable().Resizable(rs => rs.Columns(true))
.ToolBar(tlb => tlb.ClientTemplateId("ResrepRecordToolbar"))
// end ResrepRecord
)
</div>

<partial name="_ScribeToolbarsTkgp" />

<partial name="_ScribeJavascriptTkgp" />

