@*
// PORTAL-DOORS Project Copyright (c) 2007 - 2023 Brain Health Alliance. All Rights Reserved.
// Software license: the OSI approved Apache 2.0 License (https://opensource.org/licenses/Apache-2.0).
//
// Telerik Kendo Grid Page (TKGP acronym or Tkgp prefix/suffix)
// var TkgPath in HTML tag <div id="NpdsGrid" data-tkgpath="@TkgPath">
*@

@{
PdpSiteRazorModel psrm = Model.PSRM;
QebiUserRestContext qurc = Model.QURC;
var hasAnonAccess = qurc.ClientIsAnonymous;
var hasAgentAccess = qurc.ClientHasAgentAccess;
var hasAuthorAccess = qurc.ClientHasAuthorAccess;
var hasEditorAccess = qurc.ClientHasEditorAccess;
var hasAdminAccess = qurc.ClientHasAdminAccess;
var hasScribeEditAccess = qurc.ClientHasScribeEditAccess;
var diristryGuid = qurc.DiristryGuid;
var registryGuid = qurc.RegistryGuid;
var directoryGuid = qurc.DirectoryGuid;
var registrarGuid = qurc.RegistrarGuid;
// correct path remains critical for Razor routing for WebApp pages
// paths for RestApi services may be different from paths for WebApp pages
// TODO: reconcile and re-align paths for both WebApp pages and RestApi services when possible
var TkgResrepParstr = $"/{qurc.SearchFilter}/{qurc.ServiceTag}/{qurc.EntityType}";
var TkgFgroupQrystr = $"&recordGuid=#=RRRecordGuid#&isLimited=#=InfosetIsUpdaterLimited#";
var TkgPath = psrm.RazorPagePath + TkgResrepParstr;
var TkgToken = PdpAppConst.TkgrdToken;
// column formatting
var UtcdtFormat = PdpAppConst.UtcdtFormat;
var Numf3Format = PdpAppConst.Numf3Format;
var FipmpWidth = "6em"; // width for index priority marked principal (and other int/bool) columns
var FonbyWidth = "11em"; // width for date-on person-by columns
var FcmdbWidth = "21em"; // width for command button columns
}
@if (!string.IsNullOrEmpty(psrm.RazorBodyMenu))
{
  <p><partial name="@psrm.RazorBodyMenu" /></p>
}
@Html.Raw(psrm.FormatBodyTitle())

<div id="NpdsGrid" data-tkgpath="@TkgPath">
@(
Html.Kendo()
.Grid<NexusResrepEditModel>()
.Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
.DataSource(ds => ds.Ajax().PageSize(5)
.Model(m => {
m.Id<Guid?>(p => p.RRRecordGuid);
m.Field<Guid?>(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RecordHandle).Editable(false);
m.Field<Guid?>(p => p.RecordDiristryGuid).Editable(false).DefaultValue(diristryGuid);
m.Field<Guid?>(p => p.RecordRegistryGuid).Editable(false).DefaultValue(registryGuid);
m.Field<Guid?>(p => p.RecordDirectoryGuid).Editable(false).DefaultValue(directoryGuid);
m.Field<Guid?>(p => p.RecordRegistrarGuid).Editable(false).DefaultValue(registrarGuid);
m.Field(p => p.EntityTypeCode).Editable(hasScribeEditAccess).DefaultValue(PdpAppConst.DefaultEntityTypeCode);
m.Field(p => p.EntityTypeName).Editable(false);
m.Field(p => p.EntityName).Editable(hasScribeEditAccess);
m.Field(p => p.EntityNature).Editable(hasScribeEditAccess);
m.Field(p => p.InfosetIsAuthorPrivate).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsAgentShared).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsUpdaterLimited).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.InfosetIsManagerReleased).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(rr => rr.Url(TkgPath + "?handler=ReadResrepRoots").Data(TkgToken))
.Create(rr => rr.Url(TkgPath + "?handler=WriteResrepRoot").Data(TkgToken))
.Update(rr => rr.Url(TkgPath + "?handler=WriteResrepRoot").Data(TkgToken))
.Destroy(rr => rr.Url(TkgPath + "?handler=DeleteResrepRoot").Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
.HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
;
col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
.HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
;
col.Bound(row => row.RecordHandle).Title("Handle")
.HeaderHtmlAttributes(new { title = "Resource RecordHandle" });
if (hasAgentAccess) {
col.Bound(row => row.RRRecordGuid).Title("Authorship")
.HeaderHtmlAttributes(new { title = "Request Authorship for resource metadata record from current Author; requests may be mediated by the Editor or Admin." })
.ClientTemplate("<span id='ReqRel#=RecordHandle#'> #=AgentRequestHtml# </span>")
.Filterable(false).Sortable(false);
} // end if
col.Bound(row => row.EntityTypeCode).Title("Type")
.HeaderHtmlAttributes(new { title = "Resource Entity Type" })
.HtmlAttributes(new { title = "#=EntityTypeCode#" })
.ClientTemplate("#=EntityTypeName#")
.EditorTemplateName("_EntityTypeCode")
.Filterable(false);
col.Bound(row => row.EntityName).Title("Name")
.HeaderHtmlAttributes(new { title = "Resource Entity Name" })
.ClientTemplate("#=EntityName64#");
col.Bound(row => row.EntityNature).Title("Nature")
.HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
.ClientTemplate("#=EntityNature128#");
if (!hasAnonAccess) {
col.Bound(row => row.InfosetIsAuthorPrivate).Title("Private?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is private to author?" })
.Hidden(false).Sortable(false).Filterable(false);
col.Bound(row => row.InfosetIsAgentShared).Title("Shared?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is shared with agents?" })
.Hidden(false).Sortable(false).Filterable(false);
col.Bound(row => row.InfosetIsUpdaterLimited).Title("Limited?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is limited to most recent updater?" })
.Filterable(false);
col.Bound(row => row.InfosetIsManagerReleased).Title("Released?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Resource infoset read-write is released by most recent manager?" })
.Hidden(false).Sortable(false).Filterable(false);
}
if (hasScribeEditAccess) {
col.Command(com => {
com.Edit();
com.Custom("ValidateRecord").Click("OnValidateRecord").Text("Validate")
.HtmlAttributes(new { @class = "scribeValidateRecord", title = "Validate Resource Metadata Record" });
com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
.HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
com.Destroy();
}).Title(""); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
} // end if
}) // end Columns
.ClientDetailTemplateId("ResrepRecordTabStrip")
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Edit("HideStatus").Page("HideStatus")
.DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
.Pageable(pgb => pgb.AlwaysVisible(true).Responsive(false).Info(true).Refresh(true)
.Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }))
.Sortable(srt => srt.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
.Filterable().Navigatable().Resizable(rs => rs.Columns(true))
.ToolBar(tlb => tlb.ClientTemplateId("ResrepRecordToolbar"))
// end ResrepRecord
)
</div>

<partial name="_ScribeToolbarsTkgp" />

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
@(Html.Kendo()
.TabStrip()
.Name("TabStrip#=RRRecordGuid#")
.Items(itm => {

itm.Add().Text("EntityLabels").Content(@<text>
@(Html.Kendo().Grid<EntityLabelEditModel>()
.Name("EntityLabels#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id<Guid?>(p => p.RRFgroupGuid);
m.Field<Guid?>(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(hasScribeEditAccess).DefaultValue(0);
m.Field(p => p.IsGenerating).Editable(hasAdminAccess).DefaultValue(false);
m.Field(p => p.IsMarked).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.IsResolvable).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.IsPrivate).Editable(hasScribeEditAccess).DefaultValue(false);
m.Field(p => p.ServiceTypeCode).Editable(hasAdminAccess).DefaultValue(2);
m.Field(p => p.TagToken).Editable(hasScribeEditAccess).DefaultValue(string.Empty);
m.Field(p => p.LabelUri).Editable(hasAdminAccess).DefaultValue(string.Empty);
m.Field(p => p.EntityLabel).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.EntityLabelHtml).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadEntityLabels" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteEntityLabel" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteEntityLabel" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteEntityLabel" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Principal (Canonical)?" });
col.Bound(row => row.EntityLabelHtml).Title("EntityLabel").Encoded(false)
.HeaderHtmlAttributes(new { title = "Entity Label derived from LabelUri or from TagToken concatenated with Registry Label" });
if (!hasAnonAccess){
col.Bound(row => row.IsResolvable).Title("Resolvable").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Resolvable? (URI is also URL?)" });
col.Bound(row => row.IsPrivate).Title("Private").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is Private?" });
}
if (hasAdminAccess) {
col.Bound(row => row.IsGenerating).Title("GL?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel is a Generating URI?" });
col.Bound(row => row.ServiceTypeCode).Title("STC?").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "EntityLabel has ServiceTypeCode?" });
} // end if
col.Bound(row => row.TagToken).Title("TagToken")
.HeaderHtmlAttributes(new { title = "EntityLabel TagToken" });
if (hasAdminAccess) {
col.Bound(row => row.LabelUri).Title("LabelUri")
.HeaderHtmlAttributes(new { title = "EntityLabel has a non-default Generating URI" });
} // end if
if (hasScribeEditAccess) {
col.Command(com => {
com.Edit();
com.Custom("CheckEntityLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "EntityLabel" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasScribeEditAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("EntityLabelToolbar"))
.ToClientTemplate()) </text>);
// end EntityLabel

itm.Add().Text("SupportingTags").Content(@<text>
@(Html.Kendo().Grid<SupportingTagEditModel>()
.Name("SupportingTags#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.SupportingTag).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadSupportingTags" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteSupportingTag" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteSupportingTag" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteSupportingTag" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingTag has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingTag has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingTag is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingTag is Principal?" });
col.Bound(row => row.SupportingTag).Title("SupportingTag");
col.Command(com => {
com.Edit();
com.Custom("CheckSupportingTag").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "SupportingTag" });
com.Custom("ReseqSupportingTag").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "SupportingTag" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("SupportingTagToolbar"))
.ToClientTemplate()) </text>);
// end SupportingTag

itm.Add().Text("SupportingLabels").Content(@<text>
@(Html.Kendo().Grid<SupportingLabelEditModel>()
.Name("SupportingLabels#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.SupportingLabel).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadSupportingLabels" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteSupportingLabel" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteSupportingLabel" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteSupportingLabel" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingLabel has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingLabel has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingLabel is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "SupportingLabel is Principal?" });
col.Bound(row => row.SupportingLabel).Title("SupportingLabel").Encoded(false);
col.Command(com => {
com.Edit();
com.Custom("CheckSupportingLabel").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "SupportingLabel" });
com.Custom("ReseqSupportingLabel").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "SupportingLabel" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.ToolBar(tlb => tlb.ClientTemplateId("SupportingLabelToolbar"))
.ToClientTemplate()) </text>);
// end SupportingLabel

itm.Add().Text("CrossReferences").Content(@<text>
@(Html.Kendo().Grid<CrossReferenceEditModel>()
.Name("CrossReferences#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.CrossReference).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadCrossReferences" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteCrossReference" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteCrossReference" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteCrossReference" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // Datasource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "CrossReference has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "CrossReference has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "CrossReference is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "CrossReference is Principal?" });
col.Bound(row => row.CrossReference).Title("CrossReference").Encoded(false);
col.Command(com => {
com.Edit();
com.Custom("CheckCrossReference").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "CrossReference" });
com.Custom("ReseqCrossReference").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "CrossReference" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("CrossReferenceToolbar"))
.ToClientTemplate()) </text>);
// end CrossReference

itm.Add().Text("OtherTexts").Content(@<text>
@(Html.Kendo().Grid<OtherTextEditModel>()
.Name("OtherTexts#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.FieldFormatCode).Editable(true).DefaultValue((short)PdpAppConst.NpdsFieldFormat.FreeForm);
m.Field(p => p.OtherText).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadOtherTexts" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteOtherText" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteOtherText" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteOtherText" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "OtherText has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "OtherText has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "OtherText is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "OtherText is Principal?" });
col.Bound(row => row.FieldFormatCode).Title("Format").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "OtherText Format" })
.EditorTemplateName("_FieldFormatCode")
.ClientTemplate("\\#=FieldFormatName\\#");
col.Bound(row => row.OtherText).Title("OtherText")
.HeaderHtmlAttributes(new { title = "OtherText Content" })
.EditorTemplateName("_TextAreaBox")
.ClientTemplate("\\#=OtherText128\\#");
col.Command(com =>
{
com.Edit();
com.Custom("CheckOtherText").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "OtherText" });
com.Custom("ReseqOtherText").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "OtherText" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("OtherTextToolbar"))
.ToClientTemplate()) </text>);
// end OtherText

itm.Add().Text("Locations").Content(@<text>
@(Html.Kendo().Grid<LocationEditModel>()
.Name("Locations#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.FieldFormatCode).Editable(true).DefaultValue((short)PdpAppConst.NpdsFieldFormat.FreeForm);
m.Field(p => p.Location).Editable(false).DefaultValue(String.Empty);
m.Field(p => p.Telephone).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.EmailAddress).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.UrlWebAddress).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.StreetAddress).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.CityLocality).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.StateRegion).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.Country).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.PostalCode).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.GeocodeType).Editable(false).DefaultValue(String.Empty);
m.Field(p => p.GeocodeConfidence).Editable(false).DefaultValue(String.Empty);
m.Field(p => p.FormattedAddress).Editable(false).DefaultValue(String.Empty);
m.Field(p => p.Latitude).Editable(false).DefaultValue(0);
m.Field(p => p.Longitude).Editable(false).DefaultValue(0);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadLocations" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteLocation" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteLocation" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteLocation" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Location has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Location has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Location is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Location is Principal?" });
col.Bound(row => row.Telephone).Title("Phone Number");
col.Bound(row => row.EmailAddress).Title("Email Address");
col.Bound(row => row.UrlWebAddress).Title("Web Address")
.ClientTemplate("\\#=UrlWebAddressHtml\\#");
col.Bound(row => row.StreetAddress).Title("Street Address");
col.Bound(row => row.CityLocality).Title("City / Locality");
col.Bound(row => row.StateRegion).Title("State / Region");
col.Bound(row => row.Country).Title("Country");
col.Bound(row => row.PostalCode).Title("Postal Code");
col.Command(com =>
{
com.Edit();
com.Custom("CheckLocation").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Location" });
com.Custom("ReseqLocation").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "Location" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("LocationToolbar"))
.ToClientTemplate()) </text>);
// end Location

itm.Add().Text("Descriptions").Content(@<text>
@(Html.Kendo().Grid<DescriptionEditModel>()
.Name("Descriptions#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.FieldFormatCode).Editable(true).DefaultValue((short)PdpAppConst.NpdsFieldFormat.FreeForm);
m.Field(p => p.Description).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.Description128).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadDescriptions" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteDescription" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteDescription" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteDescription" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Description has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Description has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Description is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Description is Principal?" });
col.Bound(row => row.FieldFormatCode).Title("Format").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Description Format" })
.EditorTemplateName("_FieldFormatCode")
.ClientTemplate("\\#=FieldFormatName\\#");
col.Bound(row => row.Description).Title("Description")
.HeaderHtmlAttributes(new { title = "Description Content" })
.EditorTemplateName("_TextAreaBox")
.ClientTemplate("\\#=Description128\\#");
col.Command(com =>
{
com.Edit();
com.Custom("CheckDescription").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Description" });
com.Custom("ReseqDescription").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "Description" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new {title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("DescriptionToolbar"))
.ToClientTemplate()) </text>);
// end Description

itm.Add().Text("Provenances").Content(@<text>
@(Html.Kendo().Grid<ProvenanceEditModel>()
.Name("Provenances#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.FieldFormatCode).Editable(true).DefaultValue((short)PdpAppConst.NpdsFieldFormat.FreeForm);
m.Field(p => p.Provenance).Editable(true).DefaultValue(String.Empty);
m.Field(p => p.Provenance128).Editable(false).DefaultValue(String.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadProvenances" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteProvenance" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteProvenance" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteProvenance" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Provenance has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Provenance has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Provenance is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Provenance is Principal?" });
col.Bound(row => row.FieldFormatCode).Title("Format").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Provenance Format" })
.EditorTemplateName("_FieldFormatCode")
.ClientTemplate("\\#=FieldFormatName\\#");
col.Bound(row => row.Provenance).Title("Provenance")
.HeaderHtmlAttributes(new { title = "Provenance Content" })
.EditorTemplateName("_TextAreaBox")
.ClientTemplate("\\#=Provenance128\\#");
col.Command(com =>
{
com.Edit();
com.Custom("CheckProvenance").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Provenance" });
com.Custom("ReseqProvenance").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "Provenance" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new {title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("ProvenanceToolbar"))
.ToClientTemplate()) </text>);
// end Provenance

itm.Add().Text("Distributions").Content(@<text>
@(Html.Kendo().Grid<DistributionEditModel>()
.Name("Distributions#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.FieldFormatCode).Editable(true).DefaultValue((short)PdpAppConst.NpdsFieldFormat.FreeForm);
m.Field(p => p.Distribution).Editable(true).DefaultValue(string.Empty);
m.Field(p => p.Distribution128).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadDistributions" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteDistribution" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteDistribution" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteDistribution" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Distribution has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Distribution has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Distribution is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Distribution is Principal?" });
col.Bound(row => row.FieldFormatCode).Title("Format").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "Distribution Format" })
.EditorTemplateName("_FieldFormatCode")
.ClientTemplate("\\#=FieldFormatName\\#");
col.Bound(row => row.Distribution).Title("Distribution")
.HeaderHtmlAttributes(new { title = "Distribution Content" })
.EditorTemplateName("_TextAreaBox")
.ClientTemplate("\\#=Distribution128\\#");
col.Command(com =>
{
com.Edit();
com.Custom("CheckDistribution").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "Distribution" });
com.Custom("ReseqDistribution").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "Distribution" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("DistributionToolbar"))
.ToClientTemplate()) </text>);
// end Distribution

itm.Add().Text("FairMetrics").Content(@<text>
@(Html.Kendo().Grid<FairMetricEditModel>()
.Name("FairMetrics#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.MInvalidOldClaim).Editable(true).DefaultValue(0);
m.Field(p => p.QValidOldClaim).Editable(true).DefaultValue(0);
m.Field(p => p.PInvalidNewClaim).Editable(true).DefaultValue(0);
m.Field(p => p.NValidNewClaim).Editable(true).DefaultValue(0);
m.Field(p => p.FAIR1).Editable(false).DefaultValue(0);
m.Field(p => p.FAIR2).Editable(false).DefaultValue(0);
m.Field(p => p.FAIR3).Editable(false).DefaultValue(0);
m.Field(p => p.FAIR4).Editable(false).DefaultValue(0);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadFairMetrics" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteFairMetric" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteFairMetric" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteFairMetric" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "FairMetric has Index in integer range [0,1,...,255]" });
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "FairMetric has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "FairMetric is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "FairMetric is Principal?" });
col.Bound(row => row.MInvalidOldClaim).Title("M")
.HeaderHtmlAttributes(new { title = "Invalid Old Claims M = Misquoted" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.QValidOldClaim).Title("Q")
.HeaderHtmlAttributes(new { title = "Valid Old Claims Q = Quoted" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.PInvalidNewClaim).Title("P")
.HeaderHtmlAttributes(new { title = "Invalid New Claims P = Plagiarized" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.NValidNewClaim).Title("N")
.HeaderHtmlAttributes(new { title = "Valid New Claims N = Novel" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.FAIR1).Title("F1").Format(Numf3Format)
.HeaderHtmlAttributes(new { title = "FAIR 1 Metric" });
col.Bound(row => row.FAIR2).Title("F2").Format(Numf3Format)
.HeaderHtmlAttributes(new { title = "FAIR 2 Metric" });
col.Bound(row => row.FAIR3).Title("F3").Format(Numf3Format)
.HeaderHtmlAttributes(new { title = "FAIR 3 Metric" });
col.Bound(row => row.FAIR4).Title("F4").Format(Numf3Format)
.HeaderHtmlAttributes(new { title = "FAIR 4 Metric" });
col.Command(com =>
{
com.Edit();
com.Custom("CheckFairMetric").Click("OnCheckInfosubset").Text("Check").HtmlAttributes(new { title = "FairMetric" });
com.Custom("ReseqFairMetric").Click("OnReseqInfosubset").Text("Reseq").HtmlAttributes(new { title = "FairMetric" });
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date"});
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy")
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.Editable(edt => edt.Mode(GridEditMode.InLine))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.ToolBar(tlb => tlb.ClientTemplateId("FairMetricToolbar"))
.ToClientTemplate()) </text>);
// end FairMetric

itm.Add().Text("Services").Content(@<text>
@(Html.Kendo()
.Grid<ServiceDefaultEditModel>()
.Name("ServiceDefaults#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Field<Guid?>(p => p.RRInfosetGuid).Editable(false).DefaultValue("#=RRInfosetGuid#");
m.Field<Guid?>(p => p.RRRecordGuid).Editable(false).DefaultValue("#=RRRecordGuid#");
m.Field<Guid?>(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id<Guid?>(p => p.RRFgroupGuid);
m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
m.Field(p => p.RecordDiristryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordDiristryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordRegistryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordRegistryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordDirectoryGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordDirectoryName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.RecordRegistrarGuid).Editable(true).DefaultValue(Guid.Empty);
m.Field(p => p.RecordRegistrarName).Editable(false).DefaultValue(string.Empty);
m.Field(p => p.UpdatedOn).Editable(false);
m.Field(p => p.UpdatedByAgentName).Editable(false);
m.Field(p => p.DeletedOn).Editable(false);
m.Field(p => p.DeletedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadServiceDefaults" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteServiceDefault" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRInfosetGuid).Hidden(true).Title("RRInfosetGuid")
.HtmlAttributes(new { title = "&infosetGuid=\\#=RRInfosetGuid\\#" })
.HeaderHtmlAttributes(new { title = "ResRepInfosetGuid for the resource representation" });
col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid")
.HtmlAttributes(new { title = "&recordGuid=\\#=RRRecordGuid\\#" })
.HeaderHtmlAttributes(new { title = "ResRepRecordGuid for the resource representation" });
col.Bound(row => row.RRFgroupGuid).Hidden(true).Title("RRFgroupGuid")
.HtmlAttributes(new { title = "&fgroupGuid=\\#=RRFgroupGuid\\#" })
.HeaderHtmlAttributes(new { title = "RRFgroupGuid for the infosubset fgroup" });
col.Bound(row => row.HasIndex).Title("Index").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault has Index in integer range [0,1,...,255]" })
;
col.Bound(row => row.HasPriority).Title("Priority").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault has Priority in integer range [0,1,...,255]" })
.EditorTemplateName("_PriorityInteger");
col.Bound(row => row.IsMarked).Title("Marked").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault is Marked?" });
col.Bound(row => row.IsPrincipal).Title("Principal").Width(FipmpWidth)
.HeaderHtmlAttributes(new { title = "ServiceDefault is Principal?" });
col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
.HeaderHtmlAttributes(new { title = "Nexus Diristry" })
.HtmlAttributes(new { title = "\\#=RecordDiristryGuid\\#" })
.EditorTemplateName("_RecordDiristryGuid")
.ClientTemplate("\\#=RecordDiristryName\\#");
col.Bound(row => row.RecordRegistryGuid).Title("Registry")
.HeaderHtmlAttributes(new { title = "PORTAL Registry" })
.HtmlAttributes(new { title = "\\#=RecordRegistryGuid\\#" })
.EditorTemplateName("_RecordRegistryGuid")
.ClientTemplate("\\#=RecordRegistryName\\#");
col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
.HeaderHtmlAttributes(new { title = "DOORS Directory" })
.HtmlAttributes(new { title = "\\#=RecordDirectoryGuid\\#" })
.EditorTemplateName("_RecordDirectoryGuid")
.ClientTemplate("\\#=RecordDirectoryName\\#");
col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
.HeaderHtmlAttributes(new { title = "Scribe Registrar" })
.HtmlAttributes(new { title = "\\#=RecordRegistrarGuid\\#" })
.EditorTemplateName("_RecordRegistrarGuid")
.ClientTemplate("\\#=RecordRegistrarName\\#");
if (hasAdminAccess) {
col.Command(com => {
com.Edit();
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasScribeEditAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.ToolBar(tlb => tlb.ClientTemplateId("ServiceDefaultToolbar"))
.ToClientTemplate()) </text>);
// end ServiceDefault

itm.Add().Text("Snapshots").Content(@<text>
@(Html.Kendo().Grid<NexusSnapshotEditModel>()
.Name("Snapshots#=RRRecordGuid#")
.DataSource(ds => ds.Ajax()
.Model(m => {
m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
m.Id(p => p.RRFgroupGuid);
m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
m.Field(p => p.NexusSnapshot).Editable(false);
m.Field(p => p.CreatedOn).Editable(false);
m.Field(p => p.CreatedByAgentName).Editable(false);
}) // end Model
.Read(fg => fg.Url(TkgPath + "?handler=ReadSnapshots" + TkgFgroupQrystr).Data(TkgToken))
.Create(fg => fg.Url(TkgPath + "?handler=WriteSnapshot" + TkgFgroupQrystr).Data(TkgToken))
.Update(fg => fg.Url(TkgPath + "?handler=WriteSnapshot" + TkgFgroupQrystr).Data(TkgToken))
.Destroy(fg => fg.Url(TkgPath + "?handler=DeleteSnapshot" + TkgFgroupQrystr).Data(TkgToken))
.Events(evn => evn.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
) // end DataSource
.Columns(col => {
col.Bound(row => row.RRRecordGuid).Hidden(true);
col.Bound(row => row.RRFgroupGuid).Hidden(true);
col.Bound(row => row.NexusSnapshot).Title("Snapshot");
col.Bound(row => row.CreatedOn).Title("ArchivedOn").Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Archived on date" });
if (!hasAnonAccess) {
col.Bound(row => row.CreatedByAgentName).Title("ArchivedBy")
.HeaderHtmlAttributes(new { title = "Archived by agent" });
} // end if
if (hasAdminAccess) {
col.Command(com => {
com.Edit();
com.Destroy();
}).Title("").Width(FcmdbWidth); // end Command
} // end if
col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Updated on date" });
if (!hasAnonAccess) {
col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Updated by agent" });
} // end if
if (hasAdminAccess) {
col.Bound(row => row.DeletedOn).Title("DeletedOn").Width(FonbyWidth).Format(UtcdtFormat)
.HeaderHtmlAttributes(new { title = "Deleted on date" });
col.Bound(row => row.DeletedByAgentName).Title("DeletedBy").Width(FonbyWidth)
.HeaderHtmlAttributes(new { title = "Deleted by agent" });
} // end if
}) // end Columns
.Editable(edt => edt.Mode(GridEditMode.InLine).Enabled(hasScribeEditAccess))
.Events(evn => evn.Page("HideStatus").Edit("HideStatus"))
.Pageable(pgb => pgb.Refresh(true)).Sortable()
.ToolBar(tlb => tlb.ClientTemplateId("SnapshotToolbar"))
.ToClientTemplate()) </text>);
// end Snapshot

itm.Add().Text("Status")
.LoadContentFrom(Url.Content(TkgPath + "?handler=CheckResrepLeaf" + TkgFgroupQrystr));

}).SelectedIndex(0).ToClientTemplate()
)
</script>

<partial name="_ScribeJavascriptTkgp" />
