@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Routing
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.ApplicationModels
@using Microsoft.AspNetCore.Mvc.Controllers;
@inject IHttpContextAccessor HttpContextAccessor
@inject EndpointDataSource epDataSource

@{
  // var repList = epDataSource.Endpoints.Select(p => (p as RouteEndpoint)).OrderBy(p => p.Order).ToList();
  var repList = epDataSource.Endpoints.Cast<RouteEndpoint>().OrderBy(p => p.Order).ToList();
  var prc = ViewBag.PRC; Layout = prc.PageLayout;
}

@Html.Raw(prc.FormatPageTitle("PDP/NpdsTestLib/Routes"))


<h4>PDP Current Endpoint</h4>
<ul>
  <li>RequestUrl: @Context.Request.GetDisplayUrl()</li>
  <li>Endpoint: @Context.GetEndpoint().DisplayName</li>
  <li>RouteDataValues: @string.Join(',', Context.GetRouteData().Values.Select(p => p.ToString()))</li>
  <li>QueryString: @Context.Request.QueryString</li>
</ul>

<h4>PDP Routes (Endpoints)</h4>

<table>
  <thead>
    <tr>
      <th>Order</th>
      <th>Display Name</th>
      <th>Route Pattern</th>
      <th>Route Metadata</th>
    </tr>
  </thead>
  <tbody>
    @foreach (RouteEndpoint rep in repList)
    {
      EndpointMetadataCollection repmd = rep.Metadata;
      string repname = repmd.GetMetadata<RouteNameMetadata>()?.RouteName;
      var mdList = repmd.Select(p => p).OrderBy(p => p.ToString()).ToList();
      <tr>
        <td>@rep.Order</td>
        <td>@repname</td>
        <td>@rep.RoutePattern.RawText</td>
        <td>
          <ul>
            @foreach (var md in mdList)
            {
              switch (md)
              {
                case AllowAnonymousAttribute:
                  <li>AllowAnonymous:</li>
                  break;
                case AreaAttribute aa:
                  <li>AreaName: @aa.RouteValue</li>
                  break;
                case ControllerActionDescriptor cad:
                  <li>ControllerName: @cad.ControllerName</li>
                  <li>ActionName: @cad.ActionName</li>
                  break;
                case ControllerAttribute:
                  <li>Controller:</li>
                  break;
                case DataTokensMetadata dtm:
                  if (dtm.DataTokens.Count > 0)
                  {
                  <li>DataToken Keys: @string.Join(',', dtm.DataTokens.Keys.Select(p => p.ToString()))</li>
                  <li>DataToken Values: @string.Join(',', dtm.DataTokens.Values.Select(p => p.ToString()))</li>
                  <li>DataToken: help = @dtm.DataTokens.GetValueOrDefault("help")?.ToString()</li>
                  <li>DataToken: examples = @dtm.DataTokens.GetValueOrDefault("examples")?.ToString()</li>
                  }
                  break;
                case EndpointNameMetadata epnm:
                  <li>EndpointName: @epnm.EndpointName</li>
                  break;
                case PageRouteMetadata prm:
                  <li>PageRoute: @prm.PageRoute</li>
                  <li>RouteTemplate: @prm.RouteTemplate</li>
                  break;
                case RouteNameMetadata rnm:
                  <li>RouteName: @rnm.RouteName</li>
                  break;
                case SuppressLinkGenerationMetadata slgm:
                  <li>SuppressLinkGeneration: @slgm.SuppressLinkGeneration</li>
                  break;
                case SuppressMatchingMetadata smm:
                  <li>SuppressMatching: @smm.SuppressMatching</li>
                  break;
                default:
                  <li>@md.ToString()</li>
                  break;
              }
            }
          </ul>
        </td>
      </tr>
    }
  </tbody>
</table>
