@{
  var prc = ViewBag.PRC; Layout = prc.PageLayout;
  var NpdsArea = "PDP"; var NpdsController = "AdminScribeTkgr"; // var NpdsViewRole = "AdminEdit";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
}

@Html.Raw(prc.FormatPageTitle())

<div id="NpdsGrid">
  @(Html.Kendo().Grid<NexusResrepEditModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  }) // end Model
  .Read(get => get.Action("SelectScribeResrepStemsForEditWithAgent", NpdsController,
  new { area = NpdsArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
  ;
  col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
  ;
  col.Bound(row => row.EntityTypeName).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  ;
  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" });
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" });
  col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
  .HeaderHtmlAttributes(new { title = "Resource Record Diristry" })
  .HtmlAttributes(new { title = "#=RecordDiristryGuid#" })
  .ClientTemplate("#=RecordDiristryName#")
  .EditorTemplateName("_RecordDiristryGuid");
  col.Bound(row => row.RecordRegistryGuid).Title("Registry")
  .HeaderHtmlAttributes(new { title = "Resource Record Registry" })
  .HtmlAttributes(new { title = "#=RecordRegistryGuid#" })
  .ClientTemplate("#=RecordRegistryName#")
  .EditorTemplateName("_RecordRegistryGuid");
  col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
  .HeaderHtmlAttributes(new { title = "Resource Record Directory" })
  .HtmlAttributes(new { title = "#=RecordDirectoryGuid#" })
  .ClientTemplate("#=RecordDirectoryName#")
  .EditorTemplateName("_RecordDirectoryGuid");
  col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
  .HeaderHtmlAttributes(new { title = "Resource Record Registrar" })
  .HtmlAttributes(new { title = "#=RecordRegistrarGuid#" })
  .ClientTemplate("#=RecordRegistrarName#")
  .EditorTemplateName("_RecordRegistrarGuid");
  col.Bound(row => row.InfosetIsAuthorPrivate).Title("Private?").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is private to author?" })
  ;
  col.Bound(row => row.InfosetIsAgentShared).Title("Shared?").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is shared with agents?" })
  ;
  col.Bound(row => row.InfosetIsUpdaterLimited).Title("Limited?").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is limited to most recent updater?" })
  ;
  col.Bound(row => row.InfosetIsManagerReleased).Title("Released?").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource infoset read-write is released by most recent manager?" })
  ;
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .ClientDetailTemplateId("RestrictionAndsTemplate")
  .Editable(ed => ed.Mode(GridEditMode.InLine))
  .Events(ce => ce.Edit("HideStatus").Page("HideStatus").DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(false).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable().Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<script id="ResrepRecordToolBar" type="text/x-kendo-template">
  <span id="ResrepRootStatus" class="pdpResrepStatus"></span>
  <span id="ResrepStemStatus" class="pdpResrepStatus"></span>
</script>

<script id="RestrictionAndToolBar" type="text/x-kendo-template">
  <a class="k-button k-button-icontext k-grid-add" role="button">
    <span class="k-icon k-i-plus"></span>Add new record</a>
  <span id="RestrictionAndStatus" class="pdpResrepStatus"></span>
</script>

<script id="RestrictionOrToolBar" type="text/x-kendo-template">
  <a class="k-button k-button-icontext k-grid-add" role="button">
    <span class="k-icon k-i-plus"></span>Add new record</a>
  <span id="RestrictionOrStatus" class="pdpResrepStatus"></span>
</script>

<script id="RestrictionAndsTemplate" type="text/x-kendo-template">
  @(Html.Kendo().Grid<RestrictionAndEditModel>()
    .Name("RestrictionAnds#=RRRecordGuid#")
    .DataSource(ds => ds.Ajax()
    .Model(m => {
      m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Id(p => p.RestrictionAndGuidKey);
      m.Field(p => p.RestrictionAndGuidKey).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionAndIndex).Editable(false).DefaultValue(0);
      m.Field(p => p.RestrictionAndPriority).Editable(true).DefaultValue(0);
      m.Field(p => p.RestrictionName).Editable(true).DefaultValue(string.Empty);
      m.Field(p => p.RestrictionIsSufficient).Editable(true).DefaultValue(false);
    }) // end Model
    .Read(get => get.Action("SelectScribeRestrictionAndsForEdit", NpdsController, new { recordGuid = "#=RRRecordGuid#" }))
    .Create(post => post.Action("EditScribeRestrictionAnd", NpdsController, new { recordGuid = "#=RRRecordGuid#" }))
    .Update(put => put.Action("EditScribeRestrictionAnd", NpdsController))
    .Destroy(delete => delete.Action("DeleteScribeRestrictionAnd", NpdsController))
    .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
    ) // end DataSource
    .Columns(col => {
      col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid");
      col.Bound(row => row.RestrictionAndGuidKey).Hidden(true).Title("RestrictionAndGuidKey");
      col.Bound(row => row.RestrictionAndIndex).Title("Index")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Index in integer range [0,1,...,255]" });
      col.Command(com => com.Edit()).Title("");
      col.Bound(row => row.RestrictionName).Title("Name")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Name for the concept group" });
      col.Bound(row => row.RestrictionAndPriority).Title("Priority")
      .EditorTemplateName("_IndexInteger")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd has Priority in integer range [0,1,...,255]" });
      col.Bound(row => row.RestrictionIsSufficient).Title("IsSufficient")
      .HeaderHtmlAttributes(new { title = "RestrictionAnd IsSufficient for the concept group" });
      col.Bound(row => row.UpdatedOn).Title("Updated").Format(UtcdtFormat);
      col.Command(com2 => com2.Destroy()).Title("");
    }) // end Columns
    .ToolBar(tb => tb.ClientTemplateId("RestrictionAndToolBar"))
    .ClientDetailTemplateId("RestrictionOrsTemplate")
    .Editable(edit => edit.Mode(GridEditMode.InLine))
    .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
    .Pageable(pg => pg.Refresh(true)).Sortable().ToClientTemplate()
  )
</script>

<script id="RestrictionOrsTemplate" type="text/x-kendo-template">
  @(Html.Kendo().Grid<RestrictionOrEditModel>()
    .Name("RestrictionOrs#=RestrictionAndGuidKey#")
    .DataSource(ds => ds.Ajax()
    .Model(m =>
    {
      m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionAndGuidRef).Editable(false).DefaultValue(Guid.Empty);
      m.Id(p => p.RestrictionOrGuidKey);
      m.Field(p => p.RestrictionOrGuidKey).Editable(false).DefaultValue(Guid.Empty);
      m.Field(p => p.RestrictionOrIndex).Editable(false).DefaultValue(0);
      m.Field(p => p.RestrictionOrPriority).Editable(true).DefaultValue(0);
      m.Field(p => p.Restriction).Editable(true).DefaultValue(string.Empty);
      m.Field(p => p.IsWordPhrase).Editable(true).DefaultValue(false);
      m.Field(p => p.IsConceptLabel).Editable(true).DefaultValue(false);
    }) // end Model
    .Read(get => get.Action("SelectScribeRestrictionOrsForEdit", NpdsController,
      new { area = NpdsArea, restAndGuid = "#=RestrictionAndGuidKey#" }))
    .Create(post => post.Action("EditScribeRestrictionOr", NpdsController,
      new { area = NpdsArea, restAndGuid = "#=RestrictionAndGuidKey#", recordGuid = "#=RRRecordGuid#" }))
    .Update(put => put.Action("EditScribeRestrictionOr", NpdsController,
      new { area = NpdsArea }))
    .Destroy(delete => delete.Action("DeleteScribeRestrictionOr", NpdsController,
      new { area = NpdsArea }))
    .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
    ) // end DataSource
    .Columns(col => {
      col.Bound(row => row.RRRecordGuid).Hidden(true).Title("RRRecordGuid");
      col.Bound(row => row.RestrictionAndGuidRef).Hidden(true).Title("RestrictionAndGuidRef")
      .HeaderHtmlAttributes(new { title = "RestrictionAndGuidRef for the concept group" });
      col.Bound(row => row.RestrictionOrGuidKey).Hidden(true);
      col.Bound(row => row.RestrictionOrIndex).Title("Index")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Index in integer range [0,1,...,255]" });
      col.Command(com1 => com1.Edit()).Title("");
      col.Bound(row => row.RestrictionOrPriority).Title("Priority")
      .EditorTemplateName("_IndexInteger")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Priority in integer range [0,1,...,255]" });
      col.Bound(row => row.Restriction).Title("Value")
      .HeaderHtmlAttributes(new { title = "RestrictionOr has Value for the concept item" });
      col.Bound(row => row.IsWordPhrase).Title("IsWordPhrase")
      .HeaderHtmlAttributes(new { title = "RestrictionOr is word phrase (true) or word stem (false)" });
      col.Bound(row => row.IsConceptLabel).Title("IsConceptLabel")
      .HeaderHtmlAttributes(new { title = "RestrictionOr is concept label (a valid EntityLabel, URI, URL)" });
      col.Bound(row => row.UpdatedOn).Title("Updated").Format(UtcdtFormat);
      col.Command(com2 => com2.Destroy()).Title("");
    }) // end Columns
    .ToolBar(tb => tb.ClientTemplateId("RestrictionOrToolBar"))
    .Editable(edit => edit.Mode(GridEditMode.InLine))
    .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
    .Pageable(pg => pg.Refresh(true)).Sortable().ToClientTemplate()
  )
</script>

<script type="text/javascript">
  $(document).ready(function () {
    $("#NpdsGrid").show();
    $("#ResrepRecordGrid").data("kendoGrid").resize();
  })
  function OnChangeRecord(e) {
    if (e.type === "create" || e.type === "update" || e.type === "destroy") {
      // alert(JSON.stringify(e));
      var data = e.response.Data[0];
      // alert(JSON.stringify(data));
      // var emsg = data.PdpStatusName + " = " + data.PdpStatusMessage;
      // alert(emsg);
      $(data.PdpStatusName).html(data.PdpStatusMessage).show();
    }
  }
  function OnValidateRecord(e) {
    var tr = $(e.currentTarget).closest("tr");
    var id = this.dataItem(tr).id;
    var url = "/PDP/AdminScribeTkgr/ValidateScribeResrepStatus/" + id;
    // alert(url);
    $.post(url, null, function (result) {
      var data = result.Data[0];
      // alert(data.PdpStatusName + " = " + data.PdpStatusMessage);
      $(data.PdpStatusName).html(data.PdpStatusMessage).show();
    }, "json");
  }
  function HideStatus(e) {
    $("span#ResrepRootStatus").hide();
    $("span#ResrepStemStatus").hide();
    $("span#RestrictionAndStatus").hide();
    $("span#RestrictionOrStatus").hide();
  }
  function ResizeGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.resize();
  }
  function RefreshGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.dataSource.read();
  }
  function HandleJsonErrors(e) {
    // alert(e.xhr.responseText);
    var msg = $.parseJSON(e.xhr.responseText);
    if (msg) {
      alert("Errors:\n" + msg.join("\n"));
    }
  }
  function HandleAjaxErrors(e) {
    if (e.errors) {
      var message = "Errors:\n";
      $.each(e.errors, function (key, value) {
        if ('errors' in value) {
          $.each(value.errors, function () {
            message += this + "\n";
          });
        }
      });
      alert(message);
    }
  }
</script>
