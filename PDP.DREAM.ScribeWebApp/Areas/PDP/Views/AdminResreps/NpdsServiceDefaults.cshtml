@{
  var prc = ViewBag.PRC; Layout = prc.PageLayout;
  var NpdsArea = "PDP"; var NpdsController = "AdminScribeTkgr"; // var NpdsViewRole = "AdminEdit";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
}

@Html.Raw(prc.FormatPageTitle())

<div id="NpdsGrid">
  @(Html.Kendo().Grid<NexusResrepEditModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  m.Field(p => p.RecordHandle).Editable(false);
  m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.RRInfosetGuid).Editable(false).DefaultValue(Guid.Empty);
  m.Field(p => p.EntityTypeCode).Editable(false).DefaultValue(NpdsConst.DefaultEntityTypeCode);
  m.Field(p => p.EntityTypeName).Editable(false);
  m.Field(p => p.EntityName).Editable(false);
  m.Field(p => p.EntityNature).Editable(false);
  m.Field(p => p.RecordDiristryGuid).Editable(true).DefaultValue(prc.DiristryGuid);
  m.Field(p => p.RecordRegistryGuid).Editable(true).DefaultValue(prc.RegistryGuid);
  m.Field(p => p.RecordDirectoryGuid).Editable(true).DefaultValue(prc.DirectoryGuid);
  m.Field(p => p.RecordRegistrarGuid).Editable(true).DefaultValue(prc.RegistrarGuid);
  m.Field(p => p.InfosetIsAuthorPrivate).Editable(false).DefaultValue(false);
  m.Field(p => p.InfosetIsAgentShared).Editable(false).DefaultValue(false);
  m.Field(p => p.InfosetIsUpdaterLimited).Editable(false).DefaultValue(false);
  m.Field(p => p.InfosetIsManagerReleased).Editable(false).DefaultValue(false);
  m.Field(p => p.UpdatedOn).Editable(false);
  m.Field(p => p.UpdatedByAgentName).Editable(false);
  m.Field(p => p.DeletedOn).Editable(false);
  m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("SelectScribeResrepStemsForEditWithAgent", NpdsController,
  new { area = NpdsArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Create(post => post.Action("EditScribeResrepStem", NpdsController,
  new { area = NpdsArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Update(put => put.Action("EditScribeResrepStem", NpdsController,
  new { area = NpdsArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Destroy(delete => delete.Action("DeleteScribeResrepStem", NpdsController,
  new { area = NpdsArea, serviceType = prc.ServiceType.ToString(),
  serviceTag = prc.ServiceTag, entityType = prc.EntityType.ToString() }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Title("RRRecordGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRRecordGuid" })
  ;
  col.Bound(row => row.RRInfosetGuid).Title("RRInfosetGuid").Hidden(true)
  .HeaderHtmlAttributes(new { title = "Resource Representation RRInfosetGuid" })
  ;
  col.Command(com => {
  com.Edit();
  }).Title(""); // end Command
  col.Bound(row => row.EntityTypeName).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  ;
  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" });
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" });
  col.Bound(row => row.RecordDiristryGuid).Title("Diristry")
  .HeaderHtmlAttributes(new { title = "Resource Record Diristry" })
  .HtmlAttributes(new { title = "#=RecordDiristryGuid#" })
  .ClientTemplate("#=RecordDiristryName#")
  .EditorTemplateName("_RecordDiristryGuid");
  col.Bound(row => row.RecordRegistryGuid).Title("Registry")
  .HeaderHtmlAttributes(new { title = "Resource Record Registry" })
  .HtmlAttributes(new { title = "#=RecordRegistryGuid#" })
  .ClientTemplate("#=RecordRegistryName#")
  .EditorTemplateName("_RecordRegistryGuid");
  col.Bound(row => row.RecordDirectoryGuid).Title("Directory")
  .HeaderHtmlAttributes(new { title = "Resource Record Directory" })
  .HtmlAttributes(new { title = "#=RecordDirectoryGuid#" })
  .ClientTemplate("#=RecordDirectoryName#")
  .EditorTemplateName("_RecordDirectoryGuid");
  col.Bound(row => row.RecordRegistrarGuid).Title("Registrar")
  .HeaderHtmlAttributes(new { title = "Resource Record Registrar" })
  .HtmlAttributes(new { title = "#=RecordRegistrarGuid#" })
  .ClientTemplate("#=RecordRegistrarName#")
  .EditorTemplateName("_RecordRegistrarGuid");
  col.Command(com => {
  com.Custom("RefreshRecord").Click("OnRefreshRecord").Text("Refresh")
  .HtmlAttributes(new { @class = "scribeRefreshRecord", title = "Refresh Resource Metadata Record" });
  com.Destroy();
  }).Title(""); // end Command
  col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
  .HtmlAttributes(new { title = "Updated on date" });
  col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
  .HeaderHtmlAttributes(new { title = "Updated by agent" });
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolBar"))
  .ClientDetailTemplateId("ResrepRecordTabStrip")
  .Editable(ed => ed.Mode(GridEditMode.InLine))
  .Events(ce => ce.Edit("HideStatus").Page("HideStatus").DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(false).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable().Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<script id="ResrepRecordToolBar" type="text/x-kendo-template">
  <span id="ResrepRootStatus" class="pdpResrepStatus"></span>
  <span id="ResrepStemStatus" class="pdpResrepStatus"></span>
</script>

<script id="ServiceDefaultToolBar" type="text/x-kendo-template">
  <a class="k-button k-button-icontext k-grid-add" role="button">
    <span class="k-icon k-i-plus"></span>Add new record</a>
  <span id="ServiceDefaultStatus" class="pdpResrepStatus"></span>
</script>

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
  @(Html.Kendo().TabStrip().Name("TabStrip#=RRRecordGuid#").Items(itm => {

  itm.Add().Text("ServiceDefaults").Content(@<text>
    @(Html.Kendo().Grid<ServiceDefaultEditModel>()
  .Name("ServiceDefaults#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
    m.Field(p => p.RRFgroupGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.RRRecordGuid).Editable(false).DefaultValue(Guid.Empty);
    m.Field(p => p.HasIndex).Editable(false).DefaultValue(0);
    m.Field(p => p.HasPriority).Editable(true).DefaultValue(0);
    m.Field(p => p.IsMarked).Editable(true).DefaultValue(false);
    m.Field(p => p.IsPrincipal).Editable(true).DefaultValue(false);
    m.Field(p => p.DiristryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DiristryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.DirectoryGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.DirectoryName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.RegistrarGuid).Editable(true).DefaultValue(Guid.Empty);
    m.Field(p => p.RegistrarName).Editable(false).DefaultValue(string.Empty);
    m.Field(p => p.UpdatedOn).Editable(false);
    m.Field(p => p.UpdatedByAgentName).Editable(false);
    m.Field(p => p.DeletedOn).Editable(false);
    m.Field(p => p.DeletedByAgentName).Editable(false);
  }) // end Model
  .Read(get => get.Action("SelectScribeServiceDefaultsForEdit", NpdsController,
  new { area = NpdsArea, recordGuid = "#=RRRecordGuid#" }))
  .Create(post => post.Action("EditScribeServiceDefault", NpdsController,
  new { area = NpdsArea, recordGuid = "#=RRRecordGuid#" }))
  .Update(put => put.Action("EditScribeServiceDefault", NpdsController,
  new { area = NpdsArea }))
  .Destroy(delete => delete.Action("DeleteScribeServiceDefault", NpdsController,
  new { area = NpdsArea }))
  .Events(e => e.RequestEnd("OnChangeRecord").Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasIndex).Title("Index")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Index in integer range [0,1,...,255]" });
    col.Command(com =>
    {
      com.Edit();
    }).Title(""); // end Command
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "ServiceDefault has Priority in integer range [0,1,...,255]" })
    .EditorTemplateName("_PriorityInteger");
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "ServiceDefault is Principal?" });
    col.Bound(row => row.DiristryGuid).Title("Diristry")
    .HeaderHtmlAttributes(new { title = "Nexus Diristry" })
    .HtmlAttributes(new { title = "\\#=DiristryGuid\\#" })
    .ClientTemplate("\\#=DiristryName\\#")
    .EditorTemplateName("_RecordDiristryGuid");
    col.Bound(row => row.RegistryGuid).Title("Registry")
    .HeaderHtmlAttributes(new { title = "PORTAL Registry" })
    .HtmlAttributes(new { title = "\\#=RegistryGuid\\#" })
    .ClientTemplate("\\#=RegistryName\\#")
    .EditorTemplateName("_RecordRegistryGuid");
    col.Bound(row => row.DirectoryGuid).Title("Directory")
    .HeaderHtmlAttributes(new { title = "DOORS Directory" })
    .HtmlAttributes(new { title = "\\#=DirectoryGuid\\#" })
    .ClientTemplate("\\#=DirectoryName\\#")
    .EditorTemplateName("_RecordDirectoryGuid");
    col.Bound(row => row.RegistrarGuid).Title("Registrar")
    .HeaderHtmlAttributes(new { title = "Scribe Registrar" })
    .HtmlAttributes(new { title = "\\#=RegistrarGuid\\#" })
    .ClientTemplate("\\#=RegistrarName\\#")
    .EditorTemplateName("_RecordRegistrarGuid");
    col.Command(com =>
    {
      com.Destroy();
    }).Title(""); // end Command
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
    col.Bound(row => row.UpdatedByAgentName).Title("UpdatedBy")
    .HeaderHtmlAttributes(new { title = "Updated by agent" });
    col.Bound(row => row.DeletedOn).Title("DeletedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Deleted on date" });
    col.Bound(row => row.DeletedByAgentName).Title("DeleteBy")
    .HeaderHtmlAttributes(new { title = "Deleted by agent" });
  }) // end Columns
  .Editable(edit => edit.Mode(GridEditMode.InLine))
  .ToolBar(tb => tb.ClientTemplateId("ServiceDefaultToolBar"))
  .Events(ce => ce.Page("HideStatus").Edit("HideStatus"))
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Status").LoadContentFrom("SelectScribeResrepStem", NpdsController,
    new { area = NpdsArea, recordGuid = "#=RRRecordGuid#" });

  }).SelectedIndex(0).ToClientTemplate()
  )
</script>

<script type="text/javascript">
  $(document).ready(function () {
    $("#NpdsGrid").show();
    $("#ResrepRecordGrid").data("kendoGrid").resize();
  })
  function OnChangeRecord(e) {
    if (e.type === "create" || e.type === "update" || e.type === "destroy") {
      var data = e.response.Data[0];
      $(data.PdpStatusName).html(data.PdpStatusMessage).show();
    }
  }
  function OnRefreshRecord(e) {
    var tr = $(e.currentTarget).closest("tr");
    var id = this.dataItem(tr).id;
    var url = "/PDP/AdminScribeTkgr/RefreshScribeResrepStatus/" + id;
    $.post(url, null, function (result) {
      var data = result.Data[0]; // alert(JSON.stringify(data));
      $(data.PdpStatusName).html(data.PdpStatusMessage).show();
    }, "json");
  }
  function OnValidateRecord(e) {
    var tr = $(e.currentTarget).closest("tr");
    var id = this.dataItem(tr).id;
    var url = "/PDP/AdminScribeTkgr/ValidateScribeResrepStatus/" + id;
    $.post(url, null, function (result) {
      var data = result.Data[0];
      $(data.PdpStatusName).html(data.PdpStatusMessage).show();
    }, "json");
  }
  function HideStatus(e) {
    $("span#ResrepRootStatus").hide();
    $("span#ResrepStemStatus").hide();
    $("span#ServiceDefaultStatus").hide();
  }
  function ResizeGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.resize();
  }
  function RefreshGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.dataSource.read();
  }
  function HandleJsonErrors(e) {
    // alert(e.xhr.responseText);
    var msg = $.parseJSON(e.xhr.responseText);
    if (msg) {
      alert("Errors:\n" + msg.join("\n"));
    }
  }
  function HandleAjaxErrors(e) {
    if (e.errors) {
      var message = "Errors:\n";
      $.each(e.errors, function (key, value) {
        if ('errors' in value) {
          $.each(value.errors, function () {
            message += this + "\n";
          });
        }
      });
      alert(message);
    }
  }
</script>
