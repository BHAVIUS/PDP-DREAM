//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 10/7/2022 2:39:27 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PDP.DREAM.CoreDataLib.Stores
{

    [GeneratedCode("Devart Entity Developer", "")]
    public partial class CoreDbsqlContext : PDP.DREAM.CoreDataLib.Stores.PdpDataContext
    {


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<CoreEntityTypeItem> CoreEntityTypeItems
        {
            get;
            set;
        }

        public virtual DbSet<CoreInfosetStatusItem> CoreInfosetStatusItems
        {
            get;
            set;
        }

        public virtual DbSet<CoreServiceTypeItem> CoreServiceTypeItems
        {
            get;
            set;
        }

        public virtual DbSet<CoreServiceDefault> CoreServiceDefaults
        {
            get;
            set;
        }

        public virtual DbSet<CoreSessionAgent> CoreSessionAgents
        {
            get;
            set;
        }

        public virtual DbSet<CoreInfosetTypeItem> CoreInfosetTypeItems
        {
            get;
            set;
        }

        public virtual DbSet<CoreFieldFormatItem> CoreFieldFormatItems
        {
            get;
            set;
        }

        public virtual DbSet<CoreServerService> CoreServerServices
        {
            get;
            set;
        }

        public virtual DbSet<CoreServiceRestrictionAnd> CoreServiceRestrictionAnds
        {
            get;
            set;
        }

        public virtual DbSet<CoreServiceRestrictionOr> CoreServiceRestrictionOrs
        {
            get;
            set;
        }

        #region Methods

        public int? CoreSessionAgentAddRole (Guid? UserGuid, Guid? AgentGuid, bool? AgentIsAuthor, bool? AgentIsEditor, bool? AgentIsAdmin)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CoreSessionAgentAddRole";

                    DbParameter UserGuidParameter = cmd.CreateParameter();
                    UserGuidParameter.ParameterName = "UserGuid";
                    UserGuidParameter.Direction = ParameterDirection.Input;
                    UserGuidParameter.DbType = DbType.Guid;
                    if (UserGuid.HasValue)
                    {
                        UserGuidParameter.Value = UserGuid.Value;
                    }
                    else
                    {
                        UserGuidParameter.Size = -1;
                        UserGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidParameter);

                    DbParameter AgentGuidParameter = cmd.CreateParameter();
                    AgentGuidParameter.ParameterName = "AgentGuid";
                    AgentGuidParameter.Direction = ParameterDirection.Input;
                    AgentGuidParameter.DbType = DbType.Guid;
                    if (AgentGuid.HasValue)
                    {
                        AgentGuidParameter.Value = AgentGuid.Value;
                    }
                    else
                    {
                        AgentGuidParameter.Size = -1;
                        AgentGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidParameter);

                    DbParameter AgentIsAuthorParameter = cmd.CreateParameter();
                    AgentIsAuthorParameter.ParameterName = "AgentIsAuthor";
                    AgentIsAuthorParameter.Direction = ParameterDirection.Input;
                    AgentIsAuthorParameter.DbType = DbType.Boolean;
                    if (AgentIsAuthor.HasValue)
                    {
                        AgentIsAuthorParameter.Value = AgentIsAuthor.Value;
                    }
                    else
                    {
                        AgentIsAuthorParameter.Size = -1;
                        AgentIsAuthorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAuthorParameter);

                    DbParameter AgentIsEditorParameter = cmd.CreateParameter();
                    AgentIsEditorParameter.ParameterName = "AgentIsEditor";
                    AgentIsEditorParameter.Direction = ParameterDirection.Input;
                    AgentIsEditorParameter.DbType = DbType.Boolean;
                    if (AgentIsEditor.HasValue)
                    {
                        AgentIsEditorParameter.Value = AgentIsEditor.Value;
                    }
                    else
                    {
                        AgentIsEditorParameter.Size = -1;
                        AgentIsEditorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsEditorParameter);

                    DbParameter AgentIsAdminParameter = cmd.CreateParameter();
                    AgentIsAdminParameter.ParameterName = "AgentIsAdmin";
                    AgentIsAdminParameter.Direction = ParameterDirection.Input;
                    AgentIsAdminParameter.DbType = DbType.Boolean;
                    if (AgentIsAdmin.HasValue)
                    {
                        AgentIsAdminParameter.Value = AgentIsAdmin.Value;
                    }
                    else
                    {
                        AgentIsAdminParameter.Size = -1;
                        AgentIsAdminParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAdminParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? CoreSessionAgentCheck (Guid? IdentityAppGuid, bool? SessionValueIsRequired, ref Guid? SessionGuid, ref Guid? UserGuid, ref Guid? AgentGuid, ref Guid? AgentInfosetGuid, ref string AgentUserNameDisp, ref bool? AgentIsAuthor, ref bool? AgentIsEditor, ref bool? AgentIsAdmin)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CoreSessionAgentCheck";

                    DbParameter IdentityAppGuidParameter = cmd.CreateParameter();
                    IdentityAppGuidParameter.ParameterName = "IdentityAppGuid";
                    IdentityAppGuidParameter.Direction = ParameterDirection.Input;
                    IdentityAppGuidParameter.DbType = DbType.Guid;
                    if (IdentityAppGuid.HasValue)
                    {
                        IdentityAppGuidParameter.Value = IdentityAppGuid.Value;
                    }
                    else
                    {
                        IdentityAppGuidParameter.Size = -1;
                        IdentityAppGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityAppGuidParameter);

                    DbParameter SessionValueIsRequiredParameter = cmd.CreateParameter();
                    SessionValueIsRequiredParameter.ParameterName = "SessionValueIsRequired";
                    SessionValueIsRequiredParameter.Direction = ParameterDirection.Input;
                    SessionValueIsRequiredParameter.DbType = DbType.Boolean;
                    if (SessionValueIsRequired.HasValue)
                    {
                        SessionValueIsRequiredParameter.Value = SessionValueIsRequired.Value;
                    }
                    else
                    {
                        SessionValueIsRequiredParameter.Size = -1;
                        SessionValueIsRequiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionValueIsRequiredParameter);

                    DbParameter SessionGuidParameter = cmd.CreateParameter();
                    SessionGuidParameter.ParameterName = "SessionGuid";
                    SessionGuidParameter.Direction = ParameterDirection.InputOutput;
                    SessionGuidParameter.DbType = DbType.Guid;
                    if (SessionGuid.HasValue)
                    {
                        SessionGuidParameter.Value = SessionGuid.Value;
                    }
                    else
                    {
                        SessionGuidParameter.Size = -1;
                        SessionGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidParameter);

                    DbParameter UserGuidParameter = cmd.CreateParameter();
                    UserGuidParameter.ParameterName = "UserGuid";
                    UserGuidParameter.Direction = ParameterDirection.InputOutput;
                    UserGuidParameter.DbType = DbType.Guid;
                    if (UserGuid.HasValue)
                    {
                        UserGuidParameter.Value = UserGuid.Value;
                    }
                    else
                    {
                        UserGuidParameter.Size = -1;
                        UserGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidParameter);

                    DbParameter AgentGuidParameter = cmd.CreateParameter();
                    AgentGuidParameter.ParameterName = "AgentGuid";
                    AgentGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentGuidParameter.DbType = DbType.Guid;
                    if (AgentGuid.HasValue)
                    {
                        AgentGuidParameter.Value = AgentGuid.Value;
                    }
                    else
                    {
                        AgentGuidParameter.Size = -1;
                        AgentGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidParameter);

                    DbParameter AgentInfosetGuidParameter = cmd.CreateParameter();
                    AgentInfosetGuidParameter.ParameterName = "AgentInfosetGuid";
                    AgentInfosetGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentInfosetGuidParameter.DbType = DbType.Guid;
                    if (AgentInfosetGuid.HasValue)
                    {
                        AgentInfosetGuidParameter.Value = AgentInfosetGuid.Value;
                    }
                    else
                    {
                        AgentInfosetGuidParameter.Size = -1;
                        AgentInfosetGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentInfosetGuidParameter);

                    DbParameter AgentUserNameDispParameter = cmd.CreateParameter();
                    AgentUserNameDispParameter.ParameterName = "AgentUserNameDisp";
                    AgentUserNameDispParameter.Direction = ParameterDirection.InputOutput;
                    AgentUserNameDispParameter.DbType = DbType.String;
                    AgentUserNameDispParameter.Size = 64;
                    if (AgentUserNameDisp != null)
                    {
                        AgentUserNameDispParameter.Value = AgentUserNameDisp;
                    }
                    else
                    {
                        AgentUserNameDispParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentUserNameDispParameter);

                    DbParameter AgentIsAuthorParameter = cmd.CreateParameter();
                    AgentIsAuthorParameter.ParameterName = "AgentIsAuthor";
                    AgentIsAuthorParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsAuthorParameter.DbType = DbType.Boolean;
                    if (AgentIsAuthor.HasValue)
                    {
                        AgentIsAuthorParameter.Value = AgentIsAuthor.Value;
                    }
                    else
                    {
                        AgentIsAuthorParameter.Size = -1;
                        AgentIsAuthorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAuthorParameter);

                    DbParameter AgentIsEditorParameter = cmd.CreateParameter();
                    AgentIsEditorParameter.ParameterName = "AgentIsEditor";
                    AgentIsEditorParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsEditorParameter.DbType = DbType.Boolean;
                    if (AgentIsEditor.HasValue)
                    {
                        AgentIsEditorParameter.Value = AgentIsEditor.Value;
                    }
                    else
                    {
                        AgentIsEditorParameter.Size = -1;
                        AgentIsEditorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsEditorParameter);

                    DbParameter AgentIsAdminParameter = cmd.CreateParameter();
                    AgentIsAdminParameter.ParameterName = "AgentIsAdmin";
                    AgentIsAdminParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsAdminParameter.DbType = DbType.Boolean;
                    if (AgentIsAdmin.HasValue)
                    {
                        AgentIsAdminParameter.Value = AgentIsAdmin.Value;
                    }
                    else
                    {
                        AgentIsAdminParameter.Size = -1;
                        AgentIsAdminParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAdminParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["SessionGuid"].Value != null && !(cmd.Parameters["SessionGuid"].Value is System.DBNull))
                        SessionGuid = (Guid)Convert.ChangeType(cmd.Parameters["SessionGuid"].Value, typeof(Guid));
                    else
                        SessionGuid = default(Guid);

                    if (cmd.Parameters["UserGuid"].Value != null && !(cmd.Parameters["UserGuid"].Value is System.DBNull))
                        UserGuid = (Guid)Convert.ChangeType(cmd.Parameters["UserGuid"].Value, typeof(Guid));
                    else
                        UserGuid = default(Guid);

                    if (cmd.Parameters["AgentGuid"].Value != null && !(cmd.Parameters["AgentGuid"].Value is System.DBNull))
                        AgentGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentGuid"].Value, typeof(Guid));
                    else
                        AgentGuid = default(Guid);

                    if (cmd.Parameters["AgentInfosetGuid"].Value != null && !(cmd.Parameters["AgentInfosetGuid"].Value is System.DBNull))
                        AgentInfosetGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentInfosetGuid"].Value, typeof(Guid));
                    else
                        AgentInfosetGuid = default(Guid);

                    if (cmd.Parameters["AgentUserNameDisp"].Value != null && !(cmd.Parameters["AgentUserNameDisp"].Value is System.DBNull))
                        AgentUserNameDisp = (string)Convert.ChangeType(cmd.Parameters["AgentUserNameDisp"].Value, typeof(string));
                    else
                        AgentUserNameDisp = default(string);

                    if (cmd.Parameters["AgentIsAuthor"].Value != null && !(cmd.Parameters["AgentIsAuthor"].Value is System.DBNull))
                        AgentIsAuthor = (bool)Convert.ChangeType(cmd.Parameters["AgentIsAuthor"].Value, typeof(bool));
                    else
                        AgentIsAuthor = default(bool);

                    if (cmd.Parameters["AgentIsEditor"].Value != null && !(cmd.Parameters["AgentIsEditor"].Value is System.DBNull))
                        AgentIsEditor = (bool)Convert.ChangeType(cmd.Parameters["AgentIsEditor"].Value, typeof(bool));
                    else
                        AgentIsEditor = default(bool);

                    if (cmd.Parameters["AgentIsAdmin"].Value != null && !(cmd.Parameters["AgentIsAdmin"].Value is System.DBNull))
                        AgentIsAdmin = (bool)Convert.ChangeType(cmd.Parameters["AgentIsAdmin"].Value, typeof(bool));
                    else
                        AgentIsAdmin = default(bool);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? CoreSessionAgentEdit (Guid? IdentityAppGuid, Guid? IdentityUserGuid, string IdentityUserNameDisp, ref Guid? AgentGuid, ref Guid? SessionGuid)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CoreSessionAgentEdit";

                    DbParameter IdentityAppGuidParameter = cmd.CreateParameter();
                    IdentityAppGuidParameter.ParameterName = "IdentityAppGuid";
                    IdentityAppGuidParameter.Direction = ParameterDirection.Input;
                    IdentityAppGuidParameter.DbType = DbType.Guid;
                    if (IdentityAppGuid.HasValue)
                    {
                        IdentityAppGuidParameter.Value = IdentityAppGuid.Value;
                    }
                    else
                    {
                        IdentityAppGuidParameter.Size = -1;
                        IdentityAppGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityAppGuidParameter);

                    DbParameter IdentityUserGuidParameter = cmd.CreateParameter();
                    IdentityUserGuidParameter.ParameterName = "IdentityUserGuid";
                    IdentityUserGuidParameter.Direction = ParameterDirection.Input;
                    IdentityUserGuidParameter.DbType = DbType.Guid;
                    if (IdentityUserGuid.HasValue)
                    {
                        IdentityUserGuidParameter.Value = IdentityUserGuid.Value;
                    }
                    else
                    {
                        IdentityUserGuidParameter.Size = -1;
                        IdentityUserGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityUserGuidParameter);

                    DbParameter IdentityUserNameDispParameter = cmd.CreateParameter();
                    IdentityUserNameDispParameter.ParameterName = "IdentityUserNameDisp";
                    IdentityUserNameDispParameter.Direction = ParameterDirection.Input;
                    IdentityUserNameDispParameter.DbType = DbType.String;
                    IdentityUserNameDispParameter.Size = 64;
                    if (IdentityUserNameDisp != null)
                    {
                        IdentityUserNameDispParameter.Value = IdentityUserNameDisp;
                    }
                    else
                    {
                        IdentityUserNameDispParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityUserNameDispParameter);

                    DbParameter AgentGuidParameter = cmd.CreateParameter();
                    AgentGuidParameter.ParameterName = "AgentGuid";
                    AgentGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentGuidParameter.DbType = DbType.Guid;
                    if (AgentGuid.HasValue)
                    {
                        AgentGuidParameter.Value = AgentGuid.Value;
                    }
                    else
                    {
                        AgentGuidParameter.Size = -1;
                        AgentGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidParameter);

                    DbParameter SessionGuidParameter = cmd.CreateParameter();
                    SessionGuidParameter.ParameterName = "SessionGuid";
                    SessionGuidParameter.Direction = ParameterDirection.InputOutput;
                    SessionGuidParameter.DbType = DbType.Guid;
                    if (SessionGuid.HasValue)
                    {
                        SessionGuidParameter.Value = SessionGuid.Value;
                    }
                    else
                    {
                        SessionGuidParameter.Size = -1;
                        SessionGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["AgentGuid"].Value != null && !(cmd.Parameters["AgentGuid"].Value is System.DBNull))
                        AgentGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentGuid"].Value, typeof(Guid));
                    else
                        AgentGuid = default(Guid);

                    if (cmd.Parameters["SessionGuid"].Value != null && !(cmd.Parameters["SessionGuid"].Value is System.DBNull))
                        SessionGuid = (Guid)Convert.ChangeType(cmd.Parameters["SessionGuid"].Value, typeof(Guid));
                    else
                        SessionGuid = default(Guid);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? CoreDefaultServices (string ServicePTag, ref Guid? DiristryGuid, ref Guid? RegistryGuid, ref Guid? DirectoryGuid, ref Guid? RegistrarGuid)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CoreDefaultServices";

                    DbParameter ServicePTagParameter = cmd.CreateParameter();
                    ServicePTagParameter.ParameterName = "ServicePTag";
                    ServicePTagParameter.Direction = ParameterDirection.Input;
                    ServicePTagParameter.DbType = DbType.String;
                    ServicePTagParameter.Size = 128;
                    if (ServicePTag != null)
                    {
                        ServicePTagParameter.Value = ServicePTag;
                    }
                    else
                    {
                        ServicePTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ServicePTagParameter);

                    DbParameter DiristryGuidParameter = cmd.CreateParameter();
                    DiristryGuidParameter.ParameterName = "DiristryGuid";
                    DiristryGuidParameter.Direction = ParameterDirection.InputOutput;
                    DiristryGuidParameter.DbType = DbType.Guid;
                    if (DiristryGuid.HasValue)
                    {
                        DiristryGuidParameter.Value = DiristryGuid.Value;
                    }
                    else
                    {
                        DiristryGuidParameter.Size = -1;
                        DiristryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryGuidParameter);

                    DbParameter RegistryGuidParameter = cmd.CreateParameter();
                    RegistryGuidParameter.ParameterName = "RegistryGuid";
                    RegistryGuidParameter.Direction = ParameterDirection.InputOutput;
                    RegistryGuidParameter.DbType = DbType.Guid;
                    if (RegistryGuid.HasValue)
                    {
                        RegistryGuidParameter.Value = RegistryGuid.Value;
                    }
                    else
                    {
                        RegistryGuidParameter.Size = -1;
                        RegistryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryGuidParameter);

                    DbParameter DirectoryGuidParameter = cmd.CreateParameter();
                    DirectoryGuidParameter.ParameterName = "DirectoryGuid";
                    DirectoryGuidParameter.Direction = ParameterDirection.InputOutput;
                    DirectoryGuidParameter.DbType = DbType.Guid;
                    if (DirectoryGuid.HasValue)
                    {
                        DirectoryGuidParameter.Value = DirectoryGuid.Value;
                    }
                    else
                    {
                        DirectoryGuidParameter.Size = -1;
                        DirectoryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryGuidParameter);

                    DbParameter RegistrarGuidParameter = cmd.CreateParameter();
                    RegistrarGuidParameter.ParameterName = "RegistrarGuid";
                    RegistrarGuidParameter.Direction = ParameterDirection.InputOutput;
                    RegistrarGuidParameter.DbType = DbType.Guid;
                    if (RegistrarGuid.HasValue)
                    {
                        RegistrarGuidParameter.Value = RegistrarGuid.Value;
                    }
                    else
                    {
                        RegistrarGuidParameter.Size = -1;
                        RegistrarGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarGuidParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["DiristryGuid"].Value != null && !(cmd.Parameters["DiristryGuid"].Value is System.DBNull))
                        DiristryGuid = (Guid)Convert.ChangeType(cmd.Parameters["DiristryGuid"].Value, typeof(Guid));
                    else
                        DiristryGuid = default(Guid);

                    if (cmd.Parameters["RegistryGuid"].Value != null && !(cmd.Parameters["RegistryGuid"].Value is System.DBNull))
                        RegistryGuid = (Guid)Convert.ChangeType(cmd.Parameters["RegistryGuid"].Value, typeof(Guid));
                    else
                        RegistryGuid = default(Guid);

                    if (cmd.Parameters["DirectoryGuid"].Value != null && !(cmd.Parameters["DirectoryGuid"].Value is System.DBNull))
                        DirectoryGuid = (Guid)Convert.ChangeType(cmd.Parameters["DirectoryGuid"].Value, typeof(Guid));
                    else
                        DirectoryGuid = default(Guid);

                    if (cmd.Parameters["RegistrarGuid"].Value != null && !(cmd.Parameters["RegistrarGuid"].Value is System.DBNull))
                        RegistrarGuid = (Guid)Convert.ChangeType(cmd.Parameters["RegistrarGuid"].Value, typeof(Guid));
                    else
                        RegistrarGuid = default(Guid);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<Tuple<Guid?, Guid?, Guid?, Guid?, int?>> CoreDefaultServicesAsync (string ServicePTag, Guid? DiristryGuid, Guid? RegistryGuid, Guid? DirectoryGuid, Guid? RegistrarGuid)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CoreDefaultServices";

                    DbParameter ServicePTagParameter = cmd.CreateParameter();
                    ServicePTagParameter.ParameterName = "ServicePTag";
                    ServicePTagParameter.Direction = ParameterDirection.Input;
                    ServicePTagParameter.DbType = DbType.String;
                    ServicePTagParameter.Size = 128;
                    if (ServicePTag != null)
                    {
                        ServicePTagParameter.Value = ServicePTag;
                    }
                    else
                    {
                        ServicePTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ServicePTagParameter);

                    DbParameter DiristryGuidParameter = cmd.CreateParameter();
                    DiristryGuidParameter.ParameterName = "DiristryGuid";
                    DiristryGuidParameter.Direction = ParameterDirection.InputOutput;
                    DiristryGuidParameter.DbType = DbType.Guid;
                    if (DiristryGuid.HasValue)
                    {
                        DiristryGuidParameter.Value = DiristryGuid.Value;
                    }
                    else
                    {
                        DiristryGuidParameter.Size = -1;
                        DiristryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryGuidParameter);

                    DbParameter RegistryGuidParameter = cmd.CreateParameter();
                    RegistryGuidParameter.ParameterName = "RegistryGuid";
                    RegistryGuidParameter.Direction = ParameterDirection.InputOutput;
                    RegistryGuidParameter.DbType = DbType.Guid;
                    if (RegistryGuid.HasValue)
                    {
                        RegistryGuidParameter.Value = RegistryGuid.Value;
                    }
                    else
                    {
                        RegistryGuidParameter.Size = -1;
                        RegistryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryGuidParameter);

                    DbParameter DirectoryGuidParameter = cmd.CreateParameter();
                    DirectoryGuidParameter.ParameterName = "DirectoryGuid";
                    DirectoryGuidParameter.Direction = ParameterDirection.InputOutput;
                    DirectoryGuidParameter.DbType = DbType.Guid;
                    if (DirectoryGuid.HasValue)
                    {
                        DirectoryGuidParameter.Value = DirectoryGuid.Value;
                    }
                    else
                    {
                        DirectoryGuidParameter.Size = -1;
                        DirectoryGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryGuidParameter);

                    DbParameter RegistrarGuidParameter = cmd.CreateParameter();
                    RegistrarGuidParameter.ParameterName = "RegistrarGuid";
                    RegistrarGuidParameter.Direction = ParameterDirection.InputOutput;
                    RegistrarGuidParameter.DbType = DbType.Guid;
                    if (RegistrarGuid.HasValue)
                    {
                        RegistrarGuidParameter.Value = RegistrarGuid.Value;
                    }
                    else
                    {
                        RegistrarGuidParameter.Size = -1;
                        RegistrarGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarGuidParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["DiristryGuid"].Value != null && !(cmd.Parameters["DiristryGuid"].Value is System.DBNull))
                        DiristryGuid = (Guid)Convert.ChangeType(cmd.Parameters["DiristryGuid"].Value, typeof(Guid));
                    else
                        DiristryGuid = default(Guid);

                    if (cmd.Parameters["RegistryGuid"].Value != null && !(cmd.Parameters["RegistryGuid"].Value is System.DBNull))
                        RegistryGuid = (Guid)Convert.ChangeType(cmd.Parameters["RegistryGuid"].Value, typeof(Guid));
                    else
                        RegistryGuid = default(Guid);

                    if (cmd.Parameters["DirectoryGuid"].Value != null && !(cmd.Parameters["DirectoryGuid"].Value is System.DBNull))
                        DirectoryGuid = (Guid)Convert.ChangeType(cmd.Parameters["DirectoryGuid"].Value, typeof(Guid));
                    else
                        DirectoryGuid = default(Guid);

                    if (cmd.Parameters["RegistrarGuid"].Value != null && !(cmd.Parameters["RegistrarGuid"].Value is System.DBNull))
                        RegistrarGuid = (Guid)Convert.ChangeType(cmd.Parameters["RegistrarGuid"].Value, typeof(Guid));
                    else
                        RegistrarGuid = default(Guid);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<Guid?, Guid?, Guid?, Guid?, int?>(DiristryGuid, RegistryGuid, DirectoryGuid, RegistrarGuid, result);
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<CoreEntityTypeItem>(new CoreEntityTypeItemConfiguration());
            modelBuilder.ApplyConfiguration<CoreInfosetStatusItem>(new CoreInfosetStatusItemConfiguration());
            modelBuilder.ApplyConfiguration<CoreServiceTypeItem>(new CoreServiceTypeItemConfiguration());
            modelBuilder.ApplyConfiguration<CoreServiceDefault>(new CoreServiceDefaultConfiguration());
            modelBuilder.ApplyConfiguration<CoreSessionAgent>(new CoreSessionAgentConfiguration());
            modelBuilder.ApplyConfiguration<CoreInfosetTypeItem>(new CoreInfosetTypeItemConfiguration());
            modelBuilder.ApplyConfiguration<CoreFieldFormatItem>(new CoreFieldFormatItemConfiguration());
            modelBuilder.ApplyConfiguration<CoreServerService>(new CoreServerServiceConfiguration());
            modelBuilder.ApplyConfiguration<CoreServiceRestrictionAnd>(new CoreServiceRestrictionAndConfiguration());
            modelBuilder.ApplyConfiguration<CoreServiceRestrictionOr>(new CoreServiceRestrictionOrConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
