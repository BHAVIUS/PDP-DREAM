//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 12/6/2021 3:54:50 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PDP.DREAM.CoreDataLib.Stores
{

    [GeneratedCode("Devart Entity Developer", "")]
    public partial class QebIdentityContext : PDP.DREAM.CoreDataLib.Stores.PdpDataContext
    {
        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<QebIdentityAppRole> QebIdentityAppRoles
        {
            get;
            set;
        }

        public virtual DbSet<QebIdentityApp> QebIdentityApps
        {
            get;
            set;
        }

        public virtual DbSet<QebIdentityAppUserRole> QebIdentityAppUserRoles
        {
            get;
            set;
        }

        public virtual DbSet<QebIdentityAppUser> QebIdentityAppUsers
        {
            get;
            set;
        }

        public virtual DbSet<QebIdentityAppUserRoleLink> QebIdentityAppUserRoleLinks
        {
            get;
            set;
        }

        #region Methods

        public int? QebIdentityAppEdit (Guid? AppGuidKey, string AppName, string AppDescription)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppEdit";

                    DbParameter AppGuidKeyParameter = cmd.CreateParameter();
                    AppGuidKeyParameter.ParameterName = "AppGuidKey";
                    AppGuidKeyParameter.Direction = ParameterDirection.Input;
                    AppGuidKeyParameter.DbType = DbType.Guid;
                    if (AppGuidKey.HasValue)
                    {
                        AppGuidKeyParameter.Value = AppGuidKey.Value;
                    }
                    else
                    {
                        AppGuidKeyParameter.Size = -1;
                        AppGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidKeyParameter);

                    DbParameter AppNameParameter = cmd.CreateParameter();
                    AppNameParameter.ParameterName = "AppName";
                    AppNameParameter.Direction = ParameterDirection.Input;
                    AppNameParameter.DbType = DbType.String;
                    AppNameParameter.Size = 64;
                    if (AppName != null)
                    {
                        AppNameParameter.Value = AppName;
                    }
                    else
                    {
                        AppNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppNameParameter);

                    DbParameter AppDescriptionParameter = cmd.CreateParameter();
                    AppDescriptionParameter.ParameterName = "AppDescription";
                    AppDescriptionParameter.Direction = ParameterDirection.Input;
                    AppDescriptionParameter.DbType = DbType.String;
                    AppDescriptionParameter.Size = 128;
                    if (AppDescription != null)
                    {
                        AppDescriptionParameter.Value = AppDescription;
                    }
                    else
                    {
                        AppDescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppDescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppEditAsync (Guid? AppGuidKey, string AppName, string AppDescription)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppEdit";

                    DbParameter AppGuidKeyParameter = cmd.CreateParameter();
                    AppGuidKeyParameter.ParameterName = "AppGuidKey";
                    AppGuidKeyParameter.Direction = ParameterDirection.Input;
                    AppGuidKeyParameter.DbType = DbType.Guid;
                    if (AppGuidKey.HasValue)
                    {
                        AppGuidKeyParameter.Value = AppGuidKey.Value;
                    }
                    else
                    {
                        AppGuidKeyParameter.Size = -1;
                        AppGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidKeyParameter);

                    DbParameter AppNameParameter = cmd.CreateParameter();
                    AppNameParameter.ParameterName = "AppName";
                    AppNameParameter.Direction = ParameterDirection.Input;
                    AppNameParameter.DbType = DbType.String;
                    AppNameParameter.Size = 64;
                    if (AppName != null)
                    {
                        AppNameParameter.Value = AppName;
                    }
                    else
                    {
                        AppNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppNameParameter);

                    DbParameter AppDescriptionParameter = cmd.CreateParameter();
                    AppDescriptionParameter.ParameterName = "AppDescription";
                    AppDescriptionParameter.Direction = ParameterDirection.Input;
                    AppDescriptionParameter.DbType = DbType.String;
                    AppDescriptionParameter.Size = 128;
                    if (AppDescription != null)
                    {
                        AppDescriptionParameter.Value = AppDescription;
                    }
                    else
                    {
                        AppDescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppDescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppRoleEdit (Guid? AppGuidRef, Guid? RoleGuidKey, string RoleName, string RoleDescription)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppRoleEdit";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter RoleGuidKeyParameter = cmd.CreateParameter();
                    RoleGuidKeyParameter.ParameterName = "RoleGuidKey";
                    RoleGuidKeyParameter.Direction = ParameterDirection.Input;
                    RoleGuidKeyParameter.DbType = DbType.Guid;
                    if (RoleGuidKey.HasValue)
                    {
                        RoleGuidKeyParameter.Value = RoleGuidKey.Value;
                    }
                    else
                    {
                        RoleGuidKeyParameter.Size = -1;
                        RoleGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidKeyParameter);

                    DbParameter RoleNameParameter = cmd.CreateParameter();
                    RoleNameParameter.ParameterName = "RoleName";
                    RoleNameParameter.Direction = ParameterDirection.Input;
                    RoleNameParameter.DbType = DbType.String;
                    RoleNameParameter.Size = 64;
                    if (RoleName != null)
                    {
                        RoleNameParameter.Value = RoleName;
                    }
                    else
                    {
                        RoleNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleNameParameter);

                    DbParameter RoleDescriptionParameter = cmd.CreateParameter();
                    RoleDescriptionParameter.ParameterName = "RoleDescription";
                    RoleDescriptionParameter.Direction = ParameterDirection.Input;
                    RoleDescriptionParameter.DbType = DbType.String;
                    RoleDescriptionParameter.Size = 128;
                    if (RoleDescription != null)
                    {
                        RoleDescriptionParameter.Value = RoleDescription;
                    }
                    else
                    {
                        RoleDescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleDescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppRoleEditAsync (Guid? AppGuidRef, Guid? RoleGuidKey, string RoleName, string RoleDescription)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppRoleEdit";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter RoleGuidKeyParameter = cmd.CreateParameter();
                    RoleGuidKeyParameter.ParameterName = "RoleGuidKey";
                    RoleGuidKeyParameter.Direction = ParameterDirection.Input;
                    RoleGuidKeyParameter.DbType = DbType.Guid;
                    if (RoleGuidKey.HasValue)
                    {
                        RoleGuidKeyParameter.Value = RoleGuidKey.Value;
                    }
                    else
                    {
                        RoleGuidKeyParameter.Size = -1;
                        RoleGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidKeyParameter);

                    DbParameter RoleNameParameter = cmd.CreateParameter();
                    RoleNameParameter.ParameterName = "RoleName";
                    RoleNameParameter.Direction = ParameterDirection.Input;
                    RoleNameParameter.DbType = DbType.String;
                    RoleNameParameter.Size = 64;
                    if (RoleName != null)
                    {
                        RoleNameParameter.Value = RoleName;
                    }
                    else
                    {
                        RoleNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleNameParameter);

                    DbParameter RoleDescriptionParameter = cmd.CreateParameter();
                    RoleDescriptionParameter.ParameterName = "RoleDescription";
                    RoleDescriptionParameter.Direction = ParameterDirection.Input;
                    RoleDescriptionParameter.DbType = DbType.String;
                    RoleDescriptionParameter.Size = 128;
                    if (RoleDescription != null)
                    {
                        RoleDescriptionParameter.Value = RoleDescription;
                    }
                    else
                    {
                        RoleDescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleDescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppDelete (Guid? AppGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppDelete";

                    DbParameter AppGuidKeyParameter = cmd.CreateParameter();
                    AppGuidKeyParameter.ParameterName = "AppGuidKey";
                    AppGuidKeyParameter.Direction = ParameterDirection.Input;
                    AppGuidKeyParameter.DbType = DbType.Guid;
                    if (AppGuidKey.HasValue)
                    {
                        AppGuidKeyParameter.Value = AppGuidKey.Value;
                    }
                    else
                    {
                        AppGuidKeyParameter.Size = -1;
                        AppGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppDeleteAsync (Guid? AppGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppDelete";

                    DbParameter AppGuidKeyParameter = cmd.CreateParameter();
                    AppGuidKeyParameter.ParameterName = "AppGuidKey";
                    AppGuidKeyParameter.Direction = ParameterDirection.Input;
                    AppGuidKeyParameter.DbType = DbType.Guid;
                    if (AppGuidKey.HasValue)
                    {
                        AppGuidKeyParameter.Value = AppGuidKey.Value;
                    }
                    else
                    {
                        AppGuidKeyParameter.Size = -1;
                        AppGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppRoleDelete (Guid? AppGuidRef, Guid? RoleGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppRoleDelete";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter RoleGuidKeyParameter = cmd.CreateParameter();
                    RoleGuidKeyParameter.ParameterName = "RoleGuidKey";
                    RoleGuidKeyParameter.Direction = ParameterDirection.Input;
                    RoleGuidKeyParameter.DbType = DbType.Guid;
                    if (RoleGuidKey.HasValue)
                    {
                        RoleGuidKeyParameter.Value = RoleGuidKey.Value;
                    }
                    else
                    {
                        RoleGuidKeyParameter.Size = -1;
                        RoleGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppRoleDeleteAsync (Guid? AppGuidRef, Guid? RoleGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppRoleDelete";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter RoleGuidKeyParameter = cmd.CreateParameter();
                    RoleGuidKeyParameter.ParameterName = "RoleGuidKey";
                    RoleGuidKeyParameter.Direction = ParameterDirection.Input;
                    RoleGuidKeyParameter.DbType = DbType.Guid;
                    if (RoleGuidKey.HasValue)
                    {
                        RoleGuidKeyParameter.Value = RoleGuidKey.Value;
                    }
                    else
                    {
                        RoleGuidKeyParameter.Size = -1;
                        RoleGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserDelete (Guid? AppGuidRef, Guid? UserGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserDelete";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserDeleteAsync (Guid? AppGuidRef, Guid? UserGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserDelete";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserEdit (Guid? AppGuidRef, Guid? UserGuidKey, string FirstName, string LastName, string UserName, string EmailAddress)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserEdit";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserEditAsync (Guid? AppGuidRef, Guid? UserGuidKey, string FirstName, string LastName, string UserName, string EmailAddress)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserEdit";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserStamp (Guid? AppGuidRef, Guid? UserGuidKey, Guid? SessionGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserStamp";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter SessionGuidRefParameter = cmd.CreateParameter();
                    SessionGuidRefParameter.ParameterName = "SessionGuidRef";
                    SessionGuidRefParameter.Direction = ParameterDirection.Input;
                    SessionGuidRefParameter.DbType = DbType.Guid;
                    if (SessionGuidRef.HasValue)
                    {
                        SessionGuidRefParameter.Value = SessionGuidRef.Value;
                    }
                    else
                    {
                        SessionGuidRefParameter.Size = -1;
                        SessionGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserStampAsync (Guid? AppGuidRef, Guid? UserGuidKey, Guid? SessionGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserStamp";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter SessionGuidRefParameter = cmd.CreateParameter();
                    SessionGuidRefParameter.ParameterName = "SessionGuidRef";
                    SessionGuidRefParameter.Direction = ParameterDirection.Input;
                    SessionGuidRefParameter.DbType = DbType.Guid;
                    if (SessionGuidRef.HasValue)
                    {
                        SessionGuidRefParameter.Value = SessionGuidRef.Value;
                    }
                    else
                    {
                        SessionGuidRefParameter.Size = -1;
                        SessionGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserRegister (Guid? AppGuidRef, Guid? UserGuidKey, string UserName, string UserNameDisplayed, string FirstName, string LastName, string PhoneNumber, string EmailAddress, string EmailAlternate, string WebsiteAddress, string Organization, string SecurityQuestion, string SecurityAnswer, string SecurityStamp, string SecurityToken, string PasswordHash, DateTime? DateUserCreated, DateTime? DateTokenExpired)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserRegister";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter PhoneNumberParameter = cmd.CreateParameter();
                    PhoneNumberParameter.ParameterName = "PhoneNumber";
                    PhoneNumberParameter.Direction = ParameterDirection.Input;
                    PhoneNumberParameter.DbType = DbType.String;
                    PhoneNumberParameter.Size = 64;
                    if (PhoneNumber != null)
                    {
                        PhoneNumberParameter.Value = PhoneNumber;
                    }
                    else
                    {
                        PhoneNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PhoneNumberParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAlternateParameter = cmd.CreateParameter();
                    EmailAlternateParameter.ParameterName = "EmailAlternate";
                    EmailAlternateParameter.Direction = ParameterDirection.Input;
                    EmailAlternateParameter.DbType = DbType.String;
                    EmailAlternateParameter.Size = 64;
                    if (EmailAlternate != null)
                    {
                        EmailAlternateParameter.Value = EmailAlternate;
                    }
                    else
                    {
                        EmailAlternateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAlternateParameter);

                    DbParameter WebsiteAddressParameter = cmd.CreateParameter();
                    WebsiteAddressParameter.ParameterName = "WebsiteAddress";
                    WebsiteAddressParameter.Direction = ParameterDirection.Input;
                    WebsiteAddressParameter.DbType = DbType.String;
                    WebsiteAddressParameter.Size = 256;
                    if (WebsiteAddress != null)
                    {
                        WebsiteAddressParameter.Value = WebsiteAddress;
                    }
                    else
                    {
                        WebsiteAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WebsiteAddressParameter);

                    DbParameter OrganizationParameter = cmd.CreateParameter();
                    OrganizationParameter.ParameterName = "Organization";
                    OrganizationParameter.Direction = ParameterDirection.Input;
                    OrganizationParameter.DbType = DbType.String;
                    OrganizationParameter.Size = 128;
                    if (Organization != null)
                    {
                        OrganizationParameter.Value = Organization;
                    }
                    else
                    {
                        OrganizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrganizationParameter);

                    DbParameter SecurityQuestionParameter = cmd.CreateParameter();
                    SecurityQuestionParameter.ParameterName = "SecurityQuestion";
                    SecurityQuestionParameter.Direction = ParameterDirection.Input;
                    SecurityQuestionParameter.DbType = DbType.String;
                    SecurityQuestionParameter.Size = 64;
                    if (SecurityQuestion != null)
                    {
                        SecurityQuestionParameter.Value = SecurityQuestion;
                    }
                    else
                    {
                        SecurityQuestionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityQuestionParameter);

                    DbParameter SecurityAnswerParameter = cmd.CreateParameter();
                    SecurityAnswerParameter.ParameterName = "SecurityAnswer";
                    SecurityAnswerParameter.Direction = ParameterDirection.Input;
                    SecurityAnswerParameter.DbType = DbType.String;
                    SecurityAnswerParameter.Size = 64;
                    if (SecurityAnswer != null)
                    {
                        SecurityAnswerParameter.Value = SecurityAnswer;
                    }
                    else
                    {
                        SecurityAnswerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityAnswerParameter);

                    DbParameter SecurityStampParameter = cmd.CreateParameter();
                    SecurityStampParameter.ParameterName = "SecurityStamp";
                    SecurityStampParameter.Direction = ParameterDirection.Input;
                    SecurityStampParameter.DbType = DbType.String;
                    SecurityStampParameter.Size = 64;
                    if (SecurityStamp != null)
                    {
                        SecurityStampParameter.Value = SecurityStamp;
                    }
                    else
                    {
                        SecurityStampParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityStampParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter PasswordHashParameter = cmd.CreateParameter();
                    PasswordHashParameter.ParameterName = "PasswordHash";
                    PasswordHashParameter.Direction = ParameterDirection.Input;
                    PasswordHashParameter.DbType = DbType.String;
                    PasswordHashParameter.Size = 1024;
                    if (PasswordHash != null)
                    {
                        PasswordHashParameter.Value = PasswordHash;
                    }
                    else
                    {
                        PasswordHashParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PasswordHashParameter);

                    DbParameter DateUserCreatedParameter = cmd.CreateParameter();
                    DateUserCreatedParameter.ParameterName = "DateUserCreated";
                    DateUserCreatedParameter.Direction = ParameterDirection.Input;
                    DateUserCreatedParameter.DbType = DbType.DateTime;
                    if (DateUserCreated.HasValue)
                    {
                        DateUserCreatedParameter.Value = DateUserCreated.Value;
                    }
                    else
                    {
                        DateUserCreatedParameter.Size = -1;
                        DateUserCreatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateUserCreatedParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserRegisterAsync (Guid? AppGuidRef, Guid? UserGuidKey, string UserName, string UserNameDisplayed, string FirstName, string LastName, string PhoneNumber, string EmailAddress, string EmailAlternate, string WebsiteAddress, string Organization, string SecurityQuestion, string SecurityAnswer, string SecurityStamp, string SecurityToken, string PasswordHash, DateTime? DateUserCreated, DateTime? DateTokenExpired)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserRegister";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter PhoneNumberParameter = cmd.CreateParameter();
                    PhoneNumberParameter.ParameterName = "PhoneNumber";
                    PhoneNumberParameter.Direction = ParameterDirection.Input;
                    PhoneNumberParameter.DbType = DbType.String;
                    PhoneNumberParameter.Size = 64;
                    if (PhoneNumber != null)
                    {
                        PhoneNumberParameter.Value = PhoneNumber;
                    }
                    else
                    {
                        PhoneNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PhoneNumberParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAlternateParameter = cmd.CreateParameter();
                    EmailAlternateParameter.ParameterName = "EmailAlternate";
                    EmailAlternateParameter.Direction = ParameterDirection.Input;
                    EmailAlternateParameter.DbType = DbType.String;
                    EmailAlternateParameter.Size = 64;
                    if (EmailAlternate != null)
                    {
                        EmailAlternateParameter.Value = EmailAlternate;
                    }
                    else
                    {
                        EmailAlternateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAlternateParameter);

                    DbParameter WebsiteAddressParameter = cmd.CreateParameter();
                    WebsiteAddressParameter.ParameterName = "WebsiteAddress";
                    WebsiteAddressParameter.Direction = ParameterDirection.Input;
                    WebsiteAddressParameter.DbType = DbType.String;
                    WebsiteAddressParameter.Size = 256;
                    if (WebsiteAddress != null)
                    {
                        WebsiteAddressParameter.Value = WebsiteAddress;
                    }
                    else
                    {
                        WebsiteAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WebsiteAddressParameter);

                    DbParameter OrganizationParameter = cmd.CreateParameter();
                    OrganizationParameter.ParameterName = "Organization";
                    OrganizationParameter.Direction = ParameterDirection.Input;
                    OrganizationParameter.DbType = DbType.String;
                    OrganizationParameter.Size = 128;
                    if (Organization != null)
                    {
                        OrganizationParameter.Value = Organization;
                    }
                    else
                    {
                        OrganizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrganizationParameter);

                    DbParameter SecurityQuestionParameter = cmd.CreateParameter();
                    SecurityQuestionParameter.ParameterName = "SecurityQuestion";
                    SecurityQuestionParameter.Direction = ParameterDirection.Input;
                    SecurityQuestionParameter.DbType = DbType.String;
                    SecurityQuestionParameter.Size = 64;
                    if (SecurityQuestion != null)
                    {
                        SecurityQuestionParameter.Value = SecurityQuestion;
                    }
                    else
                    {
                        SecurityQuestionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityQuestionParameter);

                    DbParameter SecurityAnswerParameter = cmd.CreateParameter();
                    SecurityAnswerParameter.ParameterName = "SecurityAnswer";
                    SecurityAnswerParameter.Direction = ParameterDirection.Input;
                    SecurityAnswerParameter.DbType = DbType.String;
                    SecurityAnswerParameter.Size = 64;
                    if (SecurityAnswer != null)
                    {
                        SecurityAnswerParameter.Value = SecurityAnswer;
                    }
                    else
                    {
                        SecurityAnswerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityAnswerParameter);

                    DbParameter SecurityStampParameter = cmd.CreateParameter();
                    SecurityStampParameter.ParameterName = "SecurityStamp";
                    SecurityStampParameter.Direction = ParameterDirection.Input;
                    SecurityStampParameter.DbType = DbType.String;
                    SecurityStampParameter.Size = 64;
                    if (SecurityStamp != null)
                    {
                        SecurityStampParameter.Value = SecurityStamp;
                    }
                    else
                    {
                        SecurityStampParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityStampParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter PasswordHashParameter = cmd.CreateParameter();
                    PasswordHashParameter.ParameterName = "PasswordHash";
                    PasswordHashParameter.Direction = ParameterDirection.Input;
                    PasswordHashParameter.DbType = DbType.String;
                    PasswordHashParameter.Size = 1024;
                    if (PasswordHash != null)
                    {
                        PasswordHashParameter.Value = PasswordHash;
                    }
                    else
                    {
                        PasswordHashParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PasswordHashParameter);

                    DbParameter DateUserCreatedParameter = cmd.CreateParameter();
                    DateUserCreatedParameter.ParameterName = "DateUserCreated";
                    DateUserCreatedParameter.Direction = ParameterDirection.Input;
                    DateUserCreatedParameter.DbType = DbType.DateTime;
                    if (DateUserCreated.HasValue)
                    {
                        DateUserCreatedParameter.Value = DateUserCreated.Value;
                    }
                    else
                    {
                        DateUserCreatedParameter.Size = -1;
                        DateUserCreatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateUserCreatedParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppLinkEdit (Guid? LinkGuidKey, Guid? UserGuidRef, Guid? RoleGuidRef, Guid? AppGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppLinkEdit";

                    DbParameter LinkGuidKeyParameter = cmd.CreateParameter();
                    LinkGuidKeyParameter.ParameterName = "LinkGuidKey";
                    LinkGuidKeyParameter.Direction = ParameterDirection.Input;
                    LinkGuidKeyParameter.DbType = DbType.Guid;
                    if (LinkGuidKey.HasValue)
                    {
                        LinkGuidKeyParameter.Value = LinkGuidKey.Value;
                    }
                    else
                    {
                        LinkGuidKeyParameter.Size = -1;
                        LinkGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LinkGuidKeyParameter);

                    DbParameter UserGuidRefParameter = cmd.CreateParameter();
                    UserGuidRefParameter.ParameterName = "UserGuidRef";
                    UserGuidRefParameter.Direction = ParameterDirection.Input;
                    UserGuidRefParameter.DbType = DbType.Guid;
                    if (UserGuidRef.HasValue)
                    {
                        UserGuidRefParameter.Value = UserGuidRef.Value;
                    }
                    else
                    {
                        UserGuidRefParameter.Size = -1;
                        UserGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidRefParameter);

                    DbParameter RoleGuidRefParameter = cmd.CreateParameter();
                    RoleGuidRefParameter.ParameterName = "RoleGuidRef";
                    RoleGuidRefParameter.Direction = ParameterDirection.Input;
                    RoleGuidRefParameter.DbType = DbType.Guid;
                    if (RoleGuidRef.HasValue)
                    {
                        RoleGuidRefParameter.Value = RoleGuidRef.Value;
                    }
                    else
                    {
                        RoleGuidRefParameter.Size = -1;
                        RoleGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidRefParameter);

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppLinkEditAsync (Guid? LinkGuidKey, Guid? UserGuidRef, Guid? RoleGuidRef, Guid? AppGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppLinkEdit";

                    DbParameter LinkGuidKeyParameter = cmd.CreateParameter();
                    LinkGuidKeyParameter.ParameterName = "LinkGuidKey";
                    LinkGuidKeyParameter.Direction = ParameterDirection.Input;
                    LinkGuidKeyParameter.DbType = DbType.Guid;
                    if (LinkGuidKey.HasValue)
                    {
                        LinkGuidKeyParameter.Value = LinkGuidKey.Value;
                    }
                    else
                    {
                        LinkGuidKeyParameter.Size = -1;
                        LinkGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LinkGuidKeyParameter);

                    DbParameter UserGuidRefParameter = cmd.CreateParameter();
                    UserGuidRefParameter.ParameterName = "UserGuidRef";
                    UserGuidRefParameter.Direction = ParameterDirection.Input;
                    UserGuidRefParameter.DbType = DbType.Guid;
                    if (UserGuidRef.HasValue)
                    {
                        UserGuidRefParameter.Value = UserGuidRef.Value;
                    }
                    else
                    {
                        UserGuidRefParameter.Size = -1;
                        UserGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidRefParameter);

                    DbParameter RoleGuidRefParameter = cmd.CreateParameter();
                    RoleGuidRefParameter.ParameterName = "RoleGuidRef";
                    RoleGuidRefParameter.Direction = ParameterDirection.Input;
                    RoleGuidRefParameter.DbType = DbType.Guid;
                    if (RoleGuidRef.HasValue)
                    {
                        RoleGuidRefParameter.Value = RoleGuidRef.Value;
                    }
                    else
                    {
                        RoleGuidRefParameter.Size = -1;
                        RoleGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RoleGuidRefParameter);

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserUpdateEmail (Guid? AppGuidRef, Guid? UserGuidKey, string EmailAddress, string EmailAlternate, string SecurityToken, DateTime? DateTokenExpired, DateTime? DateEmailConfirmed, DateTime? DateLastEdit, bool? EmailConfirmed)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateEmail";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAlternateParameter = cmd.CreateParameter();
                    EmailAlternateParameter.ParameterName = "EmailAlternate";
                    EmailAlternateParameter.Direction = ParameterDirection.Input;
                    EmailAlternateParameter.DbType = DbType.String;
                    EmailAlternateParameter.Size = 64;
                    if (EmailAlternate != null)
                    {
                        EmailAlternateParameter.Value = EmailAlternate;
                    }
                    else
                    {
                        EmailAlternateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAlternateParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DateEmailConfirmedParameter = cmd.CreateParameter();
                    DateEmailConfirmedParameter.ParameterName = "DateEmailConfirmed";
                    DateEmailConfirmedParameter.Direction = ParameterDirection.Input;
                    DateEmailConfirmedParameter.DbType = DbType.DateTime;
                    if (DateEmailConfirmed.HasValue)
                    {
                        DateEmailConfirmedParameter.Value = DateEmailConfirmed.Value;
                    }
                    else
                    {
                        DateEmailConfirmedParameter.Size = -1;
                        DateEmailConfirmedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateEmailConfirmedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter EmailConfirmedParameter = cmd.CreateParameter();
                    EmailConfirmedParameter.ParameterName = "EmailConfirmed";
                    EmailConfirmedParameter.Direction = ParameterDirection.Input;
                    EmailConfirmedParameter.DbType = DbType.Boolean;
                    if (EmailConfirmed.HasValue)
                    {
                        EmailConfirmedParameter.Value = EmailConfirmed.Value;
                    }
                    else
                    {
                        EmailConfirmedParameter.Size = -1;
                        EmailConfirmedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailConfirmedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserUpdateEmailAsync (Guid? AppGuidRef, Guid? UserGuidKey, string EmailAddress, string EmailAlternate, string SecurityToken, DateTime? DateTokenExpired, DateTime? DateEmailConfirmed, DateTime? DateLastEdit, bool? EmailConfirmed)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateEmail";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 64;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAlternateParameter = cmd.CreateParameter();
                    EmailAlternateParameter.ParameterName = "EmailAlternate";
                    EmailAlternateParameter.Direction = ParameterDirection.Input;
                    EmailAlternateParameter.DbType = DbType.String;
                    EmailAlternateParameter.Size = 64;
                    if (EmailAlternate != null)
                    {
                        EmailAlternateParameter.Value = EmailAlternate;
                    }
                    else
                    {
                        EmailAlternateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAlternateParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DateEmailConfirmedParameter = cmd.CreateParameter();
                    DateEmailConfirmedParameter.ParameterName = "DateEmailConfirmed";
                    DateEmailConfirmedParameter.Direction = ParameterDirection.Input;
                    DateEmailConfirmedParameter.DbType = DbType.DateTime;
                    if (DateEmailConfirmed.HasValue)
                    {
                        DateEmailConfirmedParameter.Value = DateEmailConfirmed.Value;
                    }
                    else
                    {
                        DateEmailConfirmedParameter.Size = -1;
                        DateEmailConfirmedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateEmailConfirmedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter EmailConfirmedParameter = cmd.CreateParameter();
                    EmailConfirmedParameter.ParameterName = "EmailConfirmed";
                    EmailConfirmedParameter.Direction = ParameterDirection.Input;
                    EmailConfirmedParameter.DbType = DbType.Boolean;
                    if (EmailConfirmed.HasValue)
                    {
                        EmailConfirmedParameter.Value = EmailConfirmed.Value;
                    }
                    else
                    {
                        EmailConfirmedParameter.Size = -1;
                        EmailConfirmedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailConfirmedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserUpdatePassword (Guid? AppGuidRef, Guid? UserGuidKey, string PasswordHash, string SecurityToken, DateTime? DateTokenExpired, DateTime? DatePasswordChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdatePassword";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter PasswordHashParameter = cmd.CreateParameter();
                    PasswordHashParameter.ParameterName = "PasswordHash";
                    PasswordHashParameter.Direction = ParameterDirection.Input;
                    PasswordHashParameter.DbType = DbType.String;
                    PasswordHashParameter.Size = 1024;
                    if (PasswordHash != null)
                    {
                        PasswordHashParameter.Value = PasswordHash;
                    }
                    else
                    {
                        PasswordHashParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PasswordHashParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DatePasswordChangedParameter = cmd.CreateParameter();
                    DatePasswordChangedParameter.ParameterName = "DatePasswordChanged";
                    DatePasswordChangedParameter.Direction = ParameterDirection.Input;
                    DatePasswordChangedParameter.DbType = DbType.DateTime;
                    if (DatePasswordChanged.HasValue)
                    {
                        DatePasswordChangedParameter.Value = DatePasswordChanged.Value;
                    }
                    else
                    {
                        DatePasswordChangedParameter.Size = -1;
                        DatePasswordChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DatePasswordChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserUpdatePasswordAsync (Guid? AppGuidRef, Guid? UserGuidKey, string PasswordHash, string SecurityToken, DateTime? DateTokenExpired, DateTime? DatePasswordChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdatePassword";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter PasswordHashParameter = cmd.CreateParameter();
                    PasswordHashParameter.ParameterName = "PasswordHash";
                    PasswordHashParameter.Direction = ParameterDirection.Input;
                    PasswordHashParameter.DbType = DbType.String;
                    PasswordHashParameter.Size = 1024;
                    if (PasswordHash != null)
                    {
                        PasswordHashParameter.Value = PasswordHash;
                    }
                    else
                    {
                        PasswordHashParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PasswordHashParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DatePasswordChangedParameter = cmd.CreateParameter();
                    DatePasswordChangedParameter.ParameterName = "DatePasswordChanged";
                    DatePasswordChangedParameter.Direction = ParameterDirection.Input;
                    DatePasswordChangedParameter.DbType = DbType.DateTime;
                    if (DatePasswordChanged.HasValue)
                    {
                        DatePasswordChangedParameter.Value = DatePasswordChanged.Value;
                    }
                    else
                    {
                        DatePasswordChangedParameter.Size = -1;
                        DatePasswordChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DatePasswordChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserUpdateProfile (Guid? AppGuidRef, Guid? UserGuidKey, string UserNameDisplayed, string FirstName, string LastName, string Organization, string PhoneNumber, string SecurityAnswer, string SecurityQuestion, string WebsiteAddress, DateTime? DateProfileChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateProfile";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter OrganizationParameter = cmd.CreateParameter();
                    OrganizationParameter.ParameterName = "Organization";
                    OrganizationParameter.Direction = ParameterDirection.Input;
                    OrganizationParameter.DbType = DbType.String;
                    OrganizationParameter.Size = 128;
                    if (Organization != null)
                    {
                        OrganizationParameter.Value = Organization;
                    }
                    else
                    {
                        OrganizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrganizationParameter);

                    DbParameter PhoneNumberParameter = cmd.CreateParameter();
                    PhoneNumberParameter.ParameterName = "PhoneNumber";
                    PhoneNumberParameter.Direction = ParameterDirection.Input;
                    PhoneNumberParameter.DbType = DbType.String;
                    PhoneNumberParameter.Size = 64;
                    if (PhoneNumber != null)
                    {
                        PhoneNumberParameter.Value = PhoneNumber;
                    }
                    else
                    {
                        PhoneNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PhoneNumberParameter);

                    DbParameter SecurityAnswerParameter = cmd.CreateParameter();
                    SecurityAnswerParameter.ParameterName = "SecurityAnswer";
                    SecurityAnswerParameter.Direction = ParameterDirection.Input;
                    SecurityAnswerParameter.DbType = DbType.String;
                    SecurityAnswerParameter.Size = 64;
                    if (SecurityAnswer != null)
                    {
                        SecurityAnswerParameter.Value = SecurityAnswer;
                    }
                    else
                    {
                        SecurityAnswerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityAnswerParameter);

                    DbParameter SecurityQuestionParameter = cmd.CreateParameter();
                    SecurityQuestionParameter.ParameterName = "SecurityQuestion";
                    SecurityQuestionParameter.Direction = ParameterDirection.Input;
                    SecurityQuestionParameter.DbType = DbType.String;
                    SecurityQuestionParameter.Size = 64;
                    if (SecurityQuestion != null)
                    {
                        SecurityQuestionParameter.Value = SecurityQuestion;
                    }
                    else
                    {
                        SecurityQuestionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityQuestionParameter);

                    DbParameter WebsiteAddressParameter = cmd.CreateParameter();
                    WebsiteAddressParameter.ParameterName = "WebsiteAddress";
                    WebsiteAddressParameter.Direction = ParameterDirection.Input;
                    WebsiteAddressParameter.DbType = DbType.String;
                    WebsiteAddressParameter.Size = 256;
                    if (WebsiteAddress != null)
                    {
                        WebsiteAddressParameter.Value = WebsiteAddress;
                    }
                    else
                    {
                        WebsiteAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WebsiteAddressParameter);

                    DbParameter DateProfileChangedParameter = cmd.CreateParameter();
                    DateProfileChangedParameter.ParameterName = "DateProfileChanged";
                    DateProfileChangedParameter.Direction = ParameterDirection.Input;
                    DateProfileChangedParameter.DbType = DbType.DateTime;
                    if (DateProfileChanged.HasValue)
                    {
                        DateProfileChangedParameter.Value = DateProfileChanged.Value;
                    }
                    else
                    {
                        DateProfileChangedParameter.Size = -1;
                        DateProfileChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateProfileChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserUpdateProfileAsync (Guid? AppGuidRef, Guid? UserGuidKey, string UserNameDisplayed, string FirstName, string LastName, string Organization, string PhoneNumber, string SecurityAnswer, string SecurityQuestion, string WebsiteAddress, DateTime? DateProfileChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateProfile";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter FirstNameParameter = cmd.CreateParameter();
                    FirstNameParameter.ParameterName = "FirstName";
                    FirstNameParameter.Direction = ParameterDirection.Input;
                    FirstNameParameter.DbType = DbType.String;
                    FirstNameParameter.Size = 64;
                    if (FirstName != null)
                    {
                        FirstNameParameter.Value = FirstName;
                    }
                    else
                    {
                        FirstNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FirstNameParameter);

                    DbParameter LastNameParameter = cmd.CreateParameter();
                    LastNameParameter.ParameterName = "LastName";
                    LastNameParameter.Direction = ParameterDirection.Input;
                    LastNameParameter.DbType = DbType.String;
                    LastNameParameter.Size = 64;
                    if (LastName != null)
                    {
                        LastNameParameter.Value = LastName;
                    }
                    else
                    {
                        LastNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LastNameParameter);

                    DbParameter OrganizationParameter = cmd.CreateParameter();
                    OrganizationParameter.ParameterName = "Organization";
                    OrganizationParameter.Direction = ParameterDirection.Input;
                    OrganizationParameter.DbType = DbType.String;
                    OrganizationParameter.Size = 128;
                    if (Organization != null)
                    {
                        OrganizationParameter.Value = Organization;
                    }
                    else
                    {
                        OrganizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrganizationParameter);

                    DbParameter PhoneNumberParameter = cmd.CreateParameter();
                    PhoneNumberParameter.ParameterName = "PhoneNumber";
                    PhoneNumberParameter.Direction = ParameterDirection.Input;
                    PhoneNumberParameter.DbType = DbType.String;
                    PhoneNumberParameter.Size = 64;
                    if (PhoneNumber != null)
                    {
                        PhoneNumberParameter.Value = PhoneNumber;
                    }
                    else
                    {
                        PhoneNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PhoneNumberParameter);

                    DbParameter SecurityAnswerParameter = cmd.CreateParameter();
                    SecurityAnswerParameter.ParameterName = "SecurityAnswer";
                    SecurityAnswerParameter.Direction = ParameterDirection.Input;
                    SecurityAnswerParameter.DbType = DbType.String;
                    SecurityAnswerParameter.Size = 64;
                    if (SecurityAnswer != null)
                    {
                        SecurityAnswerParameter.Value = SecurityAnswer;
                    }
                    else
                    {
                        SecurityAnswerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityAnswerParameter);

                    DbParameter SecurityQuestionParameter = cmd.CreateParameter();
                    SecurityQuestionParameter.ParameterName = "SecurityQuestion";
                    SecurityQuestionParameter.Direction = ParameterDirection.Input;
                    SecurityQuestionParameter.DbType = DbType.String;
                    SecurityQuestionParameter.Size = 64;
                    if (SecurityQuestion != null)
                    {
                        SecurityQuestionParameter.Value = SecurityQuestion;
                    }
                    else
                    {
                        SecurityQuestionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityQuestionParameter);

                    DbParameter WebsiteAddressParameter = cmd.CreateParameter();
                    WebsiteAddressParameter.ParameterName = "WebsiteAddress";
                    WebsiteAddressParameter.Direction = ParameterDirection.Input;
                    WebsiteAddressParameter.DbType = DbType.String;
                    WebsiteAddressParameter.Size = 256;
                    if (WebsiteAddress != null)
                    {
                        WebsiteAddressParameter.Value = WebsiteAddress;
                    }
                    else
                    {
                        WebsiteAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WebsiteAddressParameter);

                    DbParameter DateProfileChangedParameter = cmd.CreateParameter();
                    DateProfileChangedParameter.ParameterName = "DateProfileChanged";
                    DateProfileChangedParameter.Direction = ParameterDirection.Input;
                    DateProfileChangedParameter.DbType = DbType.DateTime;
                    if (DateProfileChanged.HasValue)
                    {
                        DateProfileChangedParameter.Value = DateProfileChanged.Value;
                    }
                    else
                    {
                        DateProfileChangedParameter.Size = -1;
                        DateProfileChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateProfileChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? QebIdentityAppUserUpdateUsername (Guid? AppGuidRef, Guid? UserGuidKey, string UserName, string UserNameDisplayed, string SecurityToken, DateTime? DateTokenExpired, DateTime? DateUserNameChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateUsername";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DateUserNameChangedParameter = cmd.CreateParameter();
                    DateUserNameChangedParameter.ParameterName = "DateUserNameChanged";
                    DateUserNameChangedParameter.Direction = ParameterDirection.Input;
                    DateUserNameChangedParameter.DbType = DbType.DateTime;
                    if (DateUserNameChanged.HasValue)
                    {
                        DateUserNameChangedParameter.Value = DateUserNameChanged.Value;
                    }
                    else
                    {
                        DateUserNameChangedParameter.Size = -1;
                        DateUserNameChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateUserNameChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> QebIdentityAppUserUpdateUsernameAsync (Guid? AppGuidRef, Guid? UserGuidKey, string UserName, string UserNameDisplayed, string SecurityToken, DateTime? DateTokenExpired, DateTime? DateUserNameChanged, DateTime? DateLastEdit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.QebIdentityAppUserUpdateUsername";

                    DbParameter AppGuidRefParameter = cmd.CreateParameter();
                    AppGuidRefParameter.ParameterName = "AppGuidRef";
                    AppGuidRefParameter.Direction = ParameterDirection.Input;
                    AppGuidRefParameter.DbType = DbType.Guid;
                    if (AppGuidRef.HasValue)
                    {
                        AppGuidRefParameter.Value = AppGuidRef.Value;
                    }
                    else
                    {
                        AppGuidRefParameter.Size = -1;
                        AppGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AppGuidRefParameter);

                    DbParameter UserGuidKeyParameter = cmd.CreateParameter();
                    UserGuidKeyParameter.ParameterName = "UserGuidKey";
                    UserGuidKeyParameter.Direction = ParameterDirection.Input;
                    UserGuidKeyParameter.DbType = DbType.Guid;
                    if (UserGuidKey.HasValue)
                    {
                        UserGuidKeyParameter.Value = UserGuidKey.Value;
                    }
                    else
                    {
                        UserGuidKeyParameter.Size = -1;
                        UserGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidKeyParameter);

                    DbParameter UserNameParameter = cmd.CreateParameter();
                    UserNameParameter.ParameterName = "UserName";
                    UserNameParameter.Direction = ParameterDirection.Input;
                    UserNameParameter.DbType = DbType.String;
                    UserNameParameter.Size = 64;
                    if (UserName != null)
                    {
                        UserNameParameter.Value = UserName;
                    }
                    else
                    {
                        UserNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameParameter);

                    DbParameter UserNameDisplayedParameter = cmd.CreateParameter();
                    UserNameDisplayedParameter.ParameterName = "UserNameDisplayed";
                    UserNameDisplayedParameter.Direction = ParameterDirection.Input;
                    UserNameDisplayedParameter.DbType = DbType.String;
                    UserNameDisplayedParameter.Size = 64;
                    if (UserNameDisplayed != null)
                    {
                        UserNameDisplayedParameter.Value = UserNameDisplayed;
                    }
                    else
                    {
                        UserNameDisplayedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserNameDisplayedParameter);

                    DbParameter SecurityTokenParameter = cmd.CreateParameter();
                    SecurityTokenParameter.ParameterName = "SecurityToken";
                    SecurityTokenParameter.Direction = ParameterDirection.Input;
                    SecurityTokenParameter.DbType = DbType.String;
                    SecurityTokenParameter.Size = 64;
                    if (SecurityToken != null)
                    {
                        SecurityTokenParameter.Value = SecurityToken;
                    }
                    else
                    {
                        SecurityTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SecurityTokenParameter);

                    DbParameter DateTokenExpiredParameter = cmd.CreateParameter();
                    DateTokenExpiredParameter.ParameterName = "DateTokenExpired";
                    DateTokenExpiredParameter.Direction = ParameterDirection.Input;
                    DateTokenExpiredParameter.DbType = DbType.DateTime;
                    if (DateTokenExpired.HasValue)
                    {
                        DateTokenExpiredParameter.Value = DateTokenExpired.Value;
                    }
                    else
                    {
                        DateTokenExpiredParameter.Size = -1;
                        DateTokenExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateTokenExpiredParameter);

                    DbParameter DateUserNameChangedParameter = cmd.CreateParameter();
                    DateUserNameChangedParameter.ParameterName = "DateUserNameChanged";
                    DateUserNameChangedParameter.Direction = ParameterDirection.Input;
                    DateUserNameChangedParameter.DbType = DbType.DateTime;
                    if (DateUserNameChanged.HasValue)
                    {
                        DateUserNameChangedParameter.Value = DateUserNameChanged.Value;
                    }
                    else
                    {
                        DateUserNameChangedParameter.Size = -1;
                        DateUserNameChangedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateUserNameChangedParameter);

                    DbParameter DateLastEditParameter = cmd.CreateParameter();
                    DateLastEditParameter.ParameterName = "DateLastEdit";
                    DateLastEditParameter.Direction = ParameterDirection.Input;
                    DateLastEditParameter.DbType = DbType.DateTime;
                    if (DateLastEdit.HasValue)
                    {
                        DateLastEditParameter.Value = DateLastEdit.Value;
                    }
                    else
                    {
                        DateLastEditParameter.Size = -1;
                        DateLastEditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DateLastEditParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<QebIdentityAppRole>(new QebIdentityAppRoleConfiguration());
            modelBuilder.ApplyConfiguration<QebIdentityApp>(new QebIdentityAppConfiguration());
            modelBuilder.ApplyConfiguration<QebIdentityAppUserRole>(new QebIdentityAppUserRoleConfiguration());
            modelBuilder.ApplyConfiguration<QebIdentityAppUser>(new QebIdentityAppUserConfiguration());
            modelBuilder.ApplyConfiguration<QebIdentityAppUserRoleLink>(new QebIdentityAppUserRoleLinkConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
