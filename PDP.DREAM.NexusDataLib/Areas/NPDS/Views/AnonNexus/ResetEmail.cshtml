@model ChangeEmailUxm

@{
  var prc = (PdpRestContext) ViewData["PRC"];
  Layout = prc.RazorMvcLayoutView;
}

@Html.Raw(prc.FormatPageTitle("NPDS/AnonSiaa/ResetEmail"))

<section id="ResetEmailForm">
  @using (Html.BeginForm("ResetEmail", "AnonSiaa", FormMethod.Post, new { area = "NPDS", role = "form", @class = "form-horizontal" }))
  {
    <p>
      To reset your email, please enter your username and then answer the security question.
    </p>
    <div class="form-group">
      @Html.AntiForgeryToken()
      @Html.HiddenFor(m => m.RequireASQ, new { Value = Model.RequireASQ })
      @Html.HiddenFor(m => m.WizardStep, new { Value = Model.WizardStep })
      @Html.ValidationSummary("", new { @class = "text-danger" })
    </div>
    if ((Model.WizardStep == 1) || (Model.WizardStep == 3))
    {
      <div class="form-group">
        @Html.LabelFor(m => m.UserName, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.UserName, new { Value = Model.UserName, @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.UserName, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
    }
    else
    {
      <div class="form-group">
        @Html.HiddenFor(m => m.UserName, new { Value = Model.UserName })
      </div>
    }
    if (Model.WizardStep == 2)
    {
      <div class="form-group">
        @Html.LabelFor(m => m.SecurityQuestion, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.SecurityQuestion, new { Value = Model.SecurityQuestion, @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.SecurityQuestion, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
      <div class="form-group">
        @Html.LabelFor(m => m.SecurityAnswer, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.SecurityAnswer, new { Value = Model.SecurityAnswer, @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.SecurityAnswer, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
    }
    else
    {
      <div class="form-group">
        @Html.HiddenFor(m => m.SecurityQuestion, new { Value = Model.SecurityQuestion })
        @Html.HiddenFor(m => m.SecurityAnswer, new { Value = Model.SecurityAnswer })
      </div>
    }
    if (Model.WizardStep == 3)
    {
      <div class="form-group">
        @Html.LabelFor(m => m.SecurityToken, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.SecurityToken, new { Value = Model.SecurityToken, @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.SecurityToken, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
      <div class="form-group">
        @Html.LabelFor(m => m.NewEmail, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.NewEmail, new { @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.NewEmail, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
      <div class="form-group">
        @Html.LabelFor(m => m.AltEmail, new { @class = "control-label col-md-3" })
        @Html.TextBoxFor(m => m.AltEmail, new { @class = "form-control col-md-3" })
        @Html.ValidationMessageFor(m => m.AltEmail, null, new { @class = "control-label col-md-6 text-danger" })
      </div>
    }
    else
    {
      <div class="form-group">
        @Html.HiddenFor(m => m.SecurityToken, new { Value = Model.SecurityToken })
        @Html.HiddenFor(m => m.NewEmail, new { Value = Model.NewEmail })
      </div>
    }
    <div class="form-group">
      <button type="submit" class="btn btn-default col-md-offset-2 col-md-2">Reset Email</button>
    </div>
  }
</section>

<partial name="_ValidationScripts" />
