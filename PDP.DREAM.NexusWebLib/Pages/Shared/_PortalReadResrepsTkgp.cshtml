@{
  var psrm = (PdpSiteRazorModel)ViewData["PSR"];
  var qurc = (QebiUserRestContext)ViewData["QURC"];
  var NpdsController = "NexusAnonResreps";
  var UtcdtFormat = "{0:yyyy-MM-dd HH:mm}";
  var Numf3Format = "{0:n3}";
}

@Html.Raw(psrm.FormatBodyTitle())

<div id="NpdsGrid">
  @(Html.Kendo().Grid<NexusResrepViewModel>()
  .Name("ResrepRecordGrid").HtmlAttributes(new { style = "float:left;" })
  .DataSource(ds => ds.Ajax().PageSize(5)
  .Model(m => {
  m.Id(p => p.RRRecordGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusResrepRoots", NpdsController,
  new { serviceType = qurc.ServiceType.ToString(),
  serviceTag = qurc.ServiceTag, entityType = qurc.EntityType.ToString() }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
  col.Bound(row => row.RecordHandle).Title("Handle")
  .HeaderHtmlAttributes(new { title = "Resource Record Handle" });
  col.Bound(row => row.RRRecordGuid).Hidden(true)
  ;
  col.Bound(row => row.RRInfosetGuid).Hidden(true)
  ;
  col.Bound(row => row.EntityTypeName).Title("Type")
  .HeaderHtmlAttributes(new { title = "Resource Entity Type" })
  ;
  col.Bound(row => row.EntityName).Title("Name")
  .HeaderHtmlAttributes(new { title = "Resource Entity Name" })
  .HtmlAttributes(new { title = "#=EntityName#" });
  col.Bound(row => row.EntityNature).Title("Nature")
  .HeaderHtmlAttributes(new { title = "Resource Entity Nature" })
  .HtmlAttributes(new { title = "#=EntityNature#" });
  }) // end Columns
  .ToolBar(tb => tb.ClientTemplateId("ResrepRecordToolbar"))
  .ClientDetailTemplateId("ResrepRecordTabStrip")
  .Events(ce => ce.Page("HideStatus").DetailInit("HideStatus").DetailExpand("HideStatus").DetailCollapse("HideStatus"))
  .Pageable(pg => pg.AlwaysVisible(true).Responsive(true).Info(true).Position(GridPagerPosition.Top).ButtonCount(3).PageSizes(new[] { 5, 15, 25, 50, 100 }).Refresh(true))
  .Sortable(st => st.SortMode(GridSortMode.SingleColumn).ShowIndexes(false).AllowUnsort(false))
  .Filterable().Resizable(rs => rs.Columns(true))
  )
</div>

<script id="ResrepRecordToolbar" type="text/x-kendo-template">
  <span id="ResrepRootStatus" class="pdpResrepStatus"></span>
  <span id="ResrepStemStatus" class="pdpResrepStatus"></span>
  <span id="ResrepLeafStatus" class="pdpResrepStatus"></span>
</script>

<script id="ResrepRecordTabStrip" type="text/x-kendo-template">
  @(Html.Kendo().TabStrip().Name("TabStrip#=RRRecordGuid#").Items(itm => {

  itm.Add().Text("EntityLabels").Content(@<text>
        @(Html.Kendo().Grid<EntityLabelViewModel>()
  .Name("EntityLabels#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusEntityLabels", NpdsController,
    new { recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "EntityLabel has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Principal (Canonical)?" });
    col.Bound(row => row.EntityLabelHtml).Title("EntityLabel").Encoded(false)
    .HeaderHtmlAttributes(new { title = "Entity Label derived from LabelUri or from TagToken concatenated with Registry Label" });
    col.Bound(row => row.IsResolvable).Title("Resolvable")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Resolvable? (URI is also URL?)" });
    col.Bound(row => row.IsPrivate).Title("Private")
    .HeaderHtmlAttributes(new { title = "EntityLabel is Private?" });
    col.Bound(row => row.TagToken).Title("TagToken")
    .HeaderHtmlAttributes(new { title = "EntityLabel TagToken" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("SupportingTags").Content(@<text>
        @(Html.Kendo().Grid<SupportingTagViewModel>()
  .Name("SupportingTags#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusSupportingTags", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "SupportingTag has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "SupportingTag is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "SupportingTag is Principal?" });
    col.Bound(row => row.SupportingTag).Title("SupportingTag");
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("SupportingLabels").Content(@<text>
        @(Html.Kendo().Grid<SupportingLabelViewModel>()
  .Name("SupportingLabels#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusSupportingLabels", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "SupportingLabel has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "SupportingLabel is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "SupportingLabel is Principal?" });
    col.Bound(row => row.SupportingLabel).Title("SupportingLabel").Encoded(false);
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("CrossReferences").Content(@<text>
        @(Html.Kendo().Grid<CrossReferenceViewModel>()
  .Name("CrossReferences#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusCrossReferences", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // Datasource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "CrossReference has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "CrossReference is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "CrossReference is Principal?" });
    col.Bound(row => row.CrossReference).Title("CrossReference").Encoded(false);
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("OtherTexts").Content(@<text>
        @(Html.Kendo().Grid<OtherTextViewModel>()
  .Name("OtherTexts#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusOtherTexts", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "OtherText has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "OtherText is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "OtherText is Principal?" });
    col.Bound(row => row.OtherText).Title("OtherText")
    .HeaderHtmlAttributes(new { title = "OtherText in valid XML format" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Locations").Content(@<text>
        @(Html.Kendo().Grid<LocationViewModel>()
  .Name("Locations#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusLocations", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Location has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Location is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Location is Principal?" });
    col.Bound(row => row.Location).Title("Location").Encoded(false);
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Descriptions").Content(@<text>
        @(Html.Kendo().Grid<DescriptionViewModel>()
  .Name("Descriptions#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusDescriptions", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Description has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Description is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Description is Principal?" });
    col.Bound(row => row.Description).Title("Description")
    .HeaderHtmlAttributes(new { title = "Description in valid XML format" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Provenances").Content(@<text>
        @(Html.Kendo().Grid<ProvenanceViewModel>()
  .Name("Provenances#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusProvenances", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Provenance has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Provenance is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Provenance is Principal?" });
    col.Bound(row => row.Provenance).Title("Provenance")
    .HeaderHtmlAttributes(new { title = "Provenance in valid XML format" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("Distributions").Content(@<text>
        @(Html.Kendo().Grid<DistributionViewModel>()
  .Name("Distributions#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusDistributions", NpdsController,
   new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "Distribution has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.IsMarked).Title("Marked")
    .HeaderHtmlAttributes(new { title = "Distribution is Marked?" });
    col.Bound(row => row.IsPrincipal).Title("Principal")
    .HeaderHtmlAttributes(new { title = "Distribution is Principal?" });
    col.Bound(row => row.Distribution).Title("Distribution")
    .HeaderHtmlAttributes(new { title = "Distribution in valid XML format" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);

  itm.Add().Text("FairMetrics").Content(@<text>
        @(Html.Kendo().Grid<FairMetricViewModel>()
  .Name("FairMetrics#=RRRecordGuid#")
  .DataSource(ds => ds.Ajax()
  .Model(m => {
    m.Id(p => p.RRFgroupGuid);
  }) // end Model
  .Read(get => get.Action("SelectNexusFairMetrics", NpdsController,
    new {  recordGuid = "#=RRRecordGuid#", isLimited = "#=InfosetIsUpdaterLimited#" }))
  .Events(e => e.Error("HandleAjaxErrors"))
  ) // end DataSource
  .Columns(col => {
    col.Bound(row => row.RRFgroupGuid).Hidden(true);
    col.Bound(row => row.RRRecordGuid).Hidden(true);
    col.Bound(row => row.HasPriority).Title("Priority")
    .HeaderHtmlAttributes(new { title = "FairMetric has Priority in integer range [0,1,...,255]" })
    ;
    col.Bound(row => row.MInvalidOldClaim).Title("M = Misquoted")
    .HeaderHtmlAttributes(new { title = "Invalid Old Claims" })
    ;
    col.Bound(row => row.QValidOldClaim).Title("Q = Quoted")
    .HeaderHtmlAttributes(new { title = "Valid Old Claims" })
    ;
    col.Bound(row => row.PInvalidNewClaim).Title("P = Plagiarized")
    .HeaderHtmlAttributes(new { title = "Invalid New Claims" })
    ;
    col.Bound(row => row.NValidNewClaim).Title("N = Novel")
    .HeaderHtmlAttributes(new { title = "Valid New Claims" })
    ;
    col.Bound(row => row.FAIR1).Title("F1").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 1 Metric" });
    col.Bound(row => row.FAIR2).Title("F2").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 2 Metric" });
    col.Bound(row => row.FAIR3).Title("F3").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 3 Metric" });
    col.Bound(row => row.FAIR4).Title("F4").Format(Numf3Format)
    .HeaderHtmlAttributes(new { title = "FAIR 4 Metric" });
    col.Bound(row => row.UpdatedOn).Title("UpdatedOn").Format(UtcdtFormat)
    .HtmlAttributes(new { title = "Updated on date" });
  }) // end Columns
  .Pageable(pg => pg.Refresh(true)).Sortable()
  .ToClientTemplate()) </text>);


  }).SelectedIndex(0).ToClientTemplate()
  )
</script>

<script type="text/javascript">
  $(document).ready(function () {
    $("#NpdsGrid").show();
    $("#ResrepRecordGrid").data("kendoGrid").resize();
  })
  function HideStatus(e) {
    $("span#ResrepRootStatus").hide();
    $("span#ResrepStemStatus").hide();
  }
  function ResizeGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.resize();
  }
  function RefreshGrid(e) {
    var grid = $(this).closest(".k-grid").data("kendoGrid");
    grid.dataSource.read();
  }
  function HandleJsonErrors(e) {
    // alert(e.xhr.responseText);
    var msg = $.parseJSON(e.xhr.responseText);
    if (msg) {
      alert("Errors:\n" + msg.join("\n"));
    }
  }
  function HandleAjaxErrors(e) {
    if (e.errors) {
      var message = "Errors:\n";
      $.each(e.errors, function (key, value) {
        if ('errors' in value) {
          $.each(value.errors, function () {
            message += this + "\n";
          });
        }
      });
      alert(message);
    }
  }
</script>
