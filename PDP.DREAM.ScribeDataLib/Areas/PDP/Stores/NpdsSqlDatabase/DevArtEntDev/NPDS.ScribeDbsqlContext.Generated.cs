//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2021-06-07 21:46:31
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PDP.DREAM.NpdsDataLib.Stores.NpdsSqlDatabase
{

    [GeneratedCode("Devart Entity Developer", "")]
    public partial class ScribeDbsqlContext : PDP.DREAM.NpdsDataLib.Stores.NpdsSqlDatabase.NexusDbsqlContext
    {

        public ScribeDbsqlContext() :
            base()
        {
            OnCreated();
        }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=.\SQLD2019;Initial Catalog=PdpScribe10;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        #region Methods

        public int? ScribeSupportingTagDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingTagDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeSupportingTagDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingTagDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeSupportingLabelDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingLabelDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeSupportingLabelDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingLabelDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeCrossReferenceDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeCrossReferenceDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeOtherTextDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeOtherTextDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeOtherTextDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeOtherTextDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeDescriptionDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDescriptionDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeDescriptionDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDescriptionDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeDistributionDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDistributionDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeDistributionDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDistributionDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeProvenanceDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeProvenanceDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeProvenanceDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeProvenanceDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeFairMetricDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeFairMetricDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeFairMetricDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeFairMetricDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeLocationDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeLocationDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeLocationDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeLocationDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepStatusCountsUpdate (Guid? AgentGuidRef, Guid? RecordGuidRef, short? ResrepEntityStatusCode, short? ResrepRecordStatusCode, short? ResrepInfosetStatusCode, short? EntityLabelsStatusCode, short? SupportingTagsStatusCode, short? SupportingLabelsStatusCode, short? CrossReferencesStatusCode, short? OtherTextsStatusCode, short? LocationsStatusCode, short? DescriptionsStatusCode, short? ProvenancesStatusCode, short? DistributionsStatusCode, short? FairMetricsStatusCode, short? NexusSnapshotsStatusCode, short? InfosetPortalStatusCode, short? InfosetDoorsStatusCode)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStatusCountsUpdate";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter ResrepEntityStatusCodeParameter = cmd.CreateParameter();
                    ResrepEntityStatusCodeParameter.ParameterName = "ResrepEntityStatusCode";
                    ResrepEntityStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepEntityStatusCodeParameter.DbType = DbType.Int16;
                    ResrepEntityStatusCodeParameter.Precision = 5;
                    ResrepEntityStatusCodeParameter.Scale = 0;
                    if (ResrepEntityStatusCode.HasValue)
                    {
                        ResrepEntityStatusCodeParameter.Value = ResrepEntityStatusCode.Value;
                    }
                    else
                    {
                        ResrepEntityStatusCodeParameter.Size = -1;
                        ResrepEntityStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepEntityStatusCodeParameter);

                    DbParameter ResrepRecordStatusCodeParameter = cmd.CreateParameter();
                    ResrepRecordStatusCodeParameter.ParameterName = "ResrepRecordStatusCode";
                    ResrepRecordStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepRecordStatusCodeParameter.DbType = DbType.Int16;
                    ResrepRecordStatusCodeParameter.Precision = 5;
                    ResrepRecordStatusCodeParameter.Scale = 0;
                    if (ResrepRecordStatusCode.HasValue)
                    {
                        ResrepRecordStatusCodeParameter.Value = ResrepRecordStatusCode.Value;
                    }
                    else
                    {
                        ResrepRecordStatusCodeParameter.Size = -1;
                        ResrepRecordStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepRecordStatusCodeParameter);

                    DbParameter ResrepInfosetStatusCodeParameter = cmd.CreateParameter();
                    ResrepInfosetStatusCodeParameter.ParameterName = "ResrepInfosetStatusCode";
                    ResrepInfosetStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepInfosetStatusCodeParameter.DbType = DbType.Int16;
                    ResrepInfosetStatusCodeParameter.Precision = 5;
                    ResrepInfosetStatusCodeParameter.Scale = 0;
                    if (ResrepInfosetStatusCode.HasValue)
                    {
                        ResrepInfosetStatusCodeParameter.Value = ResrepInfosetStatusCode.Value;
                    }
                    else
                    {
                        ResrepInfosetStatusCodeParameter.Size = -1;
                        ResrepInfosetStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepInfosetStatusCodeParameter);

                    DbParameter EntityLabelsStatusCodeParameter = cmd.CreateParameter();
                    EntityLabelsStatusCodeParameter.ParameterName = "EntityLabelsStatusCode";
                    EntityLabelsStatusCodeParameter.Direction = ParameterDirection.Input;
                    EntityLabelsStatusCodeParameter.DbType = DbType.Int16;
                    EntityLabelsStatusCodeParameter.Precision = 5;
                    EntityLabelsStatusCodeParameter.Scale = 0;
                    if (EntityLabelsStatusCode.HasValue)
                    {
                        EntityLabelsStatusCodeParameter.Value = EntityLabelsStatusCode.Value;
                    }
                    else
                    {
                        EntityLabelsStatusCodeParameter.Size = -1;
                        EntityLabelsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityLabelsStatusCodeParameter);

                    DbParameter SupportingTagsStatusCodeParameter = cmd.CreateParameter();
                    SupportingTagsStatusCodeParameter.ParameterName = "SupportingTagsStatusCode";
                    SupportingTagsStatusCodeParameter.Direction = ParameterDirection.Input;
                    SupportingTagsStatusCodeParameter.DbType = DbType.Int16;
                    SupportingTagsStatusCodeParameter.Precision = 5;
                    SupportingTagsStatusCodeParameter.Scale = 0;
                    if (SupportingTagsStatusCode.HasValue)
                    {
                        SupportingTagsStatusCodeParameter.Value = SupportingTagsStatusCode.Value;
                    }
                    else
                    {
                        SupportingTagsStatusCodeParameter.Size = -1;
                        SupportingTagsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingTagsStatusCodeParameter);

                    DbParameter SupportingLabelsStatusCodeParameter = cmd.CreateParameter();
                    SupportingLabelsStatusCodeParameter.ParameterName = "SupportingLabelsStatusCode";
                    SupportingLabelsStatusCodeParameter.Direction = ParameterDirection.Input;
                    SupportingLabelsStatusCodeParameter.DbType = DbType.Int16;
                    SupportingLabelsStatusCodeParameter.Precision = 5;
                    SupportingLabelsStatusCodeParameter.Scale = 0;
                    if (SupportingLabelsStatusCode.HasValue)
                    {
                        SupportingLabelsStatusCodeParameter.Value = SupportingLabelsStatusCode.Value;
                    }
                    else
                    {
                        SupportingLabelsStatusCodeParameter.Size = -1;
                        SupportingLabelsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingLabelsStatusCodeParameter);

                    DbParameter CrossReferencesStatusCodeParameter = cmd.CreateParameter();
                    CrossReferencesStatusCodeParameter.ParameterName = "CrossReferencesStatusCode";
                    CrossReferencesStatusCodeParameter.Direction = ParameterDirection.Input;
                    CrossReferencesStatusCodeParameter.DbType = DbType.Int16;
                    CrossReferencesStatusCodeParameter.Precision = 5;
                    CrossReferencesStatusCodeParameter.Scale = 0;
                    if (CrossReferencesStatusCode.HasValue)
                    {
                        CrossReferencesStatusCodeParameter.Value = CrossReferencesStatusCode.Value;
                    }
                    else
                    {
                        CrossReferencesStatusCodeParameter.Size = -1;
                        CrossReferencesStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CrossReferencesStatusCodeParameter);

                    DbParameter OtherTextsStatusCodeParameter = cmd.CreateParameter();
                    OtherTextsStatusCodeParameter.ParameterName = "OtherTextsStatusCode";
                    OtherTextsStatusCodeParameter.Direction = ParameterDirection.Input;
                    OtherTextsStatusCodeParameter.DbType = DbType.Int16;
                    OtherTextsStatusCodeParameter.Precision = 5;
                    OtherTextsStatusCodeParameter.Scale = 0;
                    if (OtherTextsStatusCode.HasValue)
                    {
                        OtherTextsStatusCodeParameter.Value = OtherTextsStatusCode.Value;
                    }
                    else
                    {
                        OtherTextsStatusCodeParameter.Size = -1;
                        OtherTextsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OtherTextsStatusCodeParameter);

                    DbParameter LocationsStatusCodeParameter = cmd.CreateParameter();
                    LocationsStatusCodeParameter.ParameterName = "LocationsStatusCode";
                    LocationsStatusCodeParameter.Direction = ParameterDirection.Input;
                    LocationsStatusCodeParameter.DbType = DbType.Int16;
                    LocationsStatusCodeParameter.Precision = 5;
                    LocationsStatusCodeParameter.Scale = 0;
                    if (LocationsStatusCode.HasValue)
                    {
                        LocationsStatusCodeParameter.Value = LocationsStatusCode.Value;
                    }
                    else
                    {
                        LocationsStatusCodeParameter.Size = -1;
                        LocationsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LocationsStatusCodeParameter);

                    DbParameter DescriptionsStatusCodeParameter = cmd.CreateParameter();
                    DescriptionsStatusCodeParameter.ParameterName = "DescriptionsStatusCode";
                    DescriptionsStatusCodeParameter.Direction = ParameterDirection.Input;
                    DescriptionsStatusCodeParameter.DbType = DbType.Int16;
                    DescriptionsStatusCodeParameter.Precision = 5;
                    DescriptionsStatusCodeParameter.Scale = 0;
                    if (DescriptionsStatusCode.HasValue)
                    {
                        DescriptionsStatusCodeParameter.Value = DescriptionsStatusCode.Value;
                    }
                    else
                    {
                        DescriptionsStatusCodeParameter.Size = -1;
                        DescriptionsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DescriptionsStatusCodeParameter);

                    DbParameter ProvenancesStatusCodeParameter = cmd.CreateParameter();
                    ProvenancesStatusCodeParameter.ParameterName = "ProvenancesStatusCode";
                    ProvenancesStatusCodeParameter.Direction = ParameterDirection.Input;
                    ProvenancesStatusCodeParameter.DbType = DbType.Int16;
                    ProvenancesStatusCodeParameter.Precision = 5;
                    ProvenancesStatusCodeParameter.Scale = 0;
                    if (ProvenancesStatusCode.HasValue)
                    {
                        ProvenancesStatusCodeParameter.Value = ProvenancesStatusCode.Value;
                    }
                    else
                    {
                        ProvenancesStatusCodeParameter.Size = -1;
                        ProvenancesStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProvenancesStatusCodeParameter);

                    DbParameter DistributionsStatusCodeParameter = cmd.CreateParameter();
                    DistributionsStatusCodeParameter.ParameterName = "DistributionsStatusCode";
                    DistributionsStatusCodeParameter.Direction = ParameterDirection.Input;
                    DistributionsStatusCodeParameter.DbType = DbType.Int16;
                    DistributionsStatusCodeParameter.Precision = 5;
                    DistributionsStatusCodeParameter.Scale = 0;
                    if (DistributionsStatusCode.HasValue)
                    {
                        DistributionsStatusCodeParameter.Value = DistributionsStatusCode.Value;
                    }
                    else
                    {
                        DistributionsStatusCodeParameter.Size = -1;
                        DistributionsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DistributionsStatusCodeParameter);

                    DbParameter FairMetricsStatusCodeParameter = cmd.CreateParameter();
                    FairMetricsStatusCodeParameter.ParameterName = "FairMetricsStatusCode";
                    FairMetricsStatusCodeParameter.Direction = ParameterDirection.Input;
                    FairMetricsStatusCodeParameter.DbType = DbType.Int16;
                    FairMetricsStatusCodeParameter.Precision = 5;
                    FairMetricsStatusCodeParameter.Scale = 0;
                    if (FairMetricsStatusCode.HasValue)
                    {
                        FairMetricsStatusCodeParameter.Value = FairMetricsStatusCode.Value;
                    }
                    else
                    {
                        FairMetricsStatusCodeParameter.Size = -1;
                        FairMetricsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FairMetricsStatusCodeParameter);

                    DbParameter NexusSnapshotsStatusCodeParameter = cmd.CreateParameter();
                    NexusSnapshotsStatusCodeParameter.ParameterName = "NexusSnapshotsStatusCode";
                    NexusSnapshotsStatusCodeParameter.Direction = ParameterDirection.Input;
                    NexusSnapshotsStatusCodeParameter.DbType = DbType.Int16;
                    NexusSnapshotsStatusCodeParameter.Precision = 5;
                    NexusSnapshotsStatusCodeParameter.Scale = 0;
                    if (NexusSnapshotsStatusCode.HasValue)
                    {
                        NexusSnapshotsStatusCodeParameter.Value = NexusSnapshotsStatusCode.Value;
                    }
                    else
                    {
                        NexusSnapshotsStatusCodeParameter.Size = -1;
                        NexusSnapshotsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(NexusSnapshotsStatusCodeParameter);

                    DbParameter InfosetPortalStatusCodeParameter = cmd.CreateParameter();
                    InfosetPortalStatusCodeParameter.ParameterName = "InfosetPortalStatusCode";
                    InfosetPortalStatusCodeParameter.Direction = ParameterDirection.Input;
                    InfosetPortalStatusCodeParameter.DbType = DbType.Int16;
                    InfosetPortalStatusCodeParameter.Precision = 5;
                    InfosetPortalStatusCodeParameter.Scale = 0;
                    if (InfosetPortalStatusCode.HasValue)
                    {
                        InfosetPortalStatusCodeParameter.Value = InfosetPortalStatusCode.Value;
                    }
                    else
                    {
                        InfosetPortalStatusCodeParameter.Size = -1;
                        InfosetPortalStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetPortalStatusCodeParameter);

                    DbParameter InfosetDoorsStatusCodeParameter = cmd.CreateParameter();
                    InfosetDoorsStatusCodeParameter.ParameterName = "InfosetDoorsStatusCode";
                    InfosetDoorsStatusCodeParameter.Direction = ParameterDirection.Input;
                    InfosetDoorsStatusCodeParameter.DbType = DbType.Int16;
                    InfosetDoorsStatusCodeParameter.Precision = 5;
                    InfosetDoorsStatusCodeParameter.Scale = 0;
                    if (InfosetDoorsStatusCode.HasValue)
                    {
                        InfosetDoorsStatusCodeParameter.Value = InfosetDoorsStatusCode.Value;
                    }
                    else
                    {
                        InfosetDoorsStatusCodeParameter.Size = -1;
                        InfosetDoorsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetDoorsStatusCodeParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepStatusCountsUpdateAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, short? ResrepEntityStatusCode, short? ResrepRecordStatusCode, short? ResrepInfosetStatusCode, short? EntityLabelsStatusCode, short? SupportingTagsStatusCode, short? SupportingLabelsStatusCode, short? CrossReferencesStatusCode, short? OtherTextsStatusCode, short? LocationsStatusCode, short? DescriptionsStatusCode, short? ProvenancesStatusCode, short? DistributionsStatusCode, short? FairMetricsStatusCode, short? NexusSnapshotsStatusCode, short? InfosetPortalStatusCode, short? InfosetDoorsStatusCode)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStatusCountsUpdate";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter ResrepEntityStatusCodeParameter = cmd.CreateParameter();
                    ResrepEntityStatusCodeParameter.ParameterName = "ResrepEntityStatusCode";
                    ResrepEntityStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepEntityStatusCodeParameter.DbType = DbType.Int16;
                    ResrepEntityStatusCodeParameter.Precision = 5;
                    ResrepEntityStatusCodeParameter.Scale = 0;
                    if (ResrepEntityStatusCode.HasValue)
                    {
                        ResrepEntityStatusCodeParameter.Value = ResrepEntityStatusCode.Value;
                    }
                    else
                    {
                        ResrepEntityStatusCodeParameter.Size = -1;
                        ResrepEntityStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepEntityStatusCodeParameter);

                    DbParameter ResrepRecordStatusCodeParameter = cmd.CreateParameter();
                    ResrepRecordStatusCodeParameter.ParameterName = "ResrepRecordStatusCode";
                    ResrepRecordStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepRecordStatusCodeParameter.DbType = DbType.Int16;
                    ResrepRecordStatusCodeParameter.Precision = 5;
                    ResrepRecordStatusCodeParameter.Scale = 0;
                    if (ResrepRecordStatusCode.HasValue)
                    {
                        ResrepRecordStatusCodeParameter.Value = ResrepRecordStatusCode.Value;
                    }
                    else
                    {
                        ResrepRecordStatusCodeParameter.Size = -1;
                        ResrepRecordStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepRecordStatusCodeParameter);

                    DbParameter ResrepInfosetStatusCodeParameter = cmd.CreateParameter();
                    ResrepInfosetStatusCodeParameter.ParameterName = "ResrepInfosetStatusCode";
                    ResrepInfosetStatusCodeParameter.Direction = ParameterDirection.Input;
                    ResrepInfosetStatusCodeParameter.DbType = DbType.Int16;
                    ResrepInfosetStatusCodeParameter.Precision = 5;
                    ResrepInfosetStatusCodeParameter.Scale = 0;
                    if (ResrepInfosetStatusCode.HasValue)
                    {
                        ResrepInfosetStatusCodeParameter.Value = ResrepInfosetStatusCode.Value;
                    }
                    else
                    {
                        ResrepInfosetStatusCodeParameter.Size = -1;
                        ResrepInfosetStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepInfosetStatusCodeParameter);

                    DbParameter EntityLabelsStatusCodeParameter = cmd.CreateParameter();
                    EntityLabelsStatusCodeParameter.ParameterName = "EntityLabelsStatusCode";
                    EntityLabelsStatusCodeParameter.Direction = ParameterDirection.Input;
                    EntityLabelsStatusCodeParameter.DbType = DbType.Int16;
                    EntityLabelsStatusCodeParameter.Precision = 5;
                    EntityLabelsStatusCodeParameter.Scale = 0;
                    if (EntityLabelsStatusCode.HasValue)
                    {
                        EntityLabelsStatusCodeParameter.Value = EntityLabelsStatusCode.Value;
                    }
                    else
                    {
                        EntityLabelsStatusCodeParameter.Size = -1;
                        EntityLabelsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityLabelsStatusCodeParameter);

                    DbParameter SupportingTagsStatusCodeParameter = cmd.CreateParameter();
                    SupportingTagsStatusCodeParameter.ParameterName = "SupportingTagsStatusCode";
                    SupportingTagsStatusCodeParameter.Direction = ParameterDirection.Input;
                    SupportingTagsStatusCodeParameter.DbType = DbType.Int16;
                    SupportingTagsStatusCodeParameter.Precision = 5;
                    SupportingTagsStatusCodeParameter.Scale = 0;
                    if (SupportingTagsStatusCode.HasValue)
                    {
                        SupportingTagsStatusCodeParameter.Value = SupportingTagsStatusCode.Value;
                    }
                    else
                    {
                        SupportingTagsStatusCodeParameter.Size = -1;
                        SupportingTagsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingTagsStatusCodeParameter);

                    DbParameter SupportingLabelsStatusCodeParameter = cmd.CreateParameter();
                    SupportingLabelsStatusCodeParameter.ParameterName = "SupportingLabelsStatusCode";
                    SupportingLabelsStatusCodeParameter.Direction = ParameterDirection.Input;
                    SupportingLabelsStatusCodeParameter.DbType = DbType.Int16;
                    SupportingLabelsStatusCodeParameter.Precision = 5;
                    SupportingLabelsStatusCodeParameter.Scale = 0;
                    if (SupportingLabelsStatusCode.HasValue)
                    {
                        SupportingLabelsStatusCodeParameter.Value = SupportingLabelsStatusCode.Value;
                    }
                    else
                    {
                        SupportingLabelsStatusCodeParameter.Size = -1;
                        SupportingLabelsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingLabelsStatusCodeParameter);

                    DbParameter CrossReferencesStatusCodeParameter = cmd.CreateParameter();
                    CrossReferencesStatusCodeParameter.ParameterName = "CrossReferencesStatusCode";
                    CrossReferencesStatusCodeParameter.Direction = ParameterDirection.Input;
                    CrossReferencesStatusCodeParameter.DbType = DbType.Int16;
                    CrossReferencesStatusCodeParameter.Precision = 5;
                    CrossReferencesStatusCodeParameter.Scale = 0;
                    if (CrossReferencesStatusCode.HasValue)
                    {
                        CrossReferencesStatusCodeParameter.Value = CrossReferencesStatusCode.Value;
                    }
                    else
                    {
                        CrossReferencesStatusCodeParameter.Size = -1;
                        CrossReferencesStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CrossReferencesStatusCodeParameter);

                    DbParameter OtherTextsStatusCodeParameter = cmd.CreateParameter();
                    OtherTextsStatusCodeParameter.ParameterName = "OtherTextsStatusCode";
                    OtherTextsStatusCodeParameter.Direction = ParameterDirection.Input;
                    OtherTextsStatusCodeParameter.DbType = DbType.Int16;
                    OtherTextsStatusCodeParameter.Precision = 5;
                    OtherTextsStatusCodeParameter.Scale = 0;
                    if (OtherTextsStatusCode.HasValue)
                    {
                        OtherTextsStatusCodeParameter.Value = OtherTextsStatusCode.Value;
                    }
                    else
                    {
                        OtherTextsStatusCodeParameter.Size = -1;
                        OtherTextsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OtherTextsStatusCodeParameter);

                    DbParameter LocationsStatusCodeParameter = cmd.CreateParameter();
                    LocationsStatusCodeParameter.ParameterName = "LocationsStatusCode";
                    LocationsStatusCodeParameter.Direction = ParameterDirection.Input;
                    LocationsStatusCodeParameter.DbType = DbType.Int16;
                    LocationsStatusCodeParameter.Precision = 5;
                    LocationsStatusCodeParameter.Scale = 0;
                    if (LocationsStatusCode.HasValue)
                    {
                        LocationsStatusCodeParameter.Value = LocationsStatusCode.Value;
                    }
                    else
                    {
                        LocationsStatusCodeParameter.Size = -1;
                        LocationsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LocationsStatusCodeParameter);

                    DbParameter DescriptionsStatusCodeParameter = cmd.CreateParameter();
                    DescriptionsStatusCodeParameter.ParameterName = "DescriptionsStatusCode";
                    DescriptionsStatusCodeParameter.Direction = ParameterDirection.Input;
                    DescriptionsStatusCodeParameter.DbType = DbType.Int16;
                    DescriptionsStatusCodeParameter.Precision = 5;
                    DescriptionsStatusCodeParameter.Scale = 0;
                    if (DescriptionsStatusCode.HasValue)
                    {
                        DescriptionsStatusCodeParameter.Value = DescriptionsStatusCode.Value;
                    }
                    else
                    {
                        DescriptionsStatusCodeParameter.Size = -1;
                        DescriptionsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DescriptionsStatusCodeParameter);

                    DbParameter ProvenancesStatusCodeParameter = cmd.CreateParameter();
                    ProvenancesStatusCodeParameter.ParameterName = "ProvenancesStatusCode";
                    ProvenancesStatusCodeParameter.Direction = ParameterDirection.Input;
                    ProvenancesStatusCodeParameter.DbType = DbType.Int16;
                    ProvenancesStatusCodeParameter.Precision = 5;
                    ProvenancesStatusCodeParameter.Scale = 0;
                    if (ProvenancesStatusCode.HasValue)
                    {
                        ProvenancesStatusCodeParameter.Value = ProvenancesStatusCode.Value;
                    }
                    else
                    {
                        ProvenancesStatusCodeParameter.Size = -1;
                        ProvenancesStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProvenancesStatusCodeParameter);

                    DbParameter DistributionsStatusCodeParameter = cmd.CreateParameter();
                    DistributionsStatusCodeParameter.ParameterName = "DistributionsStatusCode";
                    DistributionsStatusCodeParameter.Direction = ParameterDirection.Input;
                    DistributionsStatusCodeParameter.DbType = DbType.Int16;
                    DistributionsStatusCodeParameter.Precision = 5;
                    DistributionsStatusCodeParameter.Scale = 0;
                    if (DistributionsStatusCode.HasValue)
                    {
                        DistributionsStatusCodeParameter.Value = DistributionsStatusCode.Value;
                    }
                    else
                    {
                        DistributionsStatusCodeParameter.Size = -1;
                        DistributionsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DistributionsStatusCodeParameter);

                    DbParameter FairMetricsStatusCodeParameter = cmd.CreateParameter();
                    FairMetricsStatusCodeParameter.ParameterName = "FairMetricsStatusCode";
                    FairMetricsStatusCodeParameter.Direction = ParameterDirection.Input;
                    FairMetricsStatusCodeParameter.DbType = DbType.Int16;
                    FairMetricsStatusCodeParameter.Precision = 5;
                    FairMetricsStatusCodeParameter.Scale = 0;
                    if (FairMetricsStatusCode.HasValue)
                    {
                        FairMetricsStatusCodeParameter.Value = FairMetricsStatusCode.Value;
                    }
                    else
                    {
                        FairMetricsStatusCodeParameter.Size = -1;
                        FairMetricsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FairMetricsStatusCodeParameter);

                    DbParameter NexusSnapshotsStatusCodeParameter = cmd.CreateParameter();
                    NexusSnapshotsStatusCodeParameter.ParameterName = "NexusSnapshotsStatusCode";
                    NexusSnapshotsStatusCodeParameter.Direction = ParameterDirection.Input;
                    NexusSnapshotsStatusCodeParameter.DbType = DbType.Int16;
                    NexusSnapshotsStatusCodeParameter.Precision = 5;
                    NexusSnapshotsStatusCodeParameter.Scale = 0;
                    if (NexusSnapshotsStatusCode.HasValue)
                    {
                        NexusSnapshotsStatusCodeParameter.Value = NexusSnapshotsStatusCode.Value;
                    }
                    else
                    {
                        NexusSnapshotsStatusCodeParameter.Size = -1;
                        NexusSnapshotsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(NexusSnapshotsStatusCodeParameter);

                    DbParameter InfosetPortalStatusCodeParameter = cmd.CreateParameter();
                    InfosetPortalStatusCodeParameter.ParameterName = "InfosetPortalStatusCode";
                    InfosetPortalStatusCodeParameter.Direction = ParameterDirection.Input;
                    InfosetPortalStatusCodeParameter.DbType = DbType.Int16;
                    InfosetPortalStatusCodeParameter.Precision = 5;
                    InfosetPortalStatusCodeParameter.Scale = 0;
                    if (InfosetPortalStatusCode.HasValue)
                    {
                        InfosetPortalStatusCodeParameter.Value = InfosetPortalStatusCode.Value;
                    }
                    else
                    {
                        InfosetPortalStatusCodeParameter.Size = -1;
                        InfosetPortalStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetPortalStatusCodeParameter);

                    DbParameter InfosetDoorsStatusCodeParameter = cmd.CreateParameter();
                    InfosetDoorsStatusCodeParameter.ParameterName = "InfosetDoorsStatusCode";
                    InfosetDoorsStatusCodeParameter.Direction = ParameterDirection.Input;
                    InfosetDoorsStatusCodeParameter.DbType = DbType.Int16;
                    InfosetDoorsStatusCodeParameter.Precision = 5;
                    InfosetDoorsStatusCodeParameter.Scale = 0;
                    if (InfosetDoorsStatusCode.HasValue)
                    {
                        InfosetDoorsStatusCodeParameter.Value = InfosetDoorsStatusCode.Value;
                    }
                    else
                    {
                        InfosetDoorsStatusCodeParameter.Size = -1;
                        InfosetDoorsStatusCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetDoorsStatusCodeParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeEntityLabelDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeEntityLabelDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeEntityLabelDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeEntityLabelDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepSnapshotDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepSnapshotDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepSnapshotDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepSnapshotDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepStemDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStemDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepStemDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStemDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepRootDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepRootDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepRootDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepRootDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepAuthorRequestDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepAuthorRequestDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepAuthorRequestDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepAuthorRequestDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceRestrictionAndDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionAndDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidKeyParameter = cmd.CreateParameter();
                    RestrictionAndGuidKeyParameter.ParameterName = "RestrictionAndGuidKey";
                    RestrictionAndGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidKey.HasValue)
                    {
                        RestrictionAndGuidKeyParameter.Value = RestrictionAndGuidKey.Value;
                    }
                    else
                    {
                        RestrictionAndGuidKeyParameter.Size = -1;
                        RestrictionAndGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceRestrictionAndDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionAndDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidKeyParameter = cmd.CreateParameter();
                    RestrictionAndGuidKeyParameter.ParameterName = "RestrictionAndGuidKey";
                    RestrictionAndGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidKey.HasValue)
                    {
                        RestrictionAndGuidKeyParameter.Value = RestrictionAndGuidKey.Value;
                    }
                    else
                    {
                        RestrictionAndGuidKeyParameter.Size = -1;
                        RestrictionAndGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceRestrictionOrDelete (Guid? AgentGuidRef, Guid? ResourceGuidRef, Guid? RestrictionAndGuidRef, Guid? RestrictionOrGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionOrDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter ResourceGuidRefParameter = cmd.CreateParameter();
                    ResourceGuidRefParameter.ParameterName = "ResourceGuidRef";
                    ResourceGuidRefParameter.Direction = ParameterDirection.Input;
                    ResourceGuidRefParameter.DbType = DbType.Guid;
                    if (ResourceGuidRef.HasValue)
                    {
                        ResourceGuidRefParameter.Value = ResourceGuidRef.Value;
                    }
                    else
                    {
                        ResourceGuidRefParameter.Size = -1;
                        ResourceGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResourceGuidRefParameter);

                    DbParameter RestrictionAndGuidRefParameter = cmd.CreateParameter();
                    RestrictionAndGuidRefParameter.ParameterName = "RestrictionAndGuidRef";
                    RestrictionAndGuidRefParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidRefParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidRef.HasValue)
                    {
                        RestrictionAndGuidRefParameter.Value = RestrictionAndGuidRef.Value;
                    }
                    else
                    {
                        RestrictionAndGuidRefParameter.Size = -1;
                        RestrictionAndGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidRefParameter);

                    DbParameter RestrictionOrGuidKeyParameter = cmd.CreateParameter();
                    RestrictionOrGuidKeyParameter.ParameterName = "RestrictionOrGuidKey";
                    RestrictionOrGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionOrGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionOrGuidKey.HasValue)
                    {
                        RestrictionOrGuidKeyParameter.Value = RestrictionOrGuidKey.Value;
                    }
                    else
                    {
                        RestrictionOrGuidKeyParameter.Size = -1;
                        RestrictionOrGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceRestrictionOrDeleteAsync (Guid? AgentGuidRef, Guid? ResourceGuidRef, Guid? RestrictionAndGuidRef, Guid? RestrictionOrGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionOrDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter ResourceGuidRefParameter = cmd.CreateParameter();
                    ResourceGuidRefParameter.ParameterName = "ResourceGuidRef";
                    ResourceGuidRefParameter.Direction = ParameterDirection.Input;
                    ResourceGuidRefParameter.DbType = DbType.Guid;
                    if (ResourceGuidRef.HasValue)
                    {
                        ResourceGuidRefParameter.Value = ResourceGuidRef.Value;
                    }
                    else
                    {
                        ResourceGuidRefParameter.Size = -1;
                        ResourceGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResourceGuidRefParameter);

                    DbParameter RestrictionAndGuidRefParameter = cmd.CreateParameter();
                    RestrictionAndGuidRefParameter.ParameterName = "RestrictionAndGuidRef";
                    RestrictionAndGuidRefParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidRefParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidRef.HasValue)
                    {
                        RestrictionAndGuidRefParameter.Value = RestrictionAndGuidRef.Value;
                    }
                    else
                    {
                        RestrictionAndGuidRefParameter.Size = -1;
                        RestrictionAndGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidRefParameter);

                    DbParameter RestrictionOrGuidKeyParameter = cmd.CreateParameter();
                    RestrictionOrGuidKeyParameter.ParameterName = "RestrictionOrGuidKey";
                    RestrictionOrGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionOrGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionOrGuidKey.HasValue)
                    {
                        RestrictionOrGuidKeyParameter.Value = RestrictionOrGuidKey.Value;
                    }
                    else
                    {
                        RestrictionOrGuidKeyParameter.Size = -1;
                        RestrictionOrGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceEditorRequestDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceEditorRequestDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceEditorRequestDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceEditorRequestDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceNpdsDefaultDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceNpdsDefaultDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceNpdsDefaultDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceNpdsDefaultDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceEditorRequestEdit (Guid? AccessRequestedForAgentGuidRef, Guid? AccessRequestedByAgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? RequestIsApproved, bool? RequestIsDenied)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceEditorRequestEdit";

                    DbParameter AccessRequestedForAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedForAgentGuidRefParameter.ParameterName = "AccessRequestedForAgentGuidRef";
                    AccessRequestedForAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedForAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedForAgentGuidRef.HasValue)
                    {
                        AccessRequestedForAgentGuidRefParameter.Value = AccessRequestedForAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedForAgentGuidRefParameter.Size = -1;
                        AccessRequestedForAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedForAgentGuidRefParameter);

                    DbParameter AccessRequestedByAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedByAgentGuidRefParameter.ParameterName = "AccessRequestedByAgentGuidRef";
                    AccessRequestedByAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedByAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedByAgentGuidRef.HasValue)
                    {
                        AccessRequestedByAgentGuidRefParameter.Value = AccessRequestedByAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedByAgentGuidRefParameter.Size = -1;
                        AccessRequestedByAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedByAgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter RequestIsApprovedParameter = cmd.CreateParameter();
                    RequestIsApprovedParameter.ParameterName = "RequestIsApproved";
                    RequestIsApprovedParameter.Direction = ParameterDirection.Input;
                    RequestIsApprovedParameter.DbType = DbType.Boolean;
                    if (RequestIsApproved.HasValue)
                    {
                        RequestIsApprovedParameter.Value = RequestIsApproved.Value;
                    }
                    else
                    {
                        RequestIsApprovedParameter.Size = -1;
                        RequestIsApprovedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsApprovedParameter);

                    DbParameter RequestIsDeniedParameter = cmd.CreateParameter();
                    RequestIsDeniedParameter.ParameterName = "RequestIsDenied";
                    RequestIsDeniedParameter.Direction = ParameterDirection.Input;
                    RequestIsDeniedParameter.DbType = DbType.Boolean;
                    if (RequestIsDenied.HasValue)
                    {
                        RequestIsDeniedParameter.Value = RequestIsDenied.Value;
                    }
                    else
                    {
                        RequestIsDeniedParameter.Size = -1;
                        RequestIsDeniedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsDeniedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceEditorRequestEditAsync (Guid? AccessRequestedForAgentGuidRef, Guid? AccessRequestedByAgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? RequestIsApproved, bool? RequestIsDenied)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceEditorRequestEdit";

                    DbParameter AccessRequestedForAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedForAgentGuidRefParameter.ParameterName = "AccessRequestedForAgentGuidRef";
                    AccessRequestedForAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedForAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedForAgentGuidRef.HasValue)
                    {
                        AccessRequestedForAgentGuidRefParameter.Value = AccessRequestedForAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedForAgentGuidRefParameter.Size = -1;
                        AccessRequestedForAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedForAgentGuidRefParameter);

                    DbParameter AccessRequestedByAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedByAgentGuidRefParameter.ParameterName = "AccessRequestedByAgentGuidRef";
                    AccessRequestedByAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedByAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedByAgentGuidRef.HasValue)
                    {
                        AccessRequestedByAgentGuidRefParameter.Value = AccessRequestedByAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedByAgentGuidRefParameter.Size = -1;
                        AccessRequestedByAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedByAgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter RequestIsApprovedParameter = cmd.CreateParameter();
                    RequestIsApprovedParameter.ParameterName = "RequestIsApproved";
                    RequestIsApprovedParameter.Direction = ParameterDirection.Input;
                    RequestIsApprovedParameter.DbType = DbType.Boolean;
                    if (RequestIsApproved.HasValue)
                    {
                        RequestIsApprovedParameter.Value = RequestIsApproved.Value;
                    }
                    else
                    {
                        RequestIsApprovedParameter.Size = -1;
                        RequestIsApprovedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsApprovedParameter);

                    DbParameter RequestIsDeniedParameter = cmd.CreateParameter();
                    RequestIsDeniedParameter.ParameterName = "RequestIsDenied";
                    RequestIsDeniedParameter.Direction = ParameterDirection.Input;
                    RequestIsDeniedParameter.DbType = DbType.Boolean;
                    if (RequestIsDenied.HasValue)
                    {
                        RequestIsDeniedParameter.Value = RequestIsDenied.Value;
                    }
                    else
                    {
                        RequestIsDeniedParameter.Size = -1;
                        RequestIsDeniedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsDeniedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceNpdsDefaultEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, Guid? DiristryIGuidRef, Guid? RegistryIGuidRef, Guid? DirectoryIGuidRef, Guid? RegistrarIGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceNpdsDefaultEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DiristryIGuidRefParameter = cmd.CreateParameter();
                    DiristryIGuidRefParameter.ParameterName = "DiristryIGuidRef";
                    DiristryIGuidRefParameter.Direction = ParameterDirection.Input;
                    DiristryIGuidRefParameter.DbType = DbType.Guid;
                    if (DiristryIGuidRef.HasValue)
                    {
                        DiristryIGuidRefParameter.Value = DiristryIGuidRef.Value;
                    }
                    else
                    {
                        DiristryIGuidRefParameter.Size = -1;
                        DiristryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryIGuidRefParameter);

                    DbParameter RegistryIGuidRefParameter = cmd.CreateParameter();
                    RegistryIGuidRefParameter.ParameterName = "RegistryIGuidRef";
                    RegistryIGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistryIGuidRefParameter.DbType = DbType.Guid;
                    if (RegistryIGuidRef.HasValue)
                    {
                        RegistryIGuidRefParameter.Value = RegistryIGuidRef.Value;
                    }
                    else
                    {
                        RegistryIGuidRefParameter.Size = -1;
                        RegistryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryIGuidRefParameter);

                    DbParameter DirectoryIGuidRefParameter = cmd.CreateParameter();
                    DirectoryIGuidRefParameter.ParameterName = "DirectoryIGuidRef";
                    DirectoryIGuidRefParameter.Direction = ParameterDirection.Input;
                    DirectoryIGuidRefParameter.DbType = DbType.Guid;
                    if (DirectoryIGuidRef.HasValue)
                    {
                        DirectoryIGuidRefParameter.Value = DirectoryIGuidRef.Value;
                    }
                    else
                    {
                        DirectoryIGuidRefParameter.Size = -1;
                        DirectoryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryIGuidRefParameter);

                    DbParameter RegistrarIGuidRefParameter = cmd.CreateParameter();
                    RegistrarIGuidRefParameter.ParameterName = "RegistrarIGuidRef";
                    RegistrarIGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistrarIGuidRefParameter.DbType = DbType.Guid;
                    if (RegistrarIGuidRef.HasValue)
                    {
                        RegistrarIGuidRefParameter.Value = RegistrarIGuidRef.Value;
                    }
                    else
                    {
                        RegistrarIGuidRefParameter.Size = -1;
                        RegistrarIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarIGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceNpdsDefaultEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, Guid? DiristryIGuidRef, Guid? RegistryIGuidRef, Guid? DirectoryIGuidRef, Guid? RegistrarIGuidRef)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceNpdsDefaultEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DiristryIGuidRefParameter = cmd.CreateParameter();
                    DiristryIGuidRefParameter.ParameterName = "DiristryIGuidRef";
                    DiristryIGuidRefParameter.Direction = ParameterDirection.Input;
                    DiristryIGuidRefParameter.DbType = DbType.Guid;
                    if (DiristryIGuidRef.HasValue)
                    {
                        DiristryIGuidRefParameter.Value = DiristryIGuidRef.Value;
                    }
                    else
                    {
                        DiristryIGuidRefParameter.Size = -1;
                        DiristryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryIGuidRefParameter);

                    DbParameter RegistryIGuidRefParameter = cmd.CreateParameter();
                    RegistryIGuidRefParameter.ParameterName = "RegistryIGuidRef";
                    RegistryIGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistryIGuidRefParameter.DbType = DbType.Guid;
                    if (RegistryIGuidRef.HasValue)
                    {
                        RegistryIGuidRefParameter.Value = RegistryIGuidRef.Value;
                    }
                    else
                    {
                        RegistryIGuidRefParameter.Size = -1;
                        RegistryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryIGuidRefParameter);

                    DbParameter DirectoryIGuidRefParameter = cmd.CreateParameter();
                    DirectoryIGuidRefParameter.ParameterName = "DirectoryIGuidRef";
                    DirectoryIGuidRefParameter.Direction = ParameterDirection.Input;
                    DirectoryIGuidRefParameter.DbType = DbType.Guid;
                    if (DirectoryIGuidRef.HasValue)
                    {
                        DirectoryIGuidRefParameter.Value = DirectoryIGuidRef.Value;
                    }
                    else
                    {
                        DirectoryIGuidRefParameter.Size = -1;
                        DirectoryIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryIGuidRefParameter);

                    DbParameter RegistrarIGuidRefParameter = cmd.CreateParameter();
                    RegistrarIGuidRefParameter.ParameterName = "RegistrarIGuidRef";
                    RegistrarIGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistrarIGuidRefParameter.DbType = DbType.Guid;
                    if (RegistrarIGuidRef.HasValue)
                    {
                        RegistrarIGuidRefParameter.Value = RegistrarIGuidRef.Value;
                    }
                    else
                    {
                        RegistrarIGuidRefParameter.Size = -1;
                        RegistrarIGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarIGuidRefParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepAuthorRequestEdit (Guid? AccessRequestedForAgentGuidRef, Guid? AccessRequestedByAgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? RequestIsApproved, bool? RequestIsDenied)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepAuthorRequestEdit";

                    DbParameter AccessRequestedForAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedForAgentGuidRefParameter.ParameterName = "AccessRequestedForAgentGuidRef";
                    AccessRequestedForAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedForAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedForAgentGuidRef.HasValue)
                    {
                        AccessRequestedForAgentGuidRefParameter.Value = AccessRequestedForAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedForAgentGuidRefParameter.Size = -1;
                        AccessRequestedForAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedForAgentGuidRefParameter);

                    DbParameter AccessRequestedByAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedByAgentGuidRefParameter.ParameterName = "AccessRequestedByAgentGuidRef";
                    AccessRequestedByAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedByAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedByAgentGuidRef.HasValue)
                    {
                        AccessRequestedByAgentGuidRefParameter.Value = AccessRequestedByAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedByAgentGuidRefParameter.Size = -1;
                        AccessRequestedByAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedByAgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter RequestIsApprovedParameter = cmd.CreateParameter();
                    RequestIsApprovedParameter.ParameterName = "RequestIsApproved";
                    RequestIsApprovedParameter.Direction = ParameterDirection.Input;
                    RequestIsApprovedParameter.DbType = DbType.Boolean;
                    if (RequestIsApproved.HasValue)
                    {
                        RequestIsApprovedParameter.Value = RequestIsApproved.Value;
                    }
                    else
                    {
                        RequestIsApprovedParameter.Size = -1;
                        RequestIsApprovedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsApprovedParameter);

                    DbParameter RequestIsDeniedParameter = cmd.CreateParameter();
                    RequestIsDeniedParameter.ParameterName = "RequestIsDenied";
                    RequestIsDeniedParameter.Direction = ParameterDirection.Input;
                    RequestIsDeniedParameter.DbType = DbType.Boolean;
                    if (RequestIsDenied.HasValue)
                    {
                        RequestIsDeniedParameter.Value = RequestIsDenied.Value;
                    }
                    else
                    {
                        RequestIsDeniedParameter.Size = -1;
                        RequestIsDeniedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsDeniedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepAuthorRequestEditAsync (Guid? AccessRequestedForAgentGuidRef, Guid? AccessRequestedByAgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, bool? RequestIsApproved, bool? RequestIsDenied)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepAuthorRequestEdit";

                    DbParameter AccessRequestedForAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedForAgentGuidRefParameter.ParameterName = "AccessRequestedForAgentGuidRef";
                    AccessRequestedForAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedForAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedForAgentGuidRef.HasValue)
                    {
                        AccessRequestedForAgentGuidRefParameter.Value = AccessRequestedForAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedForAgentGuidRefParameter.Size = -1;
                        AccessRequestedForAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedForAgentGuidRefParameter);

                    DbParameter AccessRequestedByAgentGuidRefParameter = cmd.CreateParameter();
                    AccessRequestedByAgentGuidRefParameter.ParameterName = "AccessRequestedByAgentGuidRef";
                    AccessRequestedByAgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AccessRequestedByAgentGuidRefParameter.DbType = DbType.Guid;
                    if (AccessRequestedByAgentGuidRef.HasValue)
                    {
                        AccessRequestedByAgentGuidRefParameter.Value = AccessRequestedByAgentGuidRef.Value;
                    }
                    else
                    {
                        AccessRequestedByAgentGuidRefParameter.Size = -1;
                        AccessRequestedByAgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AccessRequestedByAgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter RequestIsApprovedParameter = cmd.CreateParameter();
                    RequestIsApprovedParameter.ParameterName = "RequestIsApproved";
                    RequestIsApprovedParameter.Direction = ParameterDirection.Input;
                    RequestIsApprovedParameter.DbType = DbType.Boolean;
                    if (RequestIsApproved.HasValue)
                    {
                        RequestIsApprovedParameter.Value = RequestIsApproved.Value;
                    }
                    else
                    {
                        RequestIsApprovedParameter.Size = -1;
                        RequestIsApprovedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsApprovedParameter);

                    DbParameter RequestIsDeniedParameter = cmd.CreateParameter();
                    RequestIsDeniedParameter.ParameterName = "RequestIsDenied";
                    RequestIsDeniedParameter.Direction = ParameterDirection.Input;
                    RequestIsDeniedParameter.DbType = DbType.Boolean;
                    if (RequestIsDenied.HasValue)
                    {
                        RequestIsDeniedParameter.Value = RequestIsDenied.Value;
                    }
                    else
                    {
                        RequestIsDeniedParameter.Size = -1;
                        RequestIsDeniedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestIsDeniedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceRestrictionAndEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidKey, byte? RestrictionAndPriority, string RestrictionName, bool? IsSufficient)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionAndEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidKeyParameter = cmd.CreateParameter();
                    RestrictionAndGuidKeyParameter.ParameterName = "RestrictionAndGuidKey";
                    RestrictionAndGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidKey.HasValue)
                    {
                        RestrictionAndGuidKeyParameter.Value = RestrictionAndGuidKey.Value;
                    }
                    else
                    {
                        RestrictionAndGuidKeyParameter.Size = -1;
                        RestrictionAndGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidKeyParameter);

                    DbParameter RestrictionAndPriorityParameter = cmd.CreateParameter();
                    RestrictionAndPriorityParameter.ParameterName = "RestrictionAndPriority";
                    RestrictionAndPriorityParameter.Direction = ParameterDirection.Input;
                    RestrictionAndPriorityParameter.DbType = DbType.Byte;
                    RestrictionAndPriorityParameter.Precision = 3;
                    RestrictionAndPriorityParameter.Scale = 0;
                    if (RestrictionAndPriority.HasValue)
                    {
                        RestrictionAndPriorityParameter.Value = RestrictionAndPriority.Value;
                    }
                    else
                    {
                        RestrictionAndPriorityParameter.Size = -1;
                        RestrictionAndPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndPriorityParameter);

                    DbParameter RestrictionNameParameter = cmd.CreateParameter();
                    RestrictionNameParameter.ParameterName = "RestrictionName";
                    RestrictionNameParameter.Direction = ParameterDirection.Input;
                    RestrictionNameParameter.DbType = DbType.String;
                    RestrictionNameParameter.Size = 64;
                    if (RestrictionName != null)
                    {
                        RestrictionNameParameter.Value = RestrictionName;
                    }
                    else
                    {
                        RestrictionNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionNameParameter);

                    DbParameter IsSufficientParameter = cmd.CreateParameter();
                    IsSufficientParameter.ParameterName = "IsSufficient";
                    IsSufficientParameter.Direction = ParameterDirection.Input;
                    IsSufficientParameter.DbType = DbType.Boolean;
                    if (IsSufficient.HasValue)
                    {
                        IsSufficientParameter.Value = IsSufficient.Value;
                    }
                    else
                    {
                        IsSufficientParameter.Size = -1;
                        IsSufficientParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsSufficientParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceRestrictionAndEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidKey, byte? RestrictionAndPriority, string RestrictionName, bool? IsSufficient)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionAndEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidKeyParameter = cmd.CreateParameter();
                    RestrictionAndGuidKeyParameter.ParameterName = "RestrictionAndGuidKey";
                    RestrictionAndGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidKey.HasValue)
                    {
                        RestrictionAndGuidKeyParameter.Value = RestrictionAndGuidKey.Value;
                    }
                    else
                    {
                        RestrictionAndGuidKeyParameter.Size = -1;
                        RestrictionAndGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidKeyParameter);

                    DbParameter RestrictionAndPriorityParameter = cmd.CreateParameter();
                    RestrictionAndPriorityParameter.ParameterName = "RestrictionAndPriority";
                    RestrictionAndPriorityParameter.Direction = ParameterDirection.Input;
                    RestrictionAndPriorityParameter.DbType = DbType.Byte;
                    RestrictionAndPriorityParameter.Precision = 3;
                    RestrictionAndPriorityParameter.Scale = 0;
                    if (RestrictionAndPriority.HasValue)
                    {
                        RestrictionAndPriorityParameter.Value = RestrictionAndPriority.Value;
                    }
                    else
                    {
                        RestrictionAndPriorityParameter.Size = -1;
                        RestrictionAndPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndPriorityParameter);

                    DbParameter RestrictionNameParameter = cmd.CreateParameter();
                    RestrictionNameParameter.ParameterName = "RestrictionName";
                    RestrictionNameParameter.Direction = ParameterDirection.Input;
                    RestrictionNameParameter.DbType = DbType.String;
                    RestrictionNameParameter.Size = 64;
                    if (RestrictionName != null)
                    {
                        RestrictionNameParameter.Value = RestrictionName;
                    }
                    else
                    {
                        RestrictionNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionNameParameter);

                    DbParameter IsSufficientParameter = cmd.CreateParameter();
                    IsSufficientParameter.ParameterName = "IsSufficient";
                    IsSufficientParameter.Direction = ParameterDirection.Input;
                    IsSufficientParameter.DbType = DbType.Boolean;
                    if (IsSufficient.HasValue)
                    {
                        IsSufficientParameter.Value = IsSufficient.Value;
                    }
                    else
                    {
                        IsSufficientParameter.Size = -1;
                        IsSufficientParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsSufficientParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepRootEdit (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityInitialTag, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepRootEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityInitialTagParameter = cmd.CreateParameter();
                    EntityInitialTagParameter.ParameterName = "EntityInitialTag";
                    EntityInitialTagParameter.Direction = ParameterDirection.Input;
                    EntityInitialTagParameter.DbType = DbType.String;
                    EntityInitialTagParameter.Size = 64;
                    if (EntityInitialTag != null)
                    {
                        EntityInitialTagParameter.Value = EntityInitialTag;
                    }
                    else
                    {
                        EntityInitialTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityInitialTagParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepRootEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityInitialTag, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepRootEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityInitialTagParameter = cmd.CreateParameter();
                    EntityInitialTagParameter.ParameterName = "EntityInitialTag";
                    EntityInitialTagParameter.Direction = ParameterDirection.Input;
                    EntityInitialTagParameter.DbType = DbType.String;
                    EntityInitialTagParameter.Size = 64;
                    if (EntityInitialTag != null)
                    {
                        EntityInitialTagParameter.Value = EntityInitialTag;
                    }
                    else
                    {
                        EntityInitialTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityInitialTagParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepStemEdit (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityInitialTag, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStemEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityInitialTagParameter = cmd.CreateParameter();
                    EntityInitialTagParameter.ParameterName = "EntityInitialTag";
                    EntityInitialTagParameter.Direction = ParameterDirection.Input;
                    EntityInitialTagParameter.DbType = DbType.String;
                    EntityInitialTagParameter.Size = 64;
                    if (EntityInitialTag != null)
                    {
                        EntityInitialTagParameter.Value = EntityInitialTag;
                    }
                    else
                    {
                        EntityInitialTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityInitialTagParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepStemEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityInitialTag, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepStemEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityInitialTagParameter = cmd.CreateParameter();
                    EntityInitialTagParameter.ParameterName = "EntityInitialTag";
                    EntityInitialTagParameter.Direction = ParameterDirection.Input;
                    EntityInitialTagParameter.DbType = DbType.String;
                    EntityInitialTagParameter.Size = 64;
                    if (EntityInitialTag != null)
                    {
                        EntityInitialTagParameter.Value = EntityInitialTag;
                    }
                    else
                    {
                        EntityInitialTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityInitialTagParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeDescriptionEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Description)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDescriptionEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DescriptionParameter = cmd.CreateParameter();
                    DescriptionParameter.ParameterName = "Description";
                    DescriptionParameter.Direction = ParameterDirection.Input;
                    DescriptionParameter.DbType = DbType.String;
                    if (Description != null)
                    {
                        DescriptionParameter.Value = Description;
                    }
                    else
                    {
                        DescriptionParameter.Size = -1;
                        DescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeDescriptionEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Description)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDescriptionEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DescriptionParameter = cmd.CreateParameter();
                    DescriptionParameter.ParameterName = "Description";
                    DescriptionParameter.Direction = ParameterDirection.Input;
                    DescriptionParameter.DbType = DbType.String;
                    if (Description != null)
                    {
                        DescriptionParameter.Value = Description;
                    }
                    else
                    {
                        DescriptionParameter.Size = -1;
                        DescriptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DescriptionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeDistributionEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Distribution)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDistributionEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DistributionParameter = cmd.CreateParameter();
                    DistributionParameter.ParameterName = "Distribution";
                    DistributionParameter.Direction = ParameterDirection.Input;
                    DistributionParameter.DbType = DbType.String;
                    if (Distribution != null)
                    {
                        DistributionParameter.Value = Distribution;
                    }
                    else
                    {
                        DistributionParameter.Size = -1;
                        DistributionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DistributionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeDistributionEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Distribution)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeDistributionEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter DistributionParameter = cmd.CreateParameter();
                    DistributionParameter.ParameterName = "Distribution";
                    DistributionParameter.Direction = ParameterDirection.Input;
                    DistributionParameter.DbType = DbType.String;
                    if (Distribution != null)
                    {
                        DistributionParameter.Value = Distribution;
                    }
                    else
                    {
                        DistributionParameter.Size = -1;
                        DistributionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DistributionParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeFairMetricEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, short? Mcount, short? Qcount, short? Pcount, short? Ncount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeFairMetricEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter McountParameter = cmd.CreateParameter();
                    McountParameter.ParameterName = "Mcount";
                    McountParameter.Direction = ParameterDirection.Input;
                    McountParameter.DbType = DbType.Int16;
                    McountParameter.Precision = 5;
                    McountParameter.Scale = 0;
                    if (Mcount.HasValue)
                    {
                        McountParameter.Value = Mcount.Value;
                    }
                    else
                    {
                        McountParameter.Size = -1;
                        McountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(McountParameter);

                    DbParameter QcountParameter = cmd.CreateParameter();
                    QcountParameter.ParameterName = "Qcount";
                    QcountParameter.Direction = ParameterDirection.Input;
                    QcountParameter.DbType = DbType.Int16;
                    QcountParameter.Precision = 5;
                    QcountParameter.Scale = 0;
                    if (Qcount.HasValue)
                    {
                        QcountParameter.Value = Qcount.Value;
                    }
                    else
                    {
                        QcountParameter.Size = -1;
                        QcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(QcountParameter);

                    DbParameter PcountParameter = cmd.CreateParameter();
                    PcountParameter.ParameterName = "Pcount";
                    PcountParameter.Direction = ParameterDirection.Input;
                    PcountParameter.DbType = DbType.Int16;
                    PcountParameter.Precision = 5;
                    PcountParameter.Scale = 0;
                    if (Pcount.HasValue)
                    {
                        PcountParameter.Value = Pcount.Value;
                    }
                    else
                    {
                        PcountParameter.Size = -1;
                        PcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PcountParameter);

                    DbParameter NcountParameter = cmd.CreateParameter();
                    NcountParameter.ParameterName = "Ncount";
                    NcountParameter.Direction = ParameterDirection.Input;
                    NcountParameter.DbType = DbType.Int16;
                    NcountParameter.Precision = 5;
                    NcountParameter.Scale = 0;
                    if (Ncount.HasValue)
                    {
                        NcountParameter.Value = Ncount.Value;
                    }
                    else
                    {
                        NcountParameter.Size = -1;
                        NcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(NcountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeFairMetricEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, short? Mcount, short? Qcount, short? Pcount, short? Ncount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeFairMetricEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter McountParameter = cmd.CreateParameter();
                    McountParameter.ParameterName = "Mcount";
                    McountParameter.Direction = ParameterDirection.Input;
                    McountParameter.DbType = DbType.Int16;
                    McountParameter.Precision = 5;
                    McountParameter.Scale = 0;
                    if (Mcount.HasValue)
                    {
                        McountParameter.Value = Mcount.Value;
                    }
                    else
                    {
                        McountParameter.Size = -1;
                        McountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(McountParameter);

                    DbParameter QcountParameter = cmd.CreateParameter();
                    QcountParameter.ParameterName = "Qcount";
                    QcountParameter.Direction = ParameterDirection.Input;
                    QcountParameter.DbType = DbType.Int16;
                    QcountParameter.Precision = 5;
                    QcountParameter.Scale = 0;
                    if (Qcount.HasValue)
                    {
                        QcountParameter.Value = Qcount.Value;
                    }
                    else
                    {
                        QcountParameter.Size = -1;
                        QcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(QcountParameter);

                    DbParameter PcountParameter = cmd.CreateParameter();
                    PcountParameter.ParameterName = "Pcount";
                    PcountParameter.Direction = ParameterDirection.Input;
                    PcountParameter.DbType = DbType.Int16;
                    PcountParameter.Precision = 5;
                    PcountParameter.Scale = 0;
                    if (Pcount.HasValue)
                    {
                        PcountParameter.Value = Pcount.Value;
                    }
                    else
                    {
                        PcountParameter.Size = -1;
                        PcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PcountParameter);

                    DbParameter NcountParameter = cmd.CreateParameter();
                    NcountParameter.ParameterName = "Ncount";
                    NcountParameter.Direction = ParameterDirection.Input;
                    NcountParameter.DbType = DbType.Int16;
                    NcountParameter.Precision = 5;
                    NcountParameter.Scale = 0;
                    if (Ncount.HasValue)
                    {
                        NcountParameter.Value = Ncount.Value;
                    }
                    else
                    {
                        NcountParameter.Size = -1;
                        NcountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(NcountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeLocationEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Location, string DisplayText, string DisplayImageUrl, string UrlWebAddress, DateTime? UrlWebAddressValidated, string EmailAddress, DateTime? EmailAddressValidated, string StreetAddress, DateTime? StreetAddressValidated, string ExtendedAddress, string FormattedAddress, string CityLocality, string StateRegion, string Country, string PostalCode, string Telephone, string GeocodeType, string GeocodeConfidence, double? Latitude, double? Longitude)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeLocationEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter LocationParameter = cmd.CreateParameter();
                    LocationParameter.ParameterName = "Location";
                    LocationParameter.Direction = ParameterDirection.Input;
                    LocationParameter.DbType = DbType.String;
                    if (Location != null)
                    {
                        LocationParameter.Value = Location;
                    }
                    else
                    {
                        LocationParameter.Size = -1;
                        LocationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LocationParameter);

                    DbParameter DisplayTextParameter = cmd.CreateParameter();
                    DisplayTextParameter.ParameterName = "DisplayText";
                    DisplayTextParameter.Direction = ParameterDirection.Input;
                    DisplayTextParameter.DbType = DbType.String;
                    DisplayTextParameter.Size = 64;
                    if (DisplayText != null)
                    {
                        DisplayTextParameter.Value = DisplayText;
                    }
                    else
                    {
                        DisplayTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DisplayTextParameter);

                    DbParameter DisplayImageUrlParameter = cmd.CreateParameter();
                    DisplayImageUrlParameter.ParameterName = "DisplayImageUrl";
                    DisplayImageUrlParameter.Direction = ParameterDirection.Input;
                    DisplayImageUrlParameter.DbType = DbType.String;
                    DisplayImageUrlParameter.Size = 256;
                    if (DisplayImageUrl != null)
                    {
                        DisplayImageUrlParameter.Value = DisplayImageUrl;
                    }
                    else
                    {
                        DisplayImageUrlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DisplayImageUrlParameter);

                    DbParameter UrlWebAddressParameter = cmd.CreateParameter();
                    UrlWebAddressParameter.ParameterName = "UrlWebAddress";
                    UrlWebAddressParameter.Direction = ParameterDirection.Input;
                    UrlWebAddressParameter.DbType = DbType.String;
                    UrlWebAddressParameter.Size = 256;
                    if (UrlWebAddress != null)
                    {
                        UrlWebAddressParameter.Value = UrlWebAddress;
                    }
                    else
                    {
                        UrlWebAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UrlWebAddressParameter);

                    DbParameter UrlWebAddressValidatedParameter = cmd.CreateParameter();
                    UrlWebAddressValidatedParameter.ParameterName = "UrlWebAddressValidated";
                    UrlWebAddressValidatedParameter.Direction = ParameterDirection.Input;
                    UrlWebAddressValidatedParameter.DbType = DbType.DateTime;
                    if (UrlWebAddressValidated.HasValue)
                    {
                        UrlWebAddressValidatedParameter.Value = UrlWebAddressValidated.Value;
                    }
                    else
                    {
                        UrlWebAddressValidatedParameter.Size = -1;
                        UrlWebAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UrlWebAddressValidatedParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 128;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAddressValidatedParameter = cmd.CreateParameter();
                    EmailAddressValidatedParameter.ParameterName = "EmailAddressValidated";
                    EmailAddressValidatedParameter.Direction = ParameterDirection.Input;
                    EmailAddressValidatedParameter.DbType = DbType.DateTime;
                    if (EmailAddressValidated.HasValue)
                    {
                        EmailAddressValidatedParameter.Value = EmailAddressValidated.Value;
                    }
                    else
                    {
                        EmailAddressValidatedParameter.Size = -1;
                        EmailAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressValidatedParameter);

                    DbParameter StreetAddressParameter = cmd.CreateParameter();
                    StreetAddressParameter.ParameterName = "StreetAddress";
                    StreetAddressParameter.Direction = ParameterDirection.Input;
                    StreetAddressParameter.DbType = DbType.String;
                    StreetAddressParameter.Size = 128;
                    if (StreetAddress != null)
                    {
                        StreetAddressParameter.Value = StreetAddress;
                    }
                    else
                    {
                        StreetAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StreetAddressParameter);

                    DbParameter StreetAddressValidatedParameter = cmd.CreateParameter();
                    StreetAddressValidatedParameter.ParameterName = "StreetAddressValidated";
                    StreetAddressValidatedParameter.Direction = ParameterDirection.Input;
                    StreetAddressValidatedParameter.DbType = DbType.DateTime;
                    if (StreetAddressValidated.HasValue)
                    {
                        StreetAddressValidatedParameter.Value = StreetAddressValidated.Value;
                    }
                    else
                    {
                        StreetAddressValidatedParameter.Size = -1;
                        StreetAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StreetAddressValidatedParameter);

                    DbParameter ExtendedAddressParameter = cmd.CreateParameter();
                    ExtendedAddressParameter.ParameterName = "ExtendedAddress";
                    ExtendedAddressParameter.Direction = ParameterDirection.Input;
                    ExtendedAddressParameter.DbType = DbType.String;
                    ExtendedAddressParameter.Size = 128;
                    if (ExtendedAddress != null)
                    {
                        ExtendedAddressParameter.Value = ExtendedAddress;
                    }
                    else
                    {
                        ExtendedAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ExtendedAddressParameter);

                    DbParameter FormattedAddressParameter = cmd.CreateParameter();
                    FormattedAddressParameter.ParameterName = "FormattedAddress";
                    FormattedAddressParameter.Direction = ParameterDirection.Input;
                    FormattedAddressParameter.DbType = DbType.String;
                    FormattedAddressParameter.Size = 128;
                    if (FormattedAddress != null)
                    {
                        FormattedAddressParameter.Value = FormattedAddress;
                    }
                    else
                    {
                        FormattedAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FormattedAddressParameter);

                    DbParameter CityLocalityParameter = cmd.CreateParameter();
                    CityLocalityParameter.ParameterName = "CityLocality";
                    CityLocalityParameter.Direction = ParameterDirection.Input;
                    CityLocalityParameter.DbType = DbType.String;
                    CityLocalityParameter.Size = 128;
                    if (CityLocality != null)
                    {
                        CityLocalityParameter.Value = CityLocality;
                    }
                    else
                    {
                        CityLocalityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CityLocalityParameter);

                    DbParameter StateRegionParameter = cmd.CreateParameter();
                    StateRegionParameter.ParameterName = "StateRegion";
                    StateRegionParameter.Direction = ParameterDirection.Input;
                    StateRegionParameter.DbType = DbType.String;
                    StateRegionParameter.Size = 128;
                    if (StateRegion != null)
                    {
                        StateRegionParameter.Value = StateRegion;
                    }
                    else
                    {
                        StateRegionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StateRegionParameter);

                    DbParameter CountryParameter = cmd.CreateParameter();
                    CountryParameter.ParameterName = "Country";
                    CountryParameter.Direction = ParameterDirection.Input;
                    CountryParameter.DbType = DbType.String;
                    CountryParameter.Size = 128;
                    if (Country != null)
                    {
                        CountryParameter.Value = Country;
                    }
                    else
                    {
                        CountryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CountryParameter);

                    DbParameter PostalCodeParameter = cmd.CreateParameter();
                    PostalCodeParameter.ParameterName = "PostalCode";
                    PostalCodeParameter.Direction = ParameterDirection.Input;
                    PostalCodeParameter.DbType = DbType.String;
                    PostalCodeParameter.Size = 32;
                    if (PostalCode != null)
                    {
                        PostalCodeParameter.Value = PostalCode;
                    }
                    else
                    {
                        PostalCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PostalCodeParameter);

                    DbParameter TelephoneParameter = cmd.CreateParameter();
                    TelephoneParameter.ParameterName = "Telephone";
                    TelephoneParameter.Direction = ParameterDirection.Input;
                    TelephoneParameter.DbType = DbType.String;
                    TelephoneParameter.Size = 32;
                    if (Telephone != null)
                    {
                        TelephoneParameter.Value = Telephone;
                    }
                    else
                    {
                        TelephoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TelephoneParameter);

                    DbParameter GeocodeTypeParameter = cmd.CreateParameter();
                    GeocodeTypeParameter.ParameterName = "GeocodeType";
                    GeocodeTypeParameter.Direction = ParameterDirection.Input;
                    GeocodeTypeParameter.DbType = DbType.String;
                    GeocodeTypeParameter.Size = 32;
                    if (GeocodeType != null)
                    {
                        GeocodeTypeParameter.Value = GeocodeType;
                    }
                    else
                    {
                        GeocodeTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(GeocodeTypeParameter);

                    DbParameter GeocodeConfidenceParameter = cmd.CreateParameter();
                    GeocodeConfidenceParameter.ParameterName = "GeocodeConfidence";
                    GeocodeConfidenceParameter.Direction = ParameterDirection.Input;
                    GeocodeConfidenceParameter.DbType = DbType.String;
                    GeocodeConfidenceParameter.Size = 32;
                    if (GeocodeConfidence != null)
                    {
                        GeocodeConfidenceParameter.Value = GeocodeConfidence;
                    }
                    else
                    {
                        GeocodeConfidenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(GeocodeConfidenceParameter);

                    DbParameter LatitudeParameter = cmd.CreateParameter();
                    LatitudeParameter.ParameterName = "Latitude";
                    LatitudeParameter.Direction = ParameterDirection.Input;
                    LatitudeParameter.DbType = DbType.Double;
                    LatitudeParameter.Precision = 53;
                    if (Latitude.HasValue)
                    {
                        LatitudeParameter.Value = Latitude.Value;
                    }
                    else
                    {
                        LatitudeParameter.Size = -1;
                        LatitudeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LatitudeParameter);

                    DbParameter LongitudeParameter = cmd.CreateParameter();
                    LongitudeParameter.ParameterName = "Longitude";
                    LongitudeParameter.Direction = ParameterDirection.Input;
                    LongitudeParameter.DbType = DbType.Double;
                    LongitudeParameter.Precision = 53;
                    if (Longitude.HasValue)
                    {
                        LongitudeParameter.Value = Longitude.Value;
                    }
                    else
                    {
                        LongitudeParameter.Size = -1;
                        LongitudeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LongitudeParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeLocationEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Location, string DisplayText, string DisplayImageUrl, string UrlWebAddress, DateTime? UrlWebAddressValidated, string EmailAddress, DateTime? EmailAddressValidated, string StreetAddress, DateTime? StreetAddressValidated, string ExtendedAddress, string FormattedAddress, string CityLocality, string StateRegion, string Country, string PostalCode, string Telephone, string GeocodeType, string GeocodeConfidence, double? Latitude, double? Longitude)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeLocationEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter LocationParameter = cmd.CreateParameter();
                    LocationParameter.ParameterName = "Location";
                    LocationParameter.Direction = ParameterDirection.Input;
                    LocationParameter.DbType = DbType.String;
                    if (Location != null)
                    {
                        LocationParameter.Value = Location;
                    }
                    else
                    {
                        LocationParameter.Size = -1;
                        LocationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LocationParameter);

                    DbParameter DisplayTextParameter = cmd.CreateParameter();
                    DisplayTextParameter.ParameterName = "DisplayText";
                    DisplayTextParameter.Direction = ParameterDirection.Input;
                    DisplayTextParameter.DbType = DbType.String;
                    DisplayTextParameter.Size = 64;
                    if (DisplayText != null)
                    {
                        DisplayTextParameter.Value = DisplayText;
                    }
                    else
                    {
                        DisplayTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DisplayTextParameter);

                    DbParameter DisplayImageUrlParameter = cmd.CreateParameter();
                    DisplayImageUrlParameter.ParameterName = "DisplayImageUrl";
                    DisplayImageUrlParameter.Direction = ParameterDirection.Input;
                    DisplayImageUrlParameter.DbType = DbType.String;
                    DisplayImageUrlParameter.Size = 256;
                    if (DisplayImageUrl != null)
                    {
                        DisplayImageUrlParameter.Value = DisplayImageUrl;
                    }
                    else
                    {
                        DisplayImageUrlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DisplayImageUrlParameter);

                    DbParameter UrlWebAddressParameter = cmd.CreateParameter();
                    UrlWebAddressParameter.ParameterName = "UrlWebAddress";
                    UrlWebAddressParameter.Direction = ParameterDirection.Input;
                    UrlWebAddressParameter.DbType = DbType.String;
                    UrlWebAddressParameter.Size = 256;
                    if (UrlWebAddress != null)
                    {
                        UrlWebAddressParameter.Value = UrlWebAddress;
                    }
                    else
                    {
                        UrlWebAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UrlWebAddressParameter);

                    DbParameter UrlWebAddressValidatedParameter = cmd.CreateParameter();
                    UrlWebAddressValidatedParameter.ParameterName = "UrlWebAddressValidated";
                    UrlWebAddressValidatedParameter.Direction = ParameterDirection.Input;
                    UrlWebAddressValidatedParameter.DbType = DbType.DateTime;
                    if (UrlWebAddressValidated.HasValue)
                    {
                        UrlWebAddressValidatedParameter.Value = UrlWebAddressValidated.Value;
                    }
                    else
                    {
                        UrlWebAddressValidatedParameter.Size = -1;
                        UrlWebAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UrlWebAddressValidatedParameter);

                    DbParameter EmailAddressParameter = cmd.CreateParameter();
                    EmailAddressParameter.ParameterName = "EmailAddress";
                    EmailAddressParameter.Direction = ParameterDirection.Input;
                    EmailAddressParameter.DbType = DbType.String;
                    EmailAddressParameter.Size = 128;
                    if (EmailAddress != null)
                    {
                        EmailAddressParameter.Value = EmailAddress;
                    }
                    else
                    {
                        EmailAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressParameter);

                    DbParameter EmailAddressValidatedParameter = cmd.CreateParameter();
                    EmailAddressValidatedParameter.ParameterName = "EmailAddressValidated";
                    EmailAddressValidatedParameter.Direction = ParameterDirection.Input;
                    EmailAddressValidatedParameter.DbType = DbType.DateTime;
                    if (EmailAddressValidated.HasValue)
                    {
                        EmailAddressValidatedParameter.Value = EmailAddressValidated.Value;
                    }
                    else
                    {
                        EmailAddressValidatedParameter.Size = -1;
                        EmailAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EmailAddressValidatedParameter);

                    DbParameter StreetAddressParameter = cmd.CreateParameter();
                    StreetAddressParameter.ParameterName = "StreetAddress";
                    StreetAddressParameter.Direction = ParameterDirection.Input;
                    StreetAddressParameter.DbType = DbType.String;
                    StreetAddressParameter.Size = 128;
                    if (StreetAddress != null)
                    {
                        StreetAddressParameter.Value = StreetAddress;
                    }
                    else
                    {
                        StreetAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StreetAddressParameter);

                    DbParameter StreetAddressValidatedParameter = cmd.CreateParameter();
                    StreetAddressValidatedParameter.ParameterName = "StreetAddressValidated";
                    StreetAddressValidatedParameter.Direction = ParameterDirection.Input;
                    StreetAddressValidatedParameter.DbType = DbType.DateTime;
                    if (StreetAddressValidated.HasValue)
                    {
                        StreetAddressValidatedParameter.Value = StreetAddressValidated.Value;
                    }
                    else
                    {
                        StreetAddressValidatedParameter.Size = -1;
                        StreetAddressValidatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StreetAddressValidatedParameter);

                    DbParameter ExtendedAddressParameter = cmd.CreateParameter();
                    ExtendedAddressParameter.ParameterName = "ExtendedAddress";
                    ExtendedAddressParameter.Direction = ParameterDirection.Input;
                    ExtendedAddressParameter.DbType = DbType.String;
                    ExtendedAddressParameter.Size = 128;
                    if (ExtendedAddress != null)
                    {
                        ExtendedAddressParameter.Value = ExtendedAddress;
                    }
                    else
                    {
                        ExtendedAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ExtendedAddressParameter);

                    DbParameter FormattedAddressParameter = cmd.CreateParameter();
                    FormattedAddressParameter.ParameterName = "FormattedAddress";
                    FormattedAddressParameter.Direction = ParameterDirection.Input;
                    FormattedAddressParameter.DbType = DbType.String;
                    FormattedAddressParameter.Size = 128;
                    if (FormattedAddress != null)
                    {
                        FormattedAddressParameter.Value = FormattedAddress;
                    }
                    else
                    {
                        FormattedAddressParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FormattedAddressParameter);

                    DbParameter CityLocalityParameter = cmd.CreateParameter();
                    CityLocalityParameter.ParameterName = "CityLocality";
                    CityLocalityParameter.Direction = ParameterDirection.Input;
                    CityLocalityParameter.DbType = DbType.String;
                    CityLocalityParameter.Size = 128;
                    if (CityLocality != null)
                    {
                        CityLocalityParameter.Value = CityLocality;
                    }
                    else
                    {
                        CityLocalityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CityLocalityParameter);

                    DbParameter StateRegionParameter = cmd.CreateParameter();
                    StateRegionParameter.ParameterName = "StateRegion";
                    StateRegionParameter.Direction = ParameterDirection.Input;
                    StateRegionParameter.DbType = DbType.String;
                    StateRegionParameter.Size = 128;
                    if (StateRegion != null)
                    {
                        StateRegionParameter.Value = StateRegion;
                    }
                    else
                    {
                        StateRegionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StateRegionParameter);

                    DbParameter CountryParameter = cmd.CreateParameter();
                    CountryParameter.ParameterName = "Country";
                    CountryParameter.Direction = ParameterDirection.Input;
                    CountryParameter.DbType = DbType.String;
                    CountryParameter.Size = 128;
                    if (Country != null)
                    {
                        CountryParameter.Value = Country;
                    }
                    else
                    {
                        CountryParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CountryParameter);

                    DbParameter PostalCodeParameter = cmd.CreateParameter();
                    PostalCodeParameter.ParameterName = "PostalCode";
                    PostalCodeParameter.Direction = ParameterDirection.Input;
                    PostalCodeParameter.DbType = DbType.String;
                    PostalCodeParameter.Size = 32;
                    if (PostalCode != null)
                    {
                        PostalCodeParameter.Value = PostalCode;
                    }
                    else
                    {
                        PostalCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PostalCodeParameter);

                    DbParameter TelephoneParameter = cmd.CreateParameter();
                    TelephoneParameter.ParameterName = "Telephone";
                    TelephoneParameter.Direction = ParameterDirection.Input;
                    TelephoneParameter.DbType = DbType.String;
                    TelephoneParameter.Size = 32;
                    if (Telephone != null)
                    {
                        TelephoneParameter.Value = Telephone;
                    }
                    else
                    {
                        TelephoneParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TelephoneParameter);

                    DbParameter GeocodeTypeParameter = cmd.CreateParameter();
                    GeocodeTypeParameter.ParameterName = "GeocodeType";
                    GeocodeTypeParameter.Direction = ParameterDirection.Input;
                    GeocodeTypeParameter.DbType = DbType.String;
                    GeocodeTypeParameter.Size = 32;
                    if (GeocodeType != null)
                    {
                        GeocodeTypeParameter.Value = GeocodeType;
                    }
                    else
                    {
                        GeocodeTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(GeocodeTypeParameter);

                    DbParameter GeocodeConfidenceParameter = cmd.CreateParameter();
                    GeocodeConfidenceParameter.ParameterName = "GeocodeConfidence";
                    GeocodeConfidenceParameter.Direction = ParameterDirection.Input;
                    GeocodeConfidenceParameter.DbType = DbType.String;
                    GeocodeConfidenceParameter.Size = 32;
                    if (GeocodeConfidence != null)
                    {
                        GeocodeConfidenceParameter.Value = GeocodeConfidence;
                    }
                    else
                    {
                        GeocodeConfidenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(GeocodeConfidenceParameter);

                    DbParameter LatitudeParameter = cmd.CreateParameter();
                    LatitudeParameter.ParameterName = "Latitude";
                    LatitudeParameter.Direction = ParameterDirection.Input;
                    LatitudeParameter.DbType = DbType.Double;
                    LatitudeParameter.Precision = 53;
                    if (Latitude.HasValue)
                    {
                        LatitudeParameter.Value = Latitude.Value;
                    }
                    else
                    {
                        LatitudeParameter.Size = -1;
                        LatitudeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LatitudeParameter);

                    DbParameter LongitudeParameter = cmd.CreateParameter();
                    LongitudeParameter.ParameterName = "Longitude";
                    LongitudeParameter.Direction = ParameterDirection.Input;
                    LongitudeParameter.DbType = DbType.Double;
                    LongitudeParameter.Precision = 53;
                    if (Longitude.HasValue)
                    {
                        LongitudeParameter.Value = Longitude.Value;
                    }
                    else
                    {
                        LongitudeParameter.Size = -1;
                        LongitudeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LongitudeParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeProvenanceEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Provenance)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeProvenanceEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter ProvenanceParameter = cmd.CreateParameter();
                    ProvenanceParameter.ParameterName = "Provenance";
                    ProvenanceParameter.Direction = ParameterDirection.Input;
                    ProvenanceParameter.DbType = DbType.String;
                    if (Provenance != null)
                    {
                        ProvenanceParameter.Value = Provenance;
                    }
                    else
                    {
                        ProvenanceParameter.Size = -1;
                        ProvenanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProvenanceParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeProvenanceEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string Provenance)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeProvenanceEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter ProvenanceParameter = cmd.CreateParameter();
                    ProvenanceParameter.ParameterName = "Provenance";
                    ProvenanceParameter.Direction = ParameterDirection.Input;
                    ProvenanceParameter.DbType = DbType.String;
                    if (Provenance != null)
                    {
                        ProvenanceParameter.Value = Provenance;
                    }
                    else
                    {
                        ProvenanceParameter.Size = -1;
                        ProvenanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProvenanceParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepSnapshotEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string ResrepSnapshotXml)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepSnapshotEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter ResrepSnapshotXmlParameter = cmd.CreateParameter();
                    ResrepSnapshotXmlParameter.ParameterName = "ResrepSnapshotXml";
                    ResrepSnapshotXmlParameter.Direction = ParameterDirection.Input;
                    ResrepSnapshotXmlParameter.DbType = DbType.String;
                    if (ResrepSnapshotXml != null)
                    {
                        ResrepSnapshotXmlParameter.Value = ResrepSnapshotXml;
                    }
                    else
                    {
                        ResrepSnapshotXmlParameter.Size = -1;
                        ResrepSnapshotXmlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepSnapshotXmlParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepSnapshotEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string ResrepSnapshotXml)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepSnapshotEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter ResrepSnapshotXmlParameter = cmd.CreateParameter();
                    ResrepSnapshotXmlParameter.ParameterName = "ResrepSnapshotXml";
                    ResrepSnapshotXmlParameter.Direction = ParameterDirection.Input;
                    ResrepSnapshotXmlParameter.DbType = DbType.String;
                    if (ResrepSnapshotXml != null)
                    {
                        ResrepSnapshotXmlParameter.Value = ResrepSnapshotXml;
                    }
                    else
                    {
                        ResrepSnapshotXmlParameter.Size = -1;
                        ResrepSnapshotXmlParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ResrepSnapshotXmlParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeCrossReferenceEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string CrossReference)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter CrossReferenceParameter = cmd.CreateParameter();
                    CrossReferenceParameter.ParameterName = "CrossReference";
                    CrossReferenceParameter.Direction = ParameterDirection.Input;
                    CrossReferenceParameter.DbType = DbType.String;
                    CrossReferenceParameter.Size = 256;
                    if (CrossReference != null)
                    {
                        CrossReferenceParameter.Value = CrossReference;
                    }
                    else
                    {
                        CrossReferenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CrossReferenceParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeCrossReferenceEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string CrossReference)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter CrossReferenceParameter = cmd.CreateParameter();
                    CrossReferenceParameter.ParameterName = "CrossReference";
                    CrossReferenceParameter.Direction = ParameterDirection.Input;
                    CrossReferenceParameter.DbType = DbType.String;
                    CrossReferenceParameter.Size = 256;
                    if (CrossReference != null)
                    {
                        CrossReferenceParameter.Value = CrossReference;
                    }
                    else
                    {
                        CrossReferenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CrossReferenceParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeOtherTextEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string OtherText)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeOtherTextEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter OtherTextParameter = cmd.CreateParameter();
                    OtherTextParameter.ParameterName = "OtherText";
                    OtherTextParameter.Direction = ParameterDirection.Input;
                    OtherTextParameter.DbType = DbType.String;
                    if (OtherText != null)
                    {
                        OtherTextParameter.Value = OtherText;
                    }
                    else
                    {
                        OtherTextParameter.Size = -1;
                        OtherTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OtherTextParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeOtherTextEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string OtherText)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeOtherTextEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter OtherTextParameter = cmd.CreateParameter();
                    OtherTextParameter.ParameterName = "OtherText";
                    OtherTextParameter.Direction = ParameterDirection.Input;
                    OtherTextParameter.DbType = DbType.String;
                    if (OtherText != null)
                    {
                        OtherTextParameter.Value = OtherText;
                    }
                    else
                    {
                        OtherTextParameter.Size = -1;
                        OtherTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OtherTextParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeSupportingLabelEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string SupportingLabel)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingLabelEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter SupportingLabelParameter = cmd.CreateParameter();
                    SupportingLabelParameter.ParameterName = "SupportingLabel";
                    SupportingLabelParameter.Direction = ParameterDirection.Input;
                    SupportingLabelParameter.DbType = DbType.String;
                    SupportingLabelParameter.Size = 256;
                    if (SupportingLabel != null)
                    {
                        SupportingLabelParameter.Value = SupportingLabel;
                    }
                    else
                    {
                        SupportingLabelParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingLabelParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeSupportingLabelEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string SupportingLabel)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingLabelEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter SupportingLabelParameter = cmd.CreateParameter();
                    SupportingLabelParameter.ParameterName = "SupportingLabel";
                    SupportingLabelParameter.Direction = ParameterDirection.Input;
                    SupportingLabelParameter.DbType = DbType.String;
                    SupportingLabelParameter.Size = 256;
                    if (SupportingLabel != null)
                    {
                        SupportingLabelParameter.Value = SupportingLabel;
                    }
                    else
                    {
                        SupportingLabelParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingLabelParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeSupportingTagEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string SupportingTag)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingTagEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter SupportingTagParameter = cmd.CreateParameter();
                    SupportingTagParameter.ParameterName = "SupportingTag";
                    SupportingTagParameter.Direction = ParameterDirection.Input;
                    SupportingTagParameter.DbType = DbType.String;
                    SupportingTagParameter.Size = 256;
                    if (SupportingTag != null)
                    {
                        SupportingTagParameter.Value = SupportingTag;
                    }
                    else
                    {
                        SupportingTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingTagParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeSupportingTagEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, string SupportingTag)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeSupportingTagEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter SupportingTagParameter = cmd.CreateParameter();
                    SupportingTagParameter.ParameterName = "SupportingTag";
                    SupportingTagParameter.Direction = ParameterDirection.Input;
                    SupportingTagParameter.DbType = DbType.String;
                    SupportingTagParameter.Size = 256;
                    if (SupportingTag != null)
                    {
                        SupportingTagParameter.Value = SupportingTag;
                    }
                    else
                    {
                        SupportingTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SupportingTagParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeEntityLabelEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, Guid? DiristryGuidRef, Guid? RegistryGuidRef, Guid? DirectoryGuidRef, Guid? RegistrarGuidRef, byte? ServiceTypeCode, string TagToken, string LabelUri, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, bool? IsResolvable, bool? IsPrivate, bool? IsGenerating)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeEntityLabelEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter DiristryGuidRefParameter = cmd.CreateParameter();
                    DiristryGuidRefParameter.ParameterName = "DiristryGuidRef";
                    DiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    DiristryGuidRefParameter.DbType = DbType.Guid;
                    if (DiristryGuidRef.HasValue)
                    {
                        DiristryGuidRefParameter.Value = DiristryGuidRef.Value;
                    }
                    else
                    {
                        DiristryGuidRefParameter.Size = -1;
                        DiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryGuidRefParameter);

                    DbParameter RegistryGuidRefParameter = cmd.CreateParameter();
                    RegistryGuidRefParameter.ParameterName = "RegistryGuidRef";
                    RegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RegistryGuidRef.HasValue)
                    {
                        RegistryGuidRefParameter.Value = RegistryGuidRef.Value;
                    }
                    else
                    {
                        RegistryGuidRefParameter.Size = -1;
                        RegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryGuidRefParameter);

                    DbParameter DirectoryGuidRefParameter = cmd.CreateParameter();
                    DirectoryGuidRefParameter.ParameterName = "DirectoryGuidRef";
                    DirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    DirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (DirectoryGuidRef.HasValue)
                    {
                        DirectoryGuidRefParameter.Value = DirectoryGuidRef.Value;
                    }
                    else
                    {
                        DirectoryGuidRefParameter.Size = -1;
                        DirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryGuidRefParameter);

                    DbParameter RegistrarGuidRefParameter = cmd.CreateParameter();
                    RegistrarGuidRefParameter.ParameterName = "RegistrarGuidRef";
                    RegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RegistrarGuidRef.HasValue)
                    {
                        RegistrarGuidRefParameter.Value = RegistrarGuidRef.Value;
                    }
                    else
                    {
                        RegistrarGuidRefParameter.Size = -1;
                        RegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarGuidRefParameter);

                    DbParameter ServiceTypeCodeParameter = cmd.CreateParameter();
                    ServiceTypeCodeParameter.ParameterName = "ServiceTypeCode";
                    ServiceTypeCodeParameter.Direction = ParameterDirection.Input;
                    ServiceTypeCodeParameter.DbType = DbType.Byte;
                    ServiceTypeCodeParameter.Precision = 3;
                    ServiceTypeCodeParameter.Scale = 0;
                    if (ServiceTypeCode.HasValue)
                    {
                        ServiceTypeCodeParameter.Value = ServiceTypeCode.Value;
                    }
                    else
                    {
                        ServiceTypeCodeParameter.Size = -1;
                        ServiceTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ServiceTypeCodeParameter);

                    DbParameter TagTokenParameter = cmd.CreateParameter();
                    TagTokenParameter.ParameterName = "TagToken";
                    TagTokenParameter.Direction = ParameterDirection.Input;
                    TagTokenParameter.DbType = DbType.String;
                    TagTokenParameter.Size = 64;
                    if (TagToken != null)
                    {
                        TagTokenParameter.Value = TagToken;
                    }
                    else
                    {
                        TagTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TagTokenParameter);

                    DbParameter LabelUriParameter = cmd.CreateParameter();
                    LabelUriParameter.ParameterName = "LabelUri";
                    LabelUriParameter.Direction = ParameterDirection.Input;
                    LabelUriParameter.DbType = DbType.String;
                    LabelUriParameter.Size = 128;
                    if (LabelUri != null)
                    {
                        LabelUriParameter.Value = LabelUri;
                    }
                    else
                    {
                        LabelUriParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LabelUriParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter IsResolvableParameter = cmd.CreateParameter();
                    IsResolvableParameter.ParameterName = "IsResolvable";
                    IsResolvableParameter.Direction = ParameterDirection.Input;
                    IsResolvableParameter.DbType = DbType.Boolean;
                    if (IsResolvable.HasValue)
                    {
                        IsResolvableParameter.Value = IsResolvable.Value;
                    }
                    else
                    {
                        IsResolvableParameter.Size = -1;
                        IsResolvableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsResolvableParameter);

                    DbParameter IsPrivateParameter = cmd.CreateParameter();
                    IsPrivateParameter.ParameterName = "IsPrivate";
                    IsPrivateParameter.Direction = ParameterDirection.Input;
                    IsPrivateParameter.DbType = DbType.Boolean;
                    if (IsPrivate.HasValue)
                    {
                        IsPrivateParameter.Value = IsPrivate.Value;
                    }
                    else
                    {
                        IsPrivateParameter.Size = -1;
                        IsPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrivateParameter);

                    DbParameter IsGeneratingParameter = cmd.CreateParameter();
                    IsGeneratingParameter.ParameterName = "IsGenerating";
                    IsGeneratingParameter.Direction = ParameterDirection.Input;
                    IsGeneratingParameter.DbType = DbType.Boolean;
                    if (IsGenerating.HasValue)
                    {
                        IsGeneratingParameter.Value = IsGenerating.Value;
                    }
                    else
                    {
                        IsGeneratingParameter.Size = -1;
                        IsGeneratingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsGeneratingParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeEntityLabelEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? FgroupGuidKey, Guid? DiristryGuidRef, Guid? RegistryGuidRef, Guid? DirectoryGuidRef, Guid? RegistrarGuidRef, byte? ServiceTypeCode, string TagToken, string LabelUri, byte? HasPriority, bool? IsMarked, bool? IsPrincipal, bool? IsResolvable, bool? IsPrivate, bool? IsGenerating)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeEntityLabelEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter DiristryGuidRefParameter = cmd.CreateParameter();
                    DiristryGuidRefParameter.ParameterName = "DiristryGuidRef";
                    DiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    DiristryGuidRefParameter.DbType = DbType.Guid;
                    if (DiristryGuidRef.HasValue)
                    {
                        DiristryGuidRefParameter.Value = DiristryGuidRef.Value;
                    }
                    else
                    {
                        DiristryGuidRefParameter.Size = -1;
                        DiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryGuidRefParameter);

                    DbParameter RegistryGuidRefParameter = cmd.CreateParameter();
                    RegistryGuidRefParameter.ParameterName = "RegistryGuidRef";
                    RegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RegistryGuidRef.HasValue)
                    {
                        RegistryGuidRefParameter.Value = RegistryGuidRef.Value;
                    }
                    else
                    {
                        RegistryGuidRefParameter.Size = -1;
                        RegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistryGuidRefParameter);

                    DbParameter DirectoryGuidRefParameter = cmd.CreateParameter();
                    DirectoryGuidRefParameter.ParameterName = "DirectoryGuidRef";
                    DirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    DirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (DirectoryGuidRef.HasValue)
                    {
                        DirectoryGuidRefParameter.Value = DirectoryGuidRef.Value;
                    }
                    else
                    {
                        DirectoryGuidRefParameter.Size = -1;
                        DirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DirectoryGuidRefParameter);

                    DbParameter RegistrarGuidRefParameter = cmd.CreateParameter();
                    RegistrarGuidRefParameter.ParameterName = "RegistrarGuidRef";
                    RegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RegistrarGuidRef.HasValue)
                    {
                        RegistrarGuidRefParameter.Value = RegistrarGuidRef.Value;
                    }
                    else
                    {
                        RegistrarGuidRefParameter.Size = -1;
                        RegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RegistrarGuidRefParameter);

                    DbParameter ServiceTypeCodeParameter = cmd.CreateParameter();
                    ServiceTypeCodeParameter.ParameterName = "ServiceTypeCode";
                    ServiceTypeCodeParameter.Direction = ParameterDirection.Input;
                    ServiceTypeCodeParameter.DbType = DbType.Byte;
                    ServiceTypeCodeParameter.Precision = 3;
                    ServiceTypeCodeParameter.Scale = 0;
                    if (ServiceTypeCode.HasValue)
                    {
                        ServiceTypeCodeParameter.Value = ServiceTypeCode.Value;
                    }
                    else
                    {
                        ServiceTypeCodeParameter.Size = -1;
                        ServiceTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ServiceTypeCodeParameter);

                    DbParameter TagTokenParameter = cmd.CreateParameter();
                    TagTokenParameter.ParameterName = "TagToken";
                    TagTokenParameter.Direction = ParameterDirection.Input;
                    TagTokenParameter.DbType = DbType.String;
                    TagTokenParameter.Size = 64;
                    if (TagToken != null)
                    {
                        TagTokenParameter.Value = TagToken;
                    }
                    else
                    {
                        TagTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TagTokenParameter);

                    DbParameter LabelUriParameter = cmd.CreateParameter();
                    LabelUriParameter.ParameterName = "LabelUri";
                    LabelUriParameter.Direction = ParameterDirection.Input;
                    LabelUriParameter.DbType = DbType.String;
                    LabelUriParameter.Size = 128;
                    if (LabelUri != null)
                    {
                        LabelUriParameter.Value = LabelUri;
                    }
                    else
                    {
                        LabelUriParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(LabelUriParameter);

                    DbParameter HasPriorityParameter = cmd.CreateParameter();
                    HasPriorityParameter.ParameterName = "HasPriority";
                    HasPriorityParameter.Direction = ParameterDirection.Input;
                    HasPriorityParameter.DbType = DbType.Byte;
                    HasPriorityParameter.Precision = 3;
                    HasPriorityParameter.Scale = 0;
                    if (HasPriority.HasValue)
                    {
                        HasPriorityParameter.Value = HasPriority.Value;
                    }
                    else
                    {
                        HasPriorityParameter.Size = -1;
                        HasPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(HasPriorityParameter);

                    DbParameter IsMarkedParameter = cmd.CreateParameter();
                    IsMarkedParameter.ParameterName = "IsMarked";
                    IsMarkedParameter.Direction = ParameterDirection.Input;
                    IsMarkedParameter.DbType = DbType.Boolean;
                    if (IsMarked.HasValue)
                    {
                        IsMarkedParameter.Value = IsMarked.Value;
                    }
                    else
                    {
                        IsMarkedParameter.Size = -1;
                        IsMarkedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsMarkedParameter);

                    DbParameter IsPrincipalParameter = cmd.CreateParameter();
                    IsPrincipalParameter.ParameterName = "IsPrincipal";
                    IsPrincipalParameter.Direction = ParameterDirection.Input;
                    IsPrincipalParameter.DbType = DbType.Boolean;
                    if (IsPrincipal.HasValue)
                    {
                        IsPrincipalParameter.Value = IsPrincipal.Value;
                    }
                    else
                    {
                        IsPrincipalParameter.Size = -1;
                        IsPrincipalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrincipalParameter);

                    DbParameter IsResolvableParameter = cmd.CreateParameter();
                    IsResolvableParameter.ParameterName = "IsResolvable";
                    IsResolvableParameter.Direction = ParameterDirection.Input;
                    IsResolvableParameter.DbType = DbType.Boolean;
                    if (IsResolvable.HasValue)
                    {
                        IsResolvableParameter.Value = IsResolvable.Value;
                    }
                    else
                    {
                        IsResolvableParameter.Size = -1;
                        IsResolvableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsResolvableParameter);

                    DbParameter IsPrivateParameter = cmd.CreateParameter();
                    IsPrivateParameter.ParameterName = "IsPrivate";
                    IsPrivateParameter.Direction = ParameterDirection.Input;
                    IsPrivateParameter.DbType = DbType.Boolean;
                    if (IsPrivate.HasValue)
                    {
                        IsPrivateParameter.Value = IsPrivate.Value;
                    }
                    else
                    {
                        IsPrivateParameter.Size = -1;
                        IsPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPrivateParameter);

                    DbParameter IsGeneratingParameter = cmd.CreateParameter();
                    IsGeneratingParameter.ParameterName = "IsGenerating";
                    IsGeneratingParameter.Direction = ParameterDirection.Input;
                    IsGeneratingParameter.DbType = DbType.Boolean;
                    if (IsGenerating.HasValue)
                    {
                        IsGeneratingParameter.Value = IsGenerating.Value;
                    }
                    else
                    {
                        IsGeneratingParameter.Size = -1;
                        IsGeneratingParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsGeneratingParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeServiceRestrictionOrEdit (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidRef, Guid? RestrictionOrGuidKey, byte? RestrictionOrPriority, string RestrictionValue, bool? IsWordPhrase, bool? IsConceptLabel)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionOrEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidRefParameter = cmd.CreateParameter();
                    RestrictionAndGuidRefParameter.ParameterName = "RestrictionAndGuidRef";
                    RestrictionAndGuidRefParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidRefParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidRef.HasValue)
                    {
                        RestrictionAndGuidRefParameter.Value = RestrictionAndGuidRef.Value;
                    }
                    else
                    {
                        RestrictionAndGuidRefParameter.Size = -1;
                        RestrictionAndGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidRefParameter);

                    DbParameter RestrictionOrGuidKeyParameter = cmd.CreateParameter();
                    RestrictionOrGuidKeyParameter.ParameterName = "RestrictionOrGuidKey";
                    RestrictionOrGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionOrGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionOrGuidKey.HasValue)
                    {
                        RestrictionOrGuidKeyParameter.Value = RestrictionOrGuidKey.Value;
                    }
                    else
                    {
                        RestrictionOrGuidKeyParameter.Size = -1;
                        RestrictionOrGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrGuidKeyParameter);

                    DbParameter RestrictionOrPriorityParameter = cmd.CreateParameter();
                    RestrictionOrPriorityParameter.ParameterName = "RestrictionOrPriority";
                    RestrictionOrPriorityParameter.Direction = ParameterDirection.Input;
                    RestrictionOrPriorityParameter.DbType = DbType.Byte;
                    RestrictionOrPriorityParameter.Precision = 3;
                    RestrictionOrPriorityParameter.Scale = 0;
                    if (RestrictionOrPriority.HasValue)
                    {
                        RestrictionOrPriorityParameter.Value = RestrictionOrPriority.Value;
                    }
                    else
                    {
                        RestrictionOrPriorityParameter.Size = -1;
                        RestrictionOrPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrPriorityParameter);

                    DbParameter RestrictionValueParameter = cmd.CreateParameter();
                    RestrictionValueParameter.ParameterName = "RestrictionValue";
                    RestrictionValueParameter.Direction = ParameterDirection.Input;
                    RestrictionValueParameter.DbType = DbType.String;
                    RestrictionValueParameter.Size = 256;
                    if (RestrictionValue != null)
                    {
                        RestrictionValueParameter.Value = RestrictionValue;
                    }
                    else
                    {
                        RestrictionValueParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionValueParameter);

                    DbParameter IsWordPhraseParameter = cmd.CreateParameter();
                    IsWordPhraseParameter.ParameterName = "IsWordPhrase";
                    IsWordPhraseParameter.Direction = ParameterDirection.Input;
                    IsWordPhraseParameter.DbType = DbType.Boolean;
                    if (IsWordPhrase.HasValue)
                    {
                        IsWordPhraseParameter.Value = IsWordPhrase.Value;
                    }
                    else
                    {
                        IsWordPhraseParameter.Size = -1;
                        IsWordPhraseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsWordPhraseParameter);

                    DbParameter IsConceptLabelParameter = cmd.CreateParameter();
                    IsConceptLabelParameter.ParameterName = "IsConceptLabel";
                    IsConceptLabelParameter.Direction = ParameterDirection.Input;
                    IsConceptLabelParameter.DbType = DbType.Boolean;
                    if (IsConceptLabel.HasValue)
                    {
                        IsConceptLabelParameter.Value = IsConceptLabel.Value;
                    }
                    else
                    {
                        IsConceptLabelParameter.Size = -1;
                        IsConceptLabelParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsConceptLabelParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeServiceRestrictionOrEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidRef, Guid? RecordGuidRef, Guid? RestrictionAndGuidRef, Guid? RestrictionOrGuidKey, byte? RestrictionOrPriority, string RestrictionValue, bool? IsWordPhrase, bool? IsConceptLabel)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeServiceRestrictionOrEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidRefParameter = cmd.CreateParameter();
                    InfosetGuidRefParameter.ParameterName = "InfosetGuidRef";
                    InfosetGuidRefParameter.Direction = ParameterDirection.Input;
                    InfosetGuidRefParameter.DbType = DbType.Guid;
                    if (InfosetGuidRef.HasValue)
                    {
                        InfosetGuidRefParameter.Value = InfosetGuidRef.Value;
                    }
                    else
                    {
                        InfosetGuidRefParameter.Size = -1;
                        InfosetGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter RestrictionAndGuidRefParameter = cmd.CreateParameter();
                    RestrictionAndGuidRefParameter.ParameterName = "RestrictionAndGuidRef";
                    RestrictionAndGuidRefParameter.Direction = ParameterDirection.Input;
                    RestrictionAndGuidRefParameter.DbType = DbType.Guid;
                    if (RestrictionAndGuidRef.HasValue)
                    {
                        RestrictionAndGuidRefParameter.Value = RestrictionAndGuidRef.Value;
                    }
                    else
                    {
                        RestrictionAndGuidRefParameter.Size = -1;
                        RestrictionAndGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionAndGuidRefParameter);

                    DbParameter RestrictionOrGuidKeyParameter = cmd.CreateParameter();
                    RestrictionOrGuidKeyParameter.ParameterName = "RestrictionOrGuidKey";
                    RestrictionOrGuidKeyParameter.Direction = ParameterDirection.Input;
                    RestrictionOrGuidKeyParameter.DbType = DbType.Guid;
                    if (RestrictionOrGuidKey.HasValue)
                    {
                        RestrictionOrGuidKeyParameter.Value = RestrictionOrGuidKey.Value;
                    }
                    else
                    {
                        RestrictionOrGuidKeyParameter.Size = -1;
                        RestrictionOrGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrGuidKeyParameter);

                    DbParameter RestrictionOrPriorityParameter = cmd.CreateParameter();
                    RestrictionOrPriorityParameter.ParameterName = "RestrictionOrPriority";
                    RestrictionOrPriorityParameter.Direction = ParameterDirection.Input;
                    RestrictionOrPriorityParameter.DbType = DbType.Byte;
                    RestrictionOrPriorityParameter.Precision = 3;
                    RestrictionOrPriorityParameter.Scale = 0;
                    if (RestrictionOrPriority.HasValue)
                    {
                        RestrictionOrPriorityParameter.Value = RestrictionOrPriority.Value;
                    }
                    else
                    {
                        RestrictionOrPriorityParameter.Size = -1;
                        RestrictionOrPriorityParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionOrPriorityParameter);

                    DbParameter RestrictionValueParameter = cmd.CreateParameter();
                    RestrictionValueParameter.ParameterName = "RestrictionValue";
                    RestrictionValueParameter.Direction = ParameterDirection.Input;
                    RestrictionValueParameter.DbType = DbType.String;
                    RestrictionValueParameter.Size = 256;
                    if (RestrictionValue != null)
                    {
                        RestrictionValueParameter.Value = RestrictionValue;
                    }
                    else
                    {
                        RestrictionValueParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RestrictionValueParameter);

                    DbParameter IsWordPhraseParameter = cmd.CreateParameter();
                    IsWordPhraseParameter.ParameterName = "IsWordPhrase";
                    IsWordPhraseParameter.Direction = ParameterDirection.Input;
                    IsWordPhraseParameter.DbType = DbType.Boolean;
                    if (IsWordPhrase.HasValue)
                    {
                        IsWordPhraseParameter.Value = IsWordPhrase.Value;
                    }
                    else
                    {
                        IsWordPhraseParameter.Size = -1;
                        IsWordPhraseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsWordPhraseParameter);

                    DbParameter IsConceptLabelParameter = cmd.CreateParameter();
                    IsConceptLabelParameter.ParameterName = "IsConceptLabel";
                    IsConceptLabelParameter.Direction = ParameterDirection.Input;
                    IsConceptLabelParameter.DbType = DbType.Boolean;
                    if (IsConceptLabel.HasValue)
                    {
                        IsConceptLabelParameter.Value = IsConceptLabel.Value;
                    }
                    else
                    {
                        IsConceptLabelParameter.Size = -1;
                        IsConceptLabelParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsConceptLabelParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepLeafDelete (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepLeafDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepLeafDeleteAsync (Guid? AgentGuidRef, Guid? RecordGuidRef, bool? IsRealDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepLeafDelete";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter IsRealDeleteParameter = cmd.CreateParameter();
                    IsRealDeleteParameter.ParameterName = "IsRealDelete";
                    IsRealDeleteParameter.Direction = ParameterDirection.Input;
                    IsRealDeleteParameter.DbType = DbType.Boolean;
                    if (IsRealDelete.HasValue)
                    {
                        IsRealDeleteParameter.Value = IsRealDelete.Value;
                    }
                    else
                    {
                        IsRealDeleteParameter.Size = -1;
                        IsRealDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsRealDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepLeafEdit (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepLeafEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepLeafEditAsync (Guid? AgentGuidRef, Guid? InfosetGuidKey, Guid? RecordGuidKey, short? EntityTypeCode, string EntityName, string EntityNature, Guid? RecordDiristryGuidRef, Guid? RecordRegistryGuidRef, Guid? RecordDirectoryGuidRef, Guid? RecordRegistrarGuidRef, bool? InfosetIsAuthorPrivate, bool? InfosetIsAgentShared, bool? InfosetIsUpdaterLimited, bool? InfosetIsManagerReleased)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepLeafEdit";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter InfosetGuidKeyParameter = cmd.CreateParameter();
                    InfosetGuidKeyParameter.ParameterName = "InfosetGuidKey";
                    InfosetGuidKeyParameter.Direction = ParameterDirection.Input;
                    InfosetGuidKeyParameter.DbType = DbType.Guid;
                    if (InfosetGuidKey.HasValue)
                    {
                        InfosetGuidKeyParameter.Value = InfosetGuidKey.Value;
                    }
                    else
                    {
                        InfosetGuidKeyParameter.Size = -1;
                        InfosetGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetGuidKeyParameter);

                    DbParameter RecordGuidKeyParameter = cmd.CreateParameter();
                    RecordGuidKeyParameter.ParameterName = "RecordGuidKey";
                    RecordGuidKeyParameter.Direction = ParameterDirection.Input;
                    RecordGuidKeyParameter.DbType = DbType.Guid;
                    if (RecordGuidKey.HasValue)
                    {
                        RecordGuidKeyParameter.Value = RecordGuidKey.Value;
                    }
                    else
                    {
                        RecordGuidKeyParameter.Size = -1;
                        RecordGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidKeyParameter);

                    DbParameter EntityTypeCodeParameter = cmd.CreateParameter();
                    EntityTypeCodeParameter.ParameterName = "EntityTypeCode";
                    EntityTypeCodeParameter.Direction = ParameterDirection.Input;
                    EntityTypeCodeParameter.DbType = DbType.Int16;
                    EntityTypeCodeParameter.Precision = 5;
                    EntityTypeCodeParameter.Scale = 0;
                    if (EntityTypeCode.HasValue)
                    {
                        EntityTypeCodeParameter.Value = EntityTypeCode.Value;
                    }
                    else
                    {
                        EntityTypeCodeParameter.Size = -1;
                        EntityTypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityTypeCodeParameter);

                    DbParameter EntityNameParameter = cmd.CreateParameter();
                    EntityNameParameter.ParameterName = "EntityName";
                    EntityNameParameter.Direction = ParameterDirection.Input;
                    EntityNameParameter.DbType = DbType.String;
                    EntityNameParameter.Size = 256;
                    if (EntityName != null)
                    {
                        EntityNameParameter.Value = EntityName;
                    }
                    else
                    {
                        EntityNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNameParameter);

                    DbParameter EntityNatureParameter = cmd.CreateParameter();
                    EntityNatureParameter.ParameterName = "EntityNature";
                    EntityNatureParameter.Direction = ParameterDirection.Input;
                    EntityNatureParameter.DbType = DbType.String;
                    EntityNatureParameter.Size = 1024;
                    if (EntityNature != null)
                    {
                        EntityNatureParameter.Value = EntityNature;
                    }
                    else
                    {
                        EntityNatureParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EntityNatureParameter);

                    DbParameter RecordDiristryGuidRefParameter = cmd.CreateParameter();
                    RecordDiristryGuidRefParameter.ParameterName = "RecordDiristryGuidRef";
                    RecordDiristryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDiristryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDiristryGuidRef.HasValue)
                    {
                        RecordDiristryGuidRefParameter.Value = RecordDiristryGuidRef.Value;
                    }
                    else
                    {
                        RecordDiristryGuidRefParameter.Size = -1;
                        RecordDiristryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDiristryGuidRefParameter);

                    DbParameter RecordRegistryGuidRefParameter = cmd.CreateParameter();
                    RecordRegistryGuidRefParameter.ParameterName = "RecordRegistryGuidRef";
                    RecordRegistryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistryGuidRef.HasValue)
                    {
                        RecordRegistryGuidRefParameter.Value = RecordRegistryGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistryGuidRefParameter.Size = -1;
                        RecordRegistryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistryGuidRefParameter);

                    DbParameter RecordDirectoryGuidRefParameter = cmd.CreateParameter();
                    RecordDirectoryGuidRefParameter.ParameterName = "RecordDirectoryGuidRef";
                    RecordDirectoryGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordDirectoryGuidRefParameter.DbType = DbType.Guid;
                    if (RecordDirectoryGuidRef.HasValue)
                    {
                        RecordDirectoryGuidRefParameter.Value = RecordDirectoryGuidRef.Value;
                    }
                    else
                    {
                        RecordDirectoryGuidRefParameter.Size = -1;
                        RecordDirectoryGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordDirectoryGuidRefParameter);

                    DbParameter RecordRegistrarGuidRefParameter = cmd.CreateParameter();
                    RecordRegistrarGuidRefParameter.ParameterName = "RecordRegistrarGuidRef";
                    RecordRegistrarGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordRegistrarGuidRefParameter.DbType = DbType.Guid;
                    if (RecordRegistrarGuidRef.HasValue)
                    {
                        RecordRegistrarGuidRefParameter.Value = RecordRegistrarGuidRef.Value;
                    }
                    else
                    {
                        RecordRegistrarGuidRefParameter.Size = -1;
                        RecordRegistrarGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordRegistrarGuidRefParameter);

                    DbParameter InfosetIsAuthorPrivateParameter = cmd.CreateParameter();
                    InfosetIsAuthorPrivateParameter.ParameterName = "InfosetIsAuthorPrivate";
                    InfosetIsAuthorPrivateParameter.Direction = ParameterDirection.Input;
                    InfosetIsAuthorPrivateParameter.DbType = DbType.Boolean;
                    if (InfosetIsAuthorPrivate.HasValue)
                    {
                        InfosetIsAuthorPrivateParameter.Value = InfosetIsAuthorPrivate.Value;
                    }
                    else
                    {
                        InfosetIsAuthorPrivateParameter.Size = -1;
                        InfosetIsAuthorPrivateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAuthorPrivateParameter);

                    DbParameter InfosetIsAgentSharedParameter = cmd.CreateParameter();
                    InfosetIsAgentSharedParameter.ParameterName = "InfosetIsAgentShared";
                    InfosetIsAgentSharedParameter.Direction = ParameterDirection.Input;
                    InfosetIsAgentSharedParameter.DbType = DbType.Boolean;
                    if (InfosetIsAgentShared.HasValue)
                    {
                        InfosetIsAgentSharedParameter.Value = InfosetIsAgentShared.Value;
                    }
                    else
                    {
                        InfosetIsAgentSharedParameter.Size = -1;
                        InfosetIsAgentSharedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsAgentSharedParameter);

                    DbParameter InfosetIsUpdaterLimitedParameter = cmd.CreateParameter();
                    InfosetIsUpdaterLimitedParameter.ParameterName = "InfosetIsUpdaterLimited";
                    InfosetIsUpdaterLimitedParameter.Direction = ParameterDirection.Input;
                    InfosetIsUpdaterLimitedParameter.DbType = DbType.Boolean;
                    if (InfosetIsUpdaterLimited.HasValue)
                    {
                        InfosetIsUpdaterLimitedParameter.Value = InfosetIsUpdaterLimited.Value;
                    }
                    else
                    {
                        InfosetIsUpdaterLimitedParameter.Size = -1;
                        InfosetIsUpdaterLimitedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsUpdaterLimitedParameter);

                    DbParameter InfosetIsManagerReleasedParameter = cmd.CreateParameter();
                    InfosetIsManagerReleasedParameter.ParameterName = "InfosetIsManagerReleased";
                    InfosetIsManagerReleasedParameter.Direction = ParameterDirection.Input;
                    InfosetIsManagerReleasedParameter.DbType = DbType.Boolean;
                    if (InfosetIsManagerReleased.HasValue)
                    {
                        InfosetIsManagerReleasedParameter.Value = InfosetIsManagerReleased.Value;
                    }
                    else
                    {
                        InfosetIsManagerReleasedParameter.Size = -1;
                        InfosetIsManagerReleasedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InfosetIsManagerReleasedParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepEditMergeToSame (Guid? AgentGuidRef, string RecordHandleToRetain, string RecordHandleToDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepEditMergeToSame";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordHandleToRetainParameter = cmd.CreateParameter();
                    RecordHandleToRetainParameter.ParameterName = "RecordHandleToRetain";
                    RecordHandleToRetainParameter.Direction = ParameterDirection.Input;
                    RecordHandleToRetainParameter.DbType = DbType.String;
                    RecordHandleToRetainParameter.Size = 9;
                    if (RecordHandleToRetain != null)
                    {
                        RecordHandleToRetainParameter.Value = RecordHandleToRetain;
                    }
                    else
                    {
                        RecordHandleToRetainParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToRetainParameter);

                    DbParameter RecordHandleToDeleteParameter = cmd.CreateParameter();
                    RecordHandleToDeleteParameter.ParameterName = "RecordHandleToDelete";
                    RecordHandleToDeleteParameter.Direction = ParameterDirection.Input;
                    RecordHandleToDeleteParameter.DbType = DbType.String;
                    RecordHandleToDeleteParameter.Size = 9;
                    if (RecordHandleToDelete != null)
                    {
                        RecordHandleToDeleteParameter.Value = RecordHandleToDelete;
                    }
                    else
                    {
                        RecordHandleToDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepEditMergeToSameAsync (Guid? AgentGuidRef, string RecordHandleToRetain, string RecordHandleToDelete)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepEditMergeToSame";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordHandleToRetainParameter = cmd.CreateParameter();
                    RecordHandleToRetainParameter.ParameterName = "RecordHandleToRetain";
                    RecordHandleToRetainParameter.Direction = ParameterDirection.Input;
                    RecordHandleToRetainParameter.DbType = DbType.String;
                    RecordHandleToRetainParameter.Size = 9;
                    if (RecordHandleToRetain != null)
                    {
                        RecordHandleToRetainParameter.Value = RecordHandleToRetain;
                    }
                    else
                    {
                        RecordHandleToRetainParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToRetainParameter);

                    DbParameter RecordHandleToDeleteParameter = cmd.CreateParameter();
                    RecordHandleToDeleteParameter.ParameterName = "RecordHandleToDelete";
                    RecordHandleToDeleteParameter.Direction = ParameterDirection.Input;
                    RecordHandleToDeleteParameter.DbType = DbType.String;
                    RecordHandleToDeleteParameter.Size = 9;
                    if (RecordHandleToDelete != null)
                    {
                        RecordHandleToDeleteParameter.Value = RecordHandleToDelete;
                    }
                    else
                    {
                        RecordHandleToDeleteParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToDeleteParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeResrepEditSplitToDifferent (Guid? AgentGuidRef, string RecordHandleToSplit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepEditSplitToDifferent";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordHandleToSplitParameter = cmd.CreateParameter();
                    RecordHandleToSplitParameter.ParameterName = "RecordHandleToSplit";
                    RecordHandleToSplitParameter.Direction = ParameterDirection.Input;
                    RecordHandleToSplitParameter.DbType = DbType.String;
                    RecordHandleToSplitParameter.Size = 9;
                    if (RecordHandleToSplit != null)
                    {
                        RecordHandleToSplitParameter.Value = RecordHandleToSplit;
                    }
                    else
                    {
                        RecordHandleToSplitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToSplitParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeResrepEditSplitToDifferentAsync (Guid? AgentGuidRef, string RecordHandleToSplit)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeResrepEditSplitToDifferent";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter RecordHandleToSplitParameter = cmd.CreateParameter();
                    RecordHandleToSplitParameter.ParameterName = "RecordHandleToSplit";
                    RecordHandleToSplitParameter.Direction = ParameterDirection.Input;
                    RecordHandleToSplitParameter.DbType = DbType.String;
                    RecordHandleToSplitParameter.Size = 9;
                    if (RecordHandleToSplit != null)
                    {
                        RecordHandleToSplitParameter.Value = RecordHandleToSplit;
                    }
                    else
                    {
                        RecordHandleToSplitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordHandleToSplitParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeGenerateExamplesDocument (Guid? AgentGuidRef, string DiristryTag, ref int? ExampleCount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeGenerateExamplesDocument";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter DiristryTagParameter = cmd.CreateParameter();
                    DiristryTagParameter.ParameterName = "DiristryTag";
                    DiristryTagParameter.Direction = ParameterDirection.Input;
                    DiristryTagParameter.DbType = DbType.String;
                    DiristryTagParameter.Size = 64;
                    if (DiristryTag != null)
                    {
                        DiristryTagParameter.Value = DiristryTag;
                    }
                    else
                    {
                        DiristryTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryTagParameter);

                    DbParameter ExampleCountParameter = cmd.CreateParameter();
                    ExampleCountParameter.ParameterName = "ExampleCount";
                    ExampleCountParameter.Direction = ParameterDirection.InputOutput;
                    ExampleCountParameter.DbType = DbType.Int32;
                    ExampleCountParameter.Precision = 10;
                    ExampleCountParameter.Scale = 0;
                    if (ExampleCount.HasValue)
                    {
                        ExampleCountParameter.Value = ExampleCount.Value;
                    }
                    else
                    {
                        ExampleCountParameter.Size = -1;
                        ExampleCountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ExampleCountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["ExampleCount"].Value != null && !(cmd.Parameters["ExampleCount"].Value is System.DBNull))
                        ExampleCount = (int)Convert.ChangeType(cmd.Parameters["ExampleCount"].Value, typeof(int));
                    else
                        ExampleCount = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<Tuple<int?, int?>> ScribeGenerateExamplesDocumentAsync (Guid? AgentGuidRef, string DiristryTag, int? ExampleCount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeGenerateExamplesDocument";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter DiristryTagParameter = cmd.CreateParameter();
                    DiristryTagParameter.ParameterName = "DiristryTag";
                    DiristryTagParameter.Direction = ParameterDirection.Input;
                    DiristryTagParameter.DbType = DbType.String;
                    DiristryTagParameter.Size = 64;
                    if (DiristryTag != null)
                    {
                        DiristryTagParameter.Value = DiristryTag;
                    }
                    else
                    {
                        DiristryTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryTagParameter);

                    DbParameter ExampleCountParameter = cmd.CreateParameter();
                    ExampleCountParameter.ParameterName = "ExampleCount";
                    ExampleCountParameter.Direction = ParameterDirection.InputOutput;
                    ExampleCountParameter.DbType = DbType.Int32;
                    ExampleCountParameter.Precision = 10;
                    ExampleCountParameter.Scale = 0;
                    if (ExampleCount.HasValue)
                    {
                        ExampleCountParameter.Value = ExampleCount.Value;
                    }
                    else
                    {
                        ExampleCountParameter.Size = -1;
                        ExampleCountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ExampleCountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["ExampleCount"].Value != null && !(cmd.Parameters["ExampleCount"].Value is System.DBNull))
                        ExampleCount = (int)Convert.ChangeType(cmd.Parameters["ExampleCount"].Value, typeof(int));
                    else
                        ExampleCount = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, int?>(ExampleCount, result);
        }

        public int? ScribeGeneratePrinciplesOntology (Guid? AgentGuidRef, string DiristryTag, ref int? PrincipleCount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeGeneratePrinciplesOntology";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter DiristryTagParameter = cmd.CreateParameter();
                    DiristryTagParameter.ParameterName = "DiristryTag";
                    DiristryTagParameter.Direction = ParameterDirection.Input;
                    DiristryTagParameter.DbType = DbType.String;
                    DiristryTagParameter.Size = 64;
                    if (DiristryTag != null)
                    {
                        DiristryTagParameter.Value = DiristryTag;
                    }
                    else
                    {
                        DiristryTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryTagParameter);

                    DbParameter PrincipleCountParameter = cmd.CreateParameter();
                    PrincipleCountParameter.ParameterName = "PrincipleCount";
                    PrincipleCountParameter.Direction = ParameterDirection.InputOutput;
                    PrincipleCountParameter.DbType = DbType.Int32;
                    PrincipleCountParameter.Precision = 10;
                    PrincipleCountParameter.Scale = 0;
                    if (PrincipleCount.HasValue)
                    {
                        PrincipleCountParameter.Value = PrincipleCount.Value;
                    }
                    else
                    {
                        PrincipleCountParameter.Size = -1;
                        PrincipleCountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PrincipleCountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["PrincipleCount"].Value != null && !(cmd.Parameters["PrincipleCount"].Value is System.DBNull))
                        PrincipleCount = (int)Convert.ChangeType(cmd.Parameters["PrincipleCount"].Value, typeof(int));
                    else
                        PrincipleCount = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<Tuple<int?, int?>> ScribeGeneratePrinciplesOntologyAsync (Guid? AgentGuidRef, string DiristryTag, int? PrincipleCount)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeGeneratePrinciplesOntology";

                    DbParameter AgentGuidRefParameter = cmd.CreateParameter();
                    AgentGuidRefParameter.ParameterName = "AgentGuidRef";
                    AgentGuidRefParameter.Direction = ParameterDirection.Input;
                    AgentGuidRefParameter.DbType = DbType.Guid;
                    if (AgentGuidRef.HasValue)
                    {
                        AgentGuidRefParameter.Value = AgentGuidRef.Value;
                    }
                    else
                    {
                        AgentGuidRefParameter.Size = -1;
                        AgentGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidRefParameter);

                    DbParameter DiristryTagParameter = cmd.CreateParameter();
                    DiristryTagParameter.ParameterName = "DiristryTag";
                    DiristryTagParameter.Direction = ParameterDirection.Input;
                    DiristryTagParameter.DbType = DbType.String;
                    DiristryTagParameter.Size = 64;
                    if (DiristryTag != null)
                    {
                        DiristryTagParameter.Value = DiristryTag;
                    }
                    else
                    {
                        DiristryTagParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DiristryTagParameter);

                    DbParameter PrincipleCountParameter = cmd.CreateParameter();
                    PrincipleCountParameter.ParameterName = "PrincipleCount";
                    PrincipleCountParameter.Direction = ParameterDirection.InputOutput;
                    PrincipleCountParameter.DbType = DbType.Int32;
                    PrincipleCountParameter.Precision = 10;
                    PrincipleCountParameter.Scale = 0;
                    if (PrincipleCount.HasValue)
                    {
                        PrincipleCountParameter.Value = PrincipleCount.Value;
                    }
                    else
                    {
                        PrincipleCountParameter.Size = -1;
                        PrincipleCountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PrincipleCountParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["PrincipleCount"].Value != null && !(cmd.Parameters["PrincipleCount"].Value is System.DBNull))
                        PrincipleCount = (int)Convert.ChangeType(cmd.Parameters["PrincipleCount"].Value, typeof(int));
                    else
                        PrincipleCount = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, int?>(PrincipleCount, result);
        }

        public int? ScribeAgentSessionEdit (Guid? IdentityAppGuid, Guid? IdentityUserGuid, string IdentityUserNameDisp, ref Guid? AgentGuid, ref Guid? SessionGuid)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeAgentSessionEdit";

                    DbParameter IdentityAppGuidParameter = cmd.CreateParameter();
                    IdentityAppGuidParameter.ParameterName = "IdentityAppGuid";
                    IdentityAppGuidParameter.Direction = ParameterDirection.Input;
                    IdentityAppGuidParameter.DbType = DbType.Guid;
                    if (IdentityAppGuid.HasValue)
                    {
                        IdentityAppGuidParameter.Value = IdentityAppGuid.Value;
                    }
                    else
                    {
                        IdentityAppGuidParameter.Size = -1;
                        IdentityAppGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityAppGuidParameter);

                    DbParameter IdentityUserGuidParameter = cmd.CreateParameter();
                    IdentityUserGuidParameter.ParameterName = "IdentityUserGuid";
                    IdentityUserGuidParameter.Direction = ParameterDirection.Input;
                    IdentityUserGuidParameter.DbType = DbType.Guid;
                    if (IdentityUserGuid.HasValue)
                    {
                        IdentityUserGuidParameter.Value = IdentityUserGuid.Value;
                    }
                    else
                    {
                        IdentityUserGuidParameter.Size = -1;
                        IdentityUserGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityUserGuidParameter);

                    DbParameter IdentityUserNameDispParameter = cmd.CreateParameter();
                    IdentityUserNameDispParameter.ParameterName = "IdentityUserNameDisp";
                    IdentityUserNameDispParameter.Direction = ParameterDirection.Input;
                    IdentityUserNameDispParameter.DbType = DbType.String;
                    IdentityUserNameDispParameter.Size = 64;
                    if (IdentityUserNameDisp != null)
                    {
                        IdentityUserNameDispParameter.Value = IdentityUserNameDisp;
                    }
                    else
                    {
                        IdentityUserNameDispParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityUserNameDispParameter);

                    DbParameter AgentGuidParameter = cmd.CreateParameter();
                    AgentGuidParameter.ParameterName = "AgentGuid";
                    AgentGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentGuidParameter.DbType = DbType.Guid;
                    if (AgentGuid.HasValue)
                    {
                        AgentGuidParameter.Value = AgentGuid.Value;
                    }
                    else
                    {
                        AgentGuidParameter.Size = -1;
                        AgentGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidParameter);

                    DbParameter SessionGuidParameter = cmd.CreateParameter();
                    SessionGuidParameter.ParameterName = "SessionGuid";
                    SessionGuidParameter.Direction = ParameterDirection.InputOutput;
                    SessionGuidParameter.DbType = DbType.Guid;
                    if (SessionGuid.HasValue)
                    {
                        SessionGuidParameter.Value = SessionGuid.Value;
                    }
                    else
                    {
                        SessionGuidParameter.Size = -1;
                        SessionGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["AgentGuid"].Value != null && !(cmd.Parameters["AgentGuid"].Value is System.DBNull))
                        AgentGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentGuid"].Value, typeof(Guid));
                    else
                        AgentGuid = default(Guid);

                    if (cmd.Parameters["SessionGuid"].Value != null && !(cmd.Parameters["SessionGuid"].Value is System.DBNull))
                        SessionGuid = (Guid)Convert.ChangeType(cmd.Parameters["SessionGuid"].Value, typeof(Guid));
                    else
                        SessionGuid = default(Guid);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeCrossReferenceCheck (Guid? RecordGuidRef, Guid? FgroupGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceCheck";

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> ScribeCrossReferenceCheckAsync (Guid? RecordGuidRef, Guid? FgroupGuidKey)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeCrossReferenceCheck";

                    DbParameter RecordGuidRefParameter = cmd.CreateParameter();
                    RecordGuidRefParameter.ParameterName = "RecordGuidRef";
                    RecordGuidRefParameter.Direction = ParameterDirection.Input;
                    RecordGuidRefParameter.DbType = DbType.Guid;
                    if (RecordGuidRef.HasValue)
                    {
                        RecordGuidRefParameter.Value = RecordGuidRef.Value;
                    }
                    else
                    {
                        RecordGuidRefParameter.Size = -1;
                        RecordGuidRefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RecordGuidRefParameter);

                    DbParameter FgroupGuidKeyParameter = cmd.CreateParameter();
                    FgroupGuidKeyParameter.ParameterName = "FgroupGuidKey";
                    FgroupGuidKeyParameter.Direction = ParameterDirection.Input;
                    FgroupGuidKeyParameter.DbType = DbType.Guid;
                    if (FgroupGuidKey.HasValue)
                    {
                        FgroupGuidKeyParameter.Value = FgroupGuidKey.Value;
                    }
                    else
                    {
                        FgroupGuidKeyParameter.Size = -1;
                        FgroupGuidKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(FgroupGuidKeyParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? ScribeAgentSessionCheck (Guid? IdentityAppGuid, bool? SessionValueIsRequired, ref Guid? SessionGuid, ref Guid? UserGuid, ref Guid? AgentGuid, ref Guid? AgentInfosetGuid, ref string AgentUserNameDisp, ref bool? AgentIsAuthor, ref bool? AgentIsEditor, ref bool? AgentIsAdmin)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.ScribeAgentSessionCheck";

                    DbParameter IdentityAppGuidParameter = cmd.CreateParameter();
                    IdentityAppGuidParameter.ParameterName = "IdentityAppGuid";
                    IdentityAppGuidParameter.Direction = ParameterDirection.Input;
                    IdentityAppGuidParameter.DbType = DbType.Guid;
                    if (IdentityAppGuid.HasValue)
                    {
                        IdentityAppGuidParameter.Value = IdentityAppGuid.Value;
                    }
                    else
                    {
                        IdentityAppGuidParameter.Size = -1;
                        IdentityAppGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IdentityAppGuidParameter);

                    DbParameter SessionValueIsRequiredParameter = cmd.CreateParameter();
                    SessionValueIsRequiredParameter.ParameterName = "SessionValueIsRequired";
                    SessionValueIsRequiredParameter.Direction = ParameterDirection.Input;
                    SessionValueIsRequiredParameter.DbType = DbType.Boolean;
                    if (SessionValueIsRequired.HasValue)
                    {
                        SessionValueIsRequiredParameter.Value = SessionValueIsRequired.Value;
                    }
                    else
                    {
                        SessionValueIsRequiredParameter.Size = -1;
                        SessionValueIsRequiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionValueIsRequiredParameter);

                    DbParameter SessionGuidParameter = cmd.CreateParameter();
                    SessionGuidParameter.ParameterName = "SessionGuid";
                    SessionGuidParameter.Direction = ParameterDirection.InputOutput;
                    SessionGuidParameter.DbType = DbType.Guid;
                    if (SessionGuid.HasValue)
                    {
                        SessionGuidParameter.Value = SessionGuid.Value;
                    }
                    else
                    {
                        SessionGuidParameter.Size = -1;
                        SessionGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SessionGuidParameter);

                    DbParameter UserGuidParameter = cmd.CreateParameter();
                    UserGuidParameter.ParameterName = "UserGuid";
                    UserGuidParameter.Direction = ParameterDirection.InputOutput;
                    UserGuidParameter.DbType = DbType.Guid;
                    if (UserGuid.HasValue)
                    {
                        UserGuidParameter.Value = UserGuid.Value;
                    }
                    else
                    {
                        UserGuidParameter.Size = -1;
                        UserGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserGuidParameter);

                    DbParameter AgentGuidParameter = cmd.CreateParameter();
                    AgentGuidParameter.ParameterName = "AgentGuid";
                    AgentGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentGuidParameter.DbType = DbType.Guid;
                    if (AgentGuid.HasValue)
                    {
                        AgentGuidParameter.Value = AgentGuid.Value;
                    }
                    else
                    {
                        AgentGuidParameter.Size = -1;
                        AgentGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentGuidParameter);

                    DbParameter AgentInfosetGuidParameter = cmd.CreateParameter();
                    AgentInfosetGuidParameter.ParameterName = "AgentInfosetGuid";
                    AgentInfosetGuidParameter.Direction = ParameterDirection.InputOutput;
                    AgentInfosetGuidParameter.DbType = DbType.Guid;
                    if (AgentInfosetGuid.HasValue)
                    {
                        AgentInfosetGuidParameter.Value = AgentInfosetGuid.Value;
                    }
                    else
                    {
                        AgentInfosetGuidParameter.Size = -1;
                        AgentInfosetGuidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentInfosetGuidParameter);

                    DbParameter AgentUserNameDispParameter = cmd.CreateParameter();
                    AgentUserNameDispParameter.ParameterName = "AgentUserNameDisp";
                    AgentUserNameDispParameter.Direction = ParameterDirection.InputOutput;
                    AgentUserNameDispParameter.DbType = DbType.String;
                    AgentUserNameDispParameter.Size = 64;
                    if (AgentUserNameDisp != null)
                    {
                        AgentUserNameDispParameter.Value = AgentUserNameDisp;
                    }
                    else
                    {
                        AgentUserNameDispParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentUserNameDispParameter);

                    DbParameter AgentIsAuthorParameter = cmd.CreateParameter();
                    AgentIsAuthorParameter.ParameterName = "AgentIsAuthor";
                    AgentIsAuthorParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsAuthorParameter.DbType = DbType.Boolean;
                    if (AgentIsAuthor.HasValue)
                    {
                        AgentIsAuthorParameter.Value = AgentIsAuthor.Value;
                    }
                    else
                    {
                        AgentIsAuthorParameter.Size = -1;
                        AgentIsAuthorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAuthorParameter);

                    DbParameter AgentIsEditorParameter = cmd.CreateParameter();
                    AgentIsEditorParameter.ParameterName = "AgentIsEditor";
                    AgentIsEditorParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsEditorParameter.DbType = DbType.Boolean;
                    if (AgentIsEditor.HasValue)
                    {
                        AgentIsEditorParameter.Value = AgentIsEditor.Value;
                    }
                    else
                    {
                        AgentIsEditorParameter.Size = -1;
                        AgentIsEditorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsEditorParameter);

                    DbParameter AgentIsAdminParameter = cmd.CreateParameter();
                    AgentIsAdminParameter.ParameterName = "AgentIsAdmin";
                    AgentIsAdminParameter.Direction = ParameterDirection.InputOutput;
                    AgentIsAdminParameter.DbType = DbType.Boolean;
                    if (AgentIsAdmin.HasValue)
                    {
                        AgentIsAdminParameter.Value = AgentIsAdmin.Value;
                    }
                    else
                    {
                        AgentIsAdminParameter.Size = -1;
                        AgentIsAdminParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AgentIsAdminParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);

                    if (cmd.Parameters["SessionGuid"].Value != null && !(cmd.Parameters["SessionGuid"].Value is System.DBNull))
                        SessionGuid = (Guid)Convert.ChangeType(cmd.Parameters["SessionGuid"].Value, typeof(Guid));
                    else
                        SessionGuid = default(Guid);

                    if (cmd.Parameters["UserGuid"].Value != null && !(cmd.Parameters["UserGuid"].Value is System.DBNull))
                        UserGuid = (Guid)Convert.ChangeType(cmd.Parameters["UserGuid"].Value, typeof(Guid));
                    else
                        UserGuid = default(Guid);

                    if (cmd.Parameters["AgentGuid"].Value != null && !(cmd.Parameters["AgentGuid"].Value is System.DBNull))
                        AgentGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentGuid"].Value, typeof(Guid));
                    else
                        AgentGuid = default(Guid);

                    if (cmd.Parameters["AgentInfosetGuid"].Value != null && !(cmd.Parameters["AgentInfosetGuid"].Value is System.DBNull))
                        AgentInfosetGuid = (Guid)Convert.ChangeType(cmd.Parameters["AgentInfosetGuid"].Value, typeof(Guid));
                    else
                        AgentInfosetGuid = default(Guid);

                    if (cmd.Parameters["AgentUserNameDisp"].Value != null && !(cmd.Parameters["AgentUserNameDisp"].Value is System.DBNull))
                        AgentUserNameDisp = (string)Convert.ChangeType(cmd.Parameters["AgentUserNameDisp"].Value, typeof(string));
                    else
                        AgentUserNameDisp = default(string);

                    if (cmd.Parameters["AgentIsAuthor"].Value != null && !(cmd.Parameters["AgentIsAuthor"].Value is System.DBNull))
                        AgentIsAuthor = (bool)Convert.ChangeType(cmd.Parameters["AgentIsAuthor"].Value, typeof(bool));
                    else
                        AgentIsAuthor = default(bool);

                    if (cmd.Parameters["AgentIsEditor"].Value != null && !(cmd.Parameters["AgentIsEditor"].Value is System.DBNull))
                        AgentIsEditor = (bool)Convert.ChangeType(cmd.Parameters["AgentIsEditor"].Value, typeof(bool));
                    else
                        AgentIsEditor = default(bool);

                    if (cmd.Parameters["AgentIsAdmin"].Value != null && !(cmd.Parameters["AgentIsAdmin"].Value is System.DBNull))
                        AgentIsAdmin = (bool)Convert.ChangeType(cmd.Parameters["AgentIsAdmin"].Value, typeof(bool));
                    else
                        AgentIsAdmin = default(bool);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
